////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using Unity;
using Unity.Injection;
using Unity.Interception.ContainerIntegration;
using Unity.Interception.Interceptors.TypeInterceptors.VirtualMethodInterception;
using Unity.Interception.PolicyInjection;
using Unity.Lifetime;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.Settings;
using GenerativeObjects.Practices.ORMSupportClasses;
using Solid.BusinessLayer;
using Solid.BusinessLayer.Components.Client;
using Solid.BusinessLayer.Components.Server;
using Solid.Data.DataObjects;	
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using GenerativeObjects.Practices.LayerSupportClasses;	
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;	
using GenerativeObjects.Practices.LayerSupportClasses.Features.Threading;
using GenerativeObjects.Services.Email;
using Solid.Feature.Security.Common;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using Solid.Data.DataProviders.Database;

namespace Solid.Client.Model
{
    public static class Container
    {
        public static IUnityContainer Initialize()
        {
			var container = new UnityContainer();
            container.AddNewExtension<Interception>();

			container.RegisterType<IObjectsDataSet, ObjectsDataSet>();
			
			// Transactions
			{
				// Singleton provider of transactions
				container.RegisterType<ITransactionProvider, DatabaseTransactionProvider>(new ContainerControlledLifetimeManager());
			
				// The default request handler data access transaction. Per-thread so that we can manage / detect incomplete transactions
				// IParameterisedTransaction is a lower-level (ORM support) interface that resolves to the same per-thread transaction (so that low-level can see the transaction parameters)
				container.RegisterType<DatabaseDataProviderTransaction>(new PerThreadLifetimeManager());
				container.RegisterType<IDataProviderTransaction>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<DatabaseDataProviderTransaction>()));
				container.RegisterType<IParameterisedTransaction>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<DatabaseDataProviderTransaction>()));
				
				// Custom / client transaction instances
				container.RegisterType<IClientTransaction, DatabaseDataProviderTransaction>();
			}

            //  Resolve same ThreadContext instance (per thread) when caller resolves either IUserIdentity or IThreadContext
            // cf. test 
	        container.RegisterType<ThreadContext>(new PerThreadLifetimeManager());
	        container.RegisterType<IThreadContext>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<ThreadContext>()));
	        container.RegisterType<IUserIdentity>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<ThreadContext>()));

          container.RegisterType<IAuthentication, Authentication>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProvider<GORoleDataObject>, GORoleService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOGroupRoleDataObject>, GOGroupRoleService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<PlaceDataObject>, PlaceService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<LocationDataObject>, LocationService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<PlaceToLocationDataObject>, PlaceToLocationService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOUserDataObject>, GOUserService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOGroupDataObject>, GOGroupService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOUserRoleDataObject>, GOUserRoleService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<CountryDataObject>, CountryService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOUserGroupDataObject>, GOUserGroupService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			container.RegisterType<IDataProvider<GOLoginHistoryDataObject>, GOLoginHistoryService>(new PerThreadLifetimeManager(), 
                                                                                                       new InterceptionBehavior<PolicyInjectionBehavior>(), 
                                                                                                       new Interceptor<VirtualMethodInterceptor>());
			
			// EntityDataProvider: Given an entity instance, get its corresponding entity data provider
			container.RegisterType<IEntityDataProvider, DatabaseEntityProvider>(new ContainerControlledLifetimeManager());

			container.RegisterType<ISettingsProvider, SettingsProvider>(new ContainerControlledLifetimeManager());


			// Framework Services
			{
				container.RegisterType<IMailbox, OutlookMailbox>();
				container.RegisterType<ISMTPClient, SMTPClient>();
			}

			// Register custom types if any
			CustomContainer.RegisterCustomTypes(container);

            var settings = container.Resolve<ISettingsProvider>();
            settings["WrapForPolicyInjection"] = false;
        
			return container;
		}

    }
}
