////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Data;
using System.Collections;
using System.Linq;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.Test.Api;
using Unity;
using NUnit.Framework;
using Newtonsoft.Json;
using FluentAssertions;
using Solid.Data.DataObjects;
using GenerativeObjects.Practices.Test.TestCase;
using static GenerativeObjects.Practices.Test.TestCase.TestCaseSourceManager;
using GenerativeObjects.Practices.Web.Remote;
using System.Net;

namespace Solid.Tests.Api.Tests
{	
	/// <summary>
	/// ApiTests class for the entity 'UserProfile'.
	/// </summary>
	[TestFixture]
	[Category("Generated_ApiTests")]
	public class UserProfileTestsApi
	{
		static readonly string appUrl = APITestManager.getApiUrl() + "userprofile/";

	    [OneTimeSetUp]
        public void TestFixtureInit()
        {
			ApplicationSettings.InitializeContainer(Solid.ServiceLayer.Container.Initialize());
			//APITestManager.executeSQLFile("UserProfile");
        }

        [SetUp]
        public void TestInit()
        {
        }

        [TearDown]
        public void TestDispose()
        {
        }

        [OneTimeTearDown]
        public void TestFixtureDispose()
        {
        }

        [Test, TestCaseSource("UserProfilePostData")]
        public void UserProfilePostTest(IDictionary testData)
        {
			#region Arrange

			var currentEntity = new UserProfileDataObject();
			var include = "";
			var token = "";

			currentEntity.IsNew = Convert.ToBoolean(testData["IsNew"].ToString()); 

			if (!currentEntity.IsNew)
			{
				currentEntity.Uri = testData["Uri"].ToString().Trim() != null ? testData["Uri"].ToString().Trim().ToString() : null;
				include = testData["Include"].ToString().Trim();
			}
			var expected_result = ConvertToStatusCode(testData["Result"]);
			
			#endregion

			#region Act

			var json = JsonConvert.SerializeObject(currentEntity);
            var postUrl = APITestManager.doPostRequestBody(json, include);
			
			APIWebRequest request = new APIWebRequest();
			var username = testData["Username"].ToString().Trim();
			var password = testData["Password"].ToString().Trim();
			token = request.getToken(APITestManager.getAuthenticateUrl(), username, password);
			using (var testResponse = request.ProcessAPIWebRequest(appUrl, APIWebRequest.TypeCall.Save, postUrl, token))
			{
				var status_code = testResponse.StatusCode;
				var status_description =  testResponse.Status;
				var response_body = testResponse.Body;

			#endregion

			#region Assert

				APITestManager.displayResponse(testResponse);
				Assert.AreEqual(expected_result, status_code);

				if (status_code == HttpStatusCode.OK)
				{
					// to be implemented
				}
			
			#endregion
			}
        }

        [Test, TestCaseSource("UserProfileGetData")]
        public void UserProfileGetTest(IDictionary testData)
        {
			#region Arrange

			var list = new List<string>();
			string pkUri = testData["Uri"].ToString().Trim();
			list.Add(pkUri);
	   		string pkString = string.Join("/", list.ToArray());
			string token = "";
			
			#endregion

			#region Act

			var request = new APIWebRequest();
            
			var username = testData["Username"].ToString().Trim();
			var password = testData["Password"].ToString().Trim();
			token = request.getToken(APITestManager.getAuthenticateUrl(), username, password);
			using (var testResponse = request.ProcessAPIWebRequest(appUrl, APIWebRequest.TypeCall.Get, pkString, token))
			{
				var status_code = testResponse.StatusCode;
				var response_body = testResponse.Body;
				var expected_result = ConvertToStatusCode(testData["Result"]);
			
			#endregion

			#region Assert

				Assert.AreEqual(expected_result, status_code);
				APITestManager.displayResponse(testResponse);

				if (status_code == HttpStatusCode.OK)
				{
				// to be implemented
				}
			
			#endregion
			}
        }


        [Test, TestCaseSource("UserProfileDeleteData")]
        public void UserProfileDeleteTest(IDictionary testData)
        {
			#region Arrange

			var list = new List<string>();
			string pkUri = testData["Uri"].ToString().Trim();
			list.Add(pkUri);
	   		string pkString = string.Join("/", list.ToArray());
			string token = "";

			#endregion

			#region Act

			var request = new APIWebRequest();
            
			var username = testData["Username"].ToString().Trim();
			var password = testData["Password"].ToString().Trim();
			token = request.getToken(APITestManager.getAuthenticateUrl(), username, password);
			using (var testResponse = request.ProcessAPIWebRequest(appUrl, APIWebRequest.TypeCall.Delete, pkString, token))
			{
				var status_code = testResponse.StatusCode;
	            var response_body = testResponse.Body;
		        var expected_result = ConvertToStatusCode(testData["Result"]);
	
			#endregion

			#region Assert

				Assert.AreEqual(expected_result, status_code);
				APITestManager.displayResponse(testResponse);

				if (status_code == HttpStatusCode.NoContent)
				{
				// to be implemented
				// add validation that entity was removed from DB, something like:
				//CustomerDAO customerDAO = CustomerDAOFactory.getInstance();
				//Customer customerDB = customerDAO.getCustomerByID(customer.id);
				//Assert.IsNull(customerDB);
				}

			#endregion
			}
        }

        [Test, TestCaseSource("UserProfileGetCollectionData")]
        public void UserProfileGetCollectionTest(IDictionary testData)
        {
			#region Arrange

			var _testData = APITestManager.CreateUrlDataParametersDictionary(testData);

            var filter = _testData["filter"].ToString();
            var sortColumn = _testData["sortColumn"].ToString();
            var sortOrder = _testData["sortOrder"].ToString();
            var include = _testData["Include"].ToString();
            var pageNumber = Convert.ToInt32(_testData["PageNumber"]);
            var pageSize = Convert.ToInt32(_testData["PageSize"]);
			var token = "";

			#endregion

			#region Act

			var queryString = APITestManager.doURLQueryString(_testData);
			var request = new APIWebRequest();
            
			var username = testData["Username"].ToString().Trim();
			var password = testData["Password"].ToString().Trim();
			token = request.getToken(APITestManager.getAuthenticateUrl(), username, password);
			using (var testResponse = request.ProcessAPIWebRequest(appUrl, APIWebRequest.TypeCall.GetCollection, queryString, token))
			{
				var status_code = testResponse.StatusCode;
				var response_body = testResponse.Body;
				var expected_result = ConvertToStatusCode(testData["Result"]);

			#endregion

			#region Assert

				Assert.AreEqual(expected_result, status_code);
				APITestManager.displayResponse(testResponse);

				if (status_code == HttpStatusCode.OK)
				{
				// to be implemented
				// we have to compare collections from database and returned from API response
				}

			#endregion
			}
        }

        [Test, TestCaseSource("UserProfileCountData")]
        public void UserProfileCountTest(IDictionary testData)
        {
			#region Arrange

			Dictionary<string, string> _testData = APITestManager.CreateUrlDataParametersDictionary(testData);
            var filter = _testData["filter"].ToString();
			var token = "";
			
			#endregion

			#region Act

			var queryString = APITestManager.doURLQueryString(_testData);
			var request = new APIWebRequest();
            
			var username = testData["Username"].ToString().Trim();
			var password = testData["Password"].ToString().Trim();
			token = request.getToken(APITestManager.getAuthenticateUrl(), username, password);
			using (var testResponse = request.ProcessAPIWebRequest(appUrl, APIWebRequest.TypeCall.Count, queryString, token))
			{
				var status_code = testResponse.StatusCode;
				var response_body = testResponse.Body;
				var expected_result = ConvertToStatusCode(testData["Result"]);

			#endregion

			#region Assert

				Assert.AreEqual(expected_result, status_code);
				APITestManager.displayResponse(testResponse);

				if (status_code == HttpStatusCode.OK)
				{
				// to be implemented, we have to compare count returned from DB and count returned with the API response. Should be something like: 
				// CustomerDAO customerDAO = CustomerDAOFactory.getInstance();
				// int expected_count = customerDAO.getCountWithFilter(filter);
				// Assert.AreEqual(expected_count, Convert.ToInt32(response_body));
				}

			#endregion
			}
        }

		public static IEnumerable<TestCaseData> UserProfilePostData
        {
			get{ return TestCaseSourceManager.PrepareTestCaseData("UserProfile", "Post"); }
        }

		public static IEnumerable<TestCaseData> UserProfileGetData
        {
			get{ return TestCaseSourceManager.PrepareTestCaseData("UserProfile", "Get"); }
        }

		public static IEnumerable<TestCaseData> UserProfileDeleteData
		{
			get{ return TestCaseSourceManager.PrepareTestCaseData("UserProfile", "Delete"); }
        }

		public static IEnumerable<TestCaseData> UserProfileGetCollectionData
		{
			get{ return TestCaseSourceManager.PrepareTestCaseData("UserProfile", "GetCollection"); }
        }

		public static IEnumerable<TestCaseData> UserProfileCountData
		{
			get{ return TestCaseSourceManager.PrepareTestCaseData("UserProfile", "Count"); }
		}
	}
}