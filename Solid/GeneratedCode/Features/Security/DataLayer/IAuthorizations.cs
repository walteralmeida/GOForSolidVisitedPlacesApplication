////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using GenerativeObjects.Practices.ORMSupportClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using Solid.Feature.Security.Common;

namespace Solid.Features.Security
{
	// Define what should happen if failed authorization check on a dataset entity
    public enum DataSetAuthorizationCheckMode
    {
        RemoveFromDataSet,
        DenyAccess
    }

	public class SecurityPredicate
	{
		public SecurityPredicate(LambdaExpression filter, LambdaExpression datasetFilter, string message, string includes, bool evaluateDataset, bool evaluateDatabase)
		{
			Filter = filter;
			DatasetFilter = datasetFilter;
			Message = message;
			Includes = includes;
			IsEvaluateDataset = evaluateDataset;
			IsEvaluateDatabase = evaluateDatabase;
		}

		public LambdaExpression Filter { get; set; }
		public LambdaExpression DatasetFilter { get; set; }
		public string Message { get; private set; }
		public string Includes { get; private set; }
		public bool IsEvaluateDataset { get; private set; }
		public bool IsEvaluateDatabase { get; private set; }
	}

    public interface IAuthorizations
    {
		// Returns permission level for CRUD operations on an entity for a given user claims.
		// filter : returns the filter to apply for limited authorization, if any
		// message : returns the message to return in case of unauthorized access. Could be null for default message
		// includes : returns the required includes, if any, to be able to apply the filter, if any
		PermissionLevel CanCreate(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate);
        PermissionLevel CanRead(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate);
        PermissionLevel CanUpdate(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate);
        PermissionLevel CanDelete(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate);
        
		// Check read authorization on all the entities of a dataset. usefull when a get, getcollection or save action is configured with includes, to make sure related objects can be read for the given user claims.
		// dataset : the dataset to check
        // claims : user claims to check upon
		// entitiesToIgnore : for these entities, the check should be skipped
		// mode : define if an entity not authorized should be removed from the dataset or an exception thrown
		PermissionLevel CheckReadAuthorizationsOnDataSet(IObjectsDataSet dataset, UserClaims claims, IEnumerable<IDataObject> entitiesToIgnore, DataSetAuthorizationCheckMode mode, Dictionary<string, object> parameters, out string message);
 
        // Check create, update or delete authorizations on all the entities of a dataset. 
        // dataset : the dataset to check
        // claims : user claims to check upon
        PermissionLevel CheckWriteAuthorizationsOnDataSet(IObjectsDataSet dataset, UserClaims claims, Dictionary<string, object> parameters, out string message);
   }
}
