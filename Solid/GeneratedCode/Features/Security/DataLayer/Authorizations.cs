////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using Unity;
using GenerativeObjects.Practices.Settings;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using GenerativeObjects.Practices.ORMSupportClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Linq.Dynamic;
using Solid.Feature.Security.Common;
using Solid.Data.DataObjects;
using Solid.Data.DataProviders.Database;
using System.Collections.Concurrent;
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Features.Security
{
    public class Authorizations : IAuthorizations
    {
        // cache the entity authorizations instances
        // WARNING : we make the assumption that they are singletons. We in theory should not and let the unity container define it
        private static ConcurrentDictionary<string, IEntityAuthorizations> _entityAuthorizations = new ConcurrentDictionary<string, IEntityAuthorizations>();

        // Returns the entity authorizations class for a given entity, with caching
        public static IEntityAuthorizations GetEntityAuthorizations(IDataObject entity)
        {
            string entityName = entity.GetType().Name;

            // if not already resolved, we should get it from container
            if(!_entityAuthorizations.ContainsKey(entityName))
            {
                // Check if there is a entity authorizations registered
                if (ApplicationSettings.Container.IsRegistered<IEntityAuthorizations>(entity.GetType().Name.Substring(0, entity.GetType().Name.Length - "DataObject".Length).ToLower() + "authorizations"))
                {
                    // GetOrAdd in case concurrent call...
                    _entityAuthorizations.GetOrAdd(entityName,  ApplicationSettings.Container.Resolve<IEntityAuthorizations>(entityName.Substring(0, entity.GetType().Name.Length - "DataObject".Length).ToLower() + "authorizations"));
                }
                else //store null
                {
                    // GetOrAdd in case concurrent call...
                    _entityAuthorizations.GetOrAdd(entityName, (IEntityAuthorizations) null);
                }
            }

            return _entityAuthorizations[entityName];
        }

		private string FormatAccessDeniedMessage(string explanation, SecurityPredicate predicate)
		{
			if (predicate == null)
				return explanation;
			
			return $"{explanation}{(String.IsNullOrEmpty(predicate.Message) || predicate.Message.Contains(explanation) ? String.Empty : $": {predicate.Message}")}";
		}

        public PermissionLevel CanCreate(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate)
        {
			message = null;
			predicate = null;

            // If not authenticated and no role assigned to anonymous users
            if (claims.IsAuthenticated == false && claims.Roles.Count == 0)
                return PermissionLevel.Denied;

			PermissionLevel result = PermissionLevel.NotSet;

			// get the per-entity authorizations class so we can check for entity-specific permissions overrides
            var entityAuthorizations = GetEntityAuthorizations(entity);

			// Check override access rule first
            if (entityAuthorizations != null)
			{
                result = entityAuthorizations.CanCreate(entity, claims, out message, out predicate);     

				if (result == PermissionLevel.Denied)
				{
					string explanation = Explain(EntityAccessEnum.CREATE, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					result = PermissionLevel.Denied;
				}
			}

			// If no override rule found, check default entity rules for an authorized role
			if (result == PermissionLevel.NotSet)
			{
				// Roles "Administrator", "User" have default authorized CREATE access to all entities
				if (claims.Roles.Intersect(new List<string> { "Administrator", "User" }).Any())
				{
					result = PermissionLevel.Authorized;
				}
				else
				{
					message = Explain(EntityAccessEnum.CREATE, entityAuthorizations.EntityDisplayName);
					result = PermissionLevel.Denied;
				}
			}

			return result;
		}      

        public PermissionLevel CanRead(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate)
        {
			message = null;
			predicate = null;

            // If not authenticated and no role assigned to anonymous users
            if (claims.IsAuthenticated == false && claims.Roles.Count == 0)
                return PermissionLevel.Denied;

			PermissionLevel result = PermissionLevel.NotSet;

			// get the per-entity authorizations class so we can check for entity-specific permissions overrides
            var entityAuthorizations = GetEntityAuthorizations(entity);

			// Check override access rule first
            if (entityAuthorizations != null)
			{
                result = entityAuthorizations.CanRead(entity, claims, out message, out predicate);     

				if (result == PermissionLevel.Denied)
				{
					string explanation = Explain(EntityAccessEnum.READ, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					result = PermissionLevel.Denied;
				}
			}

			// If no override rule found, check default entity rules for an authorized role
			if (result == PermissionLevel.NotSet)
			{
				// Roles "Administrator", "User" have default authorized READ access to all entities
				if (claims.Roles.Intersect(new List<string> { "Administrator", "User" }).Any())
				{
					result = PermissionLevel.Authorized;
				}
				else
				{
					message = Explain(EntityAccessEnum.READ, entityAuthorizations.EntityDisplayName);
					result = PermissionLevel.Denied;
				}
			}

			return result;
		} 

        public PermissionLevel CanUpdate(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate)
        {
			message = null;
			predicate = null;

            // If not authenticated and no role assigned to anonymous users
            if (claims.IsAuthenticated == false && claims.Roles.Count == 0)
                return PermissionLevel.Denied;

			PermissionLevel result = PermissionLevel.NotSet;

			// get the per-entity authorizations class so we can check for entity-specific permissions overrides
            var entityAuthorizations = GetEntityAuthorizations(entity);

			// Check override access rule first
            if (entityAuthorizations != null)
			{
                result = entityAuthorizations.CanUpdate(entity, claims, out message, out predicate);     

				if (result == PermissionLevel.Denied)
				{
					string explanation = Explain(EntityAccessEnum.UPDATE, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					result = PermissionLevel.Denied;
				}
			}

			// If no override rule found, check default entity rules for an authorized role
			if (result == PermissionLevel.NotSet)
			{
				// Roles "Administrator", "User" have default authorized UPDATE access to all entities
				if (claims.Roles.Intersect(new List<string> { "Administrator", "User" }).Any())
				{
					result = PermissionLevel.Authorized;
				}
				else
				{
					message = Explain(EntityAccessEnum.UPDATE, entityAuthorizations.EntityDisplayName);
					result = PermissionLevel.Denied;
				}
			}

			return result;
		} 

        public PermissionLevel CanDelete(IDataObject entity, UserClaims claims, out string message, out SecurityPredicate predicate)
        {
			message = null;
			predicate = null;

            // If not authenticated and no role assigned to anonymous users
            if (claims.IsAuthenticated == false && claims.Roles.Count == 0)
                return PermissionLevel.Denied;

			PermissionLevel result = PermissionLevel.NotSet;

			// get the per-entity authorizations class so we can check for entity-specific permissions overrides
            var entityAuthorizations = GetEntityAuthorizations(entity);

			// Check override access rule first
            if (entityAuthorizations != null)
			{
                result = entityAuthorizations.CanDelete(entity, claims, out message, out predicate);     

				if (result == PermissionLevel.Denied)
				{
					string explanation = Explain(EntityAccessEnum.DELETE, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					result = PermissionLevel.Denied;
				}
			}

			// If no override rule found, check default entity rules for an authorized role
			if (result == PermissionLevel.NotSet)
			{
				// Roles "Administrator", "User" have default authorized DELETE access to all entities
				if (claims.Roles.Intersect(new List<string> { "Administrator", "User" }).Any())
				{
					result = PermissionLevel.Authorized;
				}
				else
				{
					message = Explain(EntityAccessEnum.DELETE, entityAuthorizations.EntityDisplayName);
					result = PermissionLevel.Denied;
				}
			}

			return result;
		} 

		// Check read authorization on all the entities of a dataset. usefull when a get, getcollection or save action is configured with includes, to make sure related objects can be read for the given user claims.
		// dataset : the dataset to check
		// entitiesToIgnore : for these entities, the check should be skipped
		// mode : define if an entity not authorized should be removed from the dataset or an exception thrown
		public PermissionLevel CheckReadAuthorizationsOnDataSet(IObjectsDataSet dataset, UserClaims claims, IEnumerable<IDataObject> entitiesToIgnore, DataSetAuthorizationCheckMode mode, Parameters parameters, out string message)
		{
			message = null;
            SecurityPredicate predicate = null;

			// Work on a clone of the dataset so as not to mess with the original (causes save problems otherwise, e.g. if main entity !IsDirty)
			dataset = dataset.Clone();
			
            foreach (var entity in dataset.GetAllObjects())
            {
                var permissionLevel = CanRead(entity, claims, out message, out predicate);

                if (permissionLevel != PermissionLevel.Authorized)
                {
					if (mode == DataSetAuthorizationCheckMode.RemoveFromDataSet)
					{
						dataset.RemoveObject(entity);
						continue;
					}
					else
					{
						string explanation = Explain(EntityAccessEnum.READ, GetEntityAuthorizations(entity).EntityDisplayName);
						message = FormatAccessDeniedMessage(explanation, predicate);
						return PermissionLevel.Denied;
					}
                }

                if (predicate != null)
				{
					// If the security filter needs related data, load it first:
					if (!String.IsNullOrEmpty(predicate.Includes))
						DataObjectHelper.RecurseLoadIncludes(entity, parameters, predicate.Includes, skipSecurity: true);

					if (!DoesPredicateAccept(entity, predicate.Filter, predicate.Includes, EntityAccessEnum.READ))
					{
						if (mode == DataSetAuthorizationCheckMode.RemoveFromDataSet)
						{
							dataset.RemoveObject(entity);
							continue;
						}
						else
						{
							string explanation = Explain(EntityAccessEnum.READ, GetEntityAuthorizations(entity).EntityDisplayName);
							message = FormatAccessDeniedMessage(explanation, predicate);
							return PermissionLevel.Denied;
						}
					}
				}
            }

			return PermissionLevel.Authorized;
		}

		// Check create, update or delete authorizations on all the entities of a dataset. 
        // dataset : the dataset to check
        // claims : user claims to check upon
        // entitiesToIgnore : for these entities, the check should be skipped
        // mode : define if an entity not authorized should be removed from the dataset or an exception thrown
        public PermissionLevel CheckWriteAuthorizationsOnDataSet(IObjectsDataSet saveset, UserClaims claims, Parameters parameters, out string message)
        {
			// Work on a clone of the dataset so as not to mess with the original (causes save problems otherwise, e.g. if main entity !IsDirty)
			var dataset = saveset.CloneDirtyObjects();

			message = null;
			SecurityPredicate predicate = null;

            foreach (var entity in dataset.GetAllObjects())
            {
				// get the instance of the entity authorizations class
				var entityAuthorizations = GetEntityAuthorizations(entity);

                // case delete
                if (entity.IsMarkedForDeletion)
                {
                    var permissionLevel = CanDelete(entity, claims, out message, out predicate);

                    if (permissionLevel != PermissionLevel.Authorized)
					{
						string explanation = Explain(EntityAccessEnum.DELETE, entityAuthorizations.EntityDisplayName);
						message = FormatAccessDeniedMessage(explanation, predicate);
						return PermissionLevel.Denied;
					}
                }
                // case create / update
                else 
                {
                    PermissionLevel permissionLevel;

                    if (entity.IsNew)
                        permissionLevel = CanCreate(entity, claims, out message, out predicate);
                    else if (entity.IsDirty)
					{
						permissionLevel = CanUpdate(entity, claims, out message, out predicate);

						if (permissionLevel != PermissionLevel.Authorized && AppSettings.Get<bool>("DataSetAuthorizationCheckModeRemoveFromDataSet"))
						{
							saveset.RemoveObject(entity);
							continue;
						}
					}
					else
						continue;

					if (permissionLevel != PermissionLevel.Authorized)
					{
						string explanation = Explain(entity.IsNew ? EntityAccessEnum.CREATE : EntityAccessEnum.UPDATE, entityAuthorizations.EntityDisplayName);
						message = FormatAccessDeniedMessage(explanation, predicate);
						return PermissionLevel.Denied;
					}
                }
            }

            return PermissionLevel.Authorized;
        }   
		
		public bool IsAuthorized(
			IDataObject entity, 
			SecurityPredicate predicate,
			EntityAccessEnum action, 
			ref string message,
			Parameters parameters = null)
		{
            if (parameters == null)
            {
				// connect to existing transaction by using the existing parameters
                var transaction = ApplicationSettings.Resolve<ITransactionProvider>().GetTransaction(parameters) as DatabaseDataProviderTransaction;
                parameters = transaction.Parameters;
                // this following line is probably no necessary. just for safety
				parameters = parameters ?? new Parameters();
            }
			
			var entityAuthorizations = GetEntityAuthorizations(entity);

			// If the security filter needs related data, load related data first:
			if (!String.IsNullOrEmpty(predicate.Includes))
				DataObjectHelper.RecurseLoadIncludes(entity, parameters, predicate.Includes, skipSecurity: true);

			// First check the submitted data : is submitted data authorized?
			if (predicate.IsEvaluateDataset)
			{
				if (!DoesPredicateAccept(entity, predicate.DatasetFilter, predicate.Includes, action))
				{
					string explanation = Explain(action, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					return false;
				}
			}

			// Then check existing data in database 
			if (predicate.IsEvaluateDatabase && !entity.IsNew)
			{
				// Important: We fetch a fresh copy (including the includes) to eliminate possibility of hacker messing with the dataset
				dynamic provider = ApplicationSettings.Container.Resolve<IEntityDataProvider>().GetDataProviderForEntity(entity);
				var existingEntity = provider.Get(entity, null, includes: String.IsNullOrEmpty(predicate.Includes) ? null : predicate.Includes.Split(',').ToList(), parameters: parameters, skipSecurity: true);

				if (!DoesPredicateAccept(existingEntity, predicate.DatasetFilter, predicate.Includes, action))
				{
					string explanation = Explain(action, entityAuthorizations.EntityDisplayName);
					message = FormatAccessDeniedMessage(explanation, predicate);
					return false;
				}
			}

			return true;
		}

		private static string Explain(EntityAccessEnum change, string entityDisplayName)
		{
			return ApplicationSettings.Container.Resolve<IAuthentication>().ExplainAccessDenied(change, entityDisplayName);
		}

		private bool DoesPredicateAccept(IDataObject entity, LambdaExpression predicate, string includes, EntityAccessEnum access)
		{
			try
			{
				return System.Linq.Dynamic.DynamicExpression.ParseAndExecutePredicate(entity, predicate);
			}
			catch (Exception e)
			{
				// Development time exception - could make this a configuration thing if we want to be sure users never see these messages.
				// But this is a lot more helpful than allowing the default exception to bubble up - no way to know what's wrong currently.
				throw new GOServerException("securityPredicateExecutionFailure", 
					$@"Error executing {access.ToString().ToUpper()} security predicate for entity '{entity.GetType().Name.Replace("DataObject", "")}'. 

						Predicate:
						{predicate.ToString()}

						Includes:
						{(String.IsNullOrEmpty(includes) ? "(none)" : includes)}
						
						Error:
						{(e.InnerException == null ? e.Message : e.InnerException.Message)}

						Diagnosis:
							* Is the include path correct? If not, please raise a support ticket.
							* Can any of the related entities along the include path be null? And if so, have you remembered to check for nulls in the predicate?
					", 
					e);
			}
		}
   	}

	public static class PredicateBuilder
	{
		public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> a, Expression<Func<T, bool>> b)
		{
			ParameterExpression p = a.Parameters[0];

			SubstExpressionVisitor visitor = new SubstExpressionVisitor();
			visitor.subst[b.Parameters[0]] = p;

			Expression body = Expression.AndAlso(a.Body, visitor.Visit(b.Body));
			return Expression.Lambda<Func<T, bool>>(body, p);
		}

		public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> a, Expression<Func<T, bool>> b)
		{

			ParameterExpression p = a.Parameters[0];

			SubstExpressionVisitor visitor = new SubstExpressionVisitor();
			visitor.subst[b.Parameters[0]] = p;

			Expression body = Expression.OrElse(a.Body, visitor.Visit(b.Body));
			return Expression.Lambda<Func<T, bool>>(body, p);
		}

		internal class SubstExpressionVisitor : System.Linq.Expressions.ExpressionVisitor
		{
			public Dictionary<Expression, Expression> subst = new Dictionary<Expression, Expression>();

			protected override Expression VisitParameter(ParameterExpression node)
			{
				Expression newValue;
				if (subst.TryGetValue(node, out newValue))
				{
					return newValue;
				}
				return node;
			}
		}

		public static Expression<Func<T2, bool>> Convert<T1, T2>(this Expression<Func<T1, bool>> x)
		{
			return Expression.Lambda<Func<T2, bool>>(x.Body, x.Parameters[0]);
		}
	}
} 
