////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using System.Web;


namespace Solid.Features.Security.ServiceLayer
{
    public class AuthenticationApiExtension : IAuthenticationApiExtension
    {
        public void Init(IApiHandler handler)
        {
            handler.OnBeforeProcessRequest += OnBeforeProcessRequest;
        }

        void OnBeforeProcessRequest(object sender, EventArgs e)
        {
/*            var context = HttpContext.Current;

            //TODO : put token in applicationcontext
            GOSecurityProvider.BearerTokenTransport tokenTransport;
            var bearerToken = GOSecurityProvider.GetBearerToken(context, out tokenTransport);

            if (bearerToken == null)
            {
                // OPTIONS Request are always anonymous
				if (context.Request.HttpMethod == "OPTIONS")
                    return;

	            //TODO : remove when security implementation finished    
				if (sender.GetType().Name == "ApplicationSettingsHandler" || sender.GetType().Name == "JsonGOSecurityProviderServiceHandler" || sender.GetType().Name == "JsonSecurityServiceHandler")
                    return;
                
				throw new UnauthorizedAccessException("Unauthorized anonymous access");
            }

            try
            {
                // If unvalid token but allowed anonymous access => should continue
                ClaimsPrincipal principal;
                principal = GOSecurityProvider.ValidateTokenAndAutoRenewTokenIfRequired(bearerToken, tokenTransport);
            }
            catch (Exception ex)
            {             
                throw new UnauthorizedAccessException(ex.Message.Replace("\r\n", "<br/>").Replace("\n", "<br/>").Replace("\"", ""));
            }

            // Store token in current context
            context.Items.Add("UserToken", bearerToken);
*/        }
    }
} 