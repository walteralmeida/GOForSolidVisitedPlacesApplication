////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	// 
	Solid.Web.ViewModels.VisitedPlaceFormViewModel = function(controller, $formContainer, sDataBindRoot, $popupContainer, parentContextId, options) {
		var self = this;
		this.controller = controller;
		this.subscriptions = [];

		if (sDataBindRoot)
			sDataBindRoot = sDataBindRoot + ".";
		else
			sDataBindRoot = "";
			
		this.$formContainer = $formContainer;

		this.contextId = parentContextId ? parentContextId.concat([this.controller.applicationController.getNextContextId()]) : [this.controller.applicationController.getNextContextId()];
		this.popupWidth = options && options.popupWidth;
		this.alternateTitle = options && options.alternateTitle;

		this.DataStore = new Solid.Web.Model.DataStores.DataStore(controller.applicationController.ObjectsDataSet, 'visitedplace');
		// Related Data Stores
		this.DataStoreCountry = new Solid.Web.Model.DataStores.DataStore(new Solid.Web.Model.DataSets.ObjectsDataSet(), 'country');

 
		this.isMemoryOnly = false;

		// Object data
		this.VisitedPlaceObject = ko.observable(new Solid.Web.Model.DataObjects.VisitedPlaceObject());
		this.VisitedPlaceObject().ObjectsDataSet = this.controller.ObjectsDataSet;
		this.CurrentObject = ko.pureComputed(function () { return this.VisitedPlaceObject() }, this);

		
		this.CallAfterSaveRelatedEntity = null;
			// Lookup fields display fields
		this.Country_Name = ko.observable(null);
		this.Country_lookupItem = ko.observable(null); //Storing current selected item for this lookupfield
 
		// Form status data
        this.StatusData = {
			IsUIDirty : ko.observable (false),
            // Control properties         
			IsBusy: ko.observable(false),
            IsEnabled: ko.observable(true),
			IsVisible: ko.observable(true),
            DisplayMode: ko.observable('view'),
            ShowTitle : ko.observable(true),

            PreviousIsEmpty : true,
            IsEmpty : ko.observable(true),
			isPopup : ko.observable(false),
			isValid : ko.observable(true),
			errorSummary : ko.observableArray()
		};

 
		// Integrate custom code if any
		if (Solid.Web.ViewModels.VisitedPlaceFormViewModelCustom !== undefined) {
		    this.customViewModel = new Solid.Web.ViewModels.VisitedPlaceFormViewModelCustom(self);
		};

		this.StatusData.Title = ko.pureComputed(function() { 
			if (self.customViewModel !== undefined && self.customViewModel.Title !== undefined) {
				return self.customViewModel.Title();
			}	
			
			if(!self.VisitedPlaceObject())
				return;
							
			return self.alternateTitle || 'Visited place'; 
		});

		this.runValidation = function() {
			self.VisitedPlaceObject().runValidation();

			var isValid = self.VisitedPlaceObject().StatusData.isValid();
			self.StatusData.errorSummary.removeAll();
			for (var i=0; i < self.VisitedPlaceObject().StatusData.errorSummary().length; i++) {
				self.StatusData.errorSummary.push(self.VisitedPlaceObject().StatusData.errorSummary()[i]);
			}

			// Remove duplicates
			self.StatusData.errorSummary(GO.Array.Distinct(self.StatusData.errorSummary()));

			self.StatusData.isValid(isValid);
		};

		this.resetValidation = function () {
			self.VisitedPlaceObject().resetValidation();
			self.StatusData.isValid(true);
			self.StatusData.errorSummary.removeAll();
		};

		this.onContextIdsStatusChanged = function() {
			self.StatusData.IsUIDirty(self.controller.ObjectsDataSet.isContextIdDirty(self.contextId));			
		};

		this.controller.ObjectsDataSet.AddContextIdsStatusChangeHandler(self.onContextIdsStatusChanged);

		this.subscriptions.push(this.StatusData.DisplayMode.subscribe ( function (newValue) {
			if (newValue === "edit")	{
				self.loadRelatedData();
			}
		}));

		this.StatusData.IsCountryVisible = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCountryVisible !== undefined) {
				return self.customViewModel.IsCountryVisible();
			}
			
			return true;
		});

		this.StatusData.IsCountryReadOnly = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCountryReadOnly !== undefined) {
				return self.customViewModel.IsCountryReadOnly();
			}
			return false;
        });

		this.StatusData.IsDateVisible = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDateVisible !== undefined) {
				return self.customViewModel.IsDateVisible();
			}
			
			return true;
		});

		this.StatusData.IsDateReadOnly = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDateReadOnly !== undefined) {
				return self.customViewModel.IsDateReadOnly();
			}
			return false;
        });

		this.StatusData.IsDescriptionVisible = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDescriptionVisible !== undefined) {
				return self.customViewModel.IsDescriptionVisible();
			}
			
			return true;
		});

		this.StatusData.IsDescriptionReadOnly = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDescriptionReadOnly !== undefined) {
				return self.customViewModel.IsDescriptionReadOnly();
			}
			return false;
        });

		// Form events data
		this.Events = {
            VisitedPlaceLoaded: ko.observable(false),
            VisitedPlaceSaved: ko.observable(false),
            VisitedPlaceDeleted: ko.observable(false),
			VisitedPlaceSetInMemory: ko.observable(false),
            StartEdit: ko.observable(false),
            CancelEdit: ko.observable(false),
            EndEdit: ko.observable(false)
		};
				
		// Form commands data
		this.Commands = {
			CreateNewCommand: function() {
				self.CreateNew(true);
			}, 
			EditCommand: function() {
				self.Edit(true);
			}, 
			DeleteCommand: function() {
				self.Delete(true);
			}, 
			SaveCommand: function() {
				self.Save(true);
			}, 
			CancelEditCommand: function() {
				self.CancelEdit(true);
			} 
      };

		// Form computed command data
      this.Commands.IsDeleteCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDeleteCommandVisible !== undefined) {
				return self.customViewModel.IsDeleteCommandVisible();
			}
			
			return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.IsEmpty()  && self.DataStore &&  self.DataStore.CheckAuthorizationForEntityAndMethod('delete')); 

        });

        this.Commands.IsDeleteCommandEnabled = ko.pureComputed(function () {
			if(self.customViewModel !== undefined && self.customViewModel.IsDeleteCommandEnabled !== undefined) {
				return self.customViewModel.IsDeleteCommandEnabled();
			}
            return (self.StatusData.DisplayMode() == 'view');
        });

      this.Commands.IsEditCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsModifyCommandVisible !== undefined) {
				return self.customViewModel.IsModifyCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.IsEmpty() && self.DataStore && self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });
        this.Commands.IsModifyCommandVisible = this.Commands.IsEditCommandVisible;

        this.Commands.IsEditCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsModifyCommandEnabled !== undefined) {
				return self.customViewModel.IsModifyCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'view');
        });
        this.Commands.IsModifyCommandEnabled = this.Commands.IsEditCommandEnabled;

		this.Commands.IsCancelEditCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCancelEditCommandVisible !== undefined) {
				return self.customViewModel.IsCancelEditCommandVisible();
			}

            return  (self.StatusData.DisplayMode() == 'edit'); 
        });

        this.Commands.IsCancelEditCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCancelEditCommandEnabled !== undefined) {
				return self.customViewModel.IsCancelEditCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'edit');
        });

      this.Commands.IsCreateNewCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCreateNewCommandVisible !== undefined) {
				return self.customViewModel.IsCreateNewCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.isPopup() && self.DataStore && self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });

        this.Commands.IsCreateNewCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCreateNewCommandEnabled !== undefined) {
				return self.customViewModel.IsCreateNewCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.isPopup());
        });

      this.Commands.IsSaveCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsSaveCommandVisible !== undefined) {
				return self.customViewModel.IsSaveCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'edit' && self.DataStore &&  self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });

        this.Commands.IsSaveCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsSaveCommandEnabled !== undefined) {
				return self.customViewModel.IsSaveCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'edit');
            //return (self.StatusData.DisplayMode() == 'edit' && self.StatusData.IsUIDirty() === true);
        });


      this.dateSelectionChanged = function (selectedDate) {
            // Empty method, can be overwritten in custom field if you want to add specific behavior when picking a newDate
        };
		
		// var generatedIncludes = "Country";
		// The server auto-maps the include path if we send the following auto-include-id
		this.include = "auto-include-id-4f98d10b-88f5-430f-8f3e-ce855171c63b";
		// Popups management
        // this.viewLoader = new Solid.Web.Views.viewLoader();
		this.viewLoader = controller.applicationController.viewLoader;

        this.popupCaller = null;
		this.$popupContainer = $popupContainer;
		
        //The close event is emitted by the dialog extension - see html markup
        this.onPopupClosed = function (rebindrequired) {
			self.StatusData.isPopup(false);
		    if (self.StatusData.DisplayMode() === 'edit') {
		        self.CancelEdit(false);
		    }
			if (rebindrequired) {
				self.popupCaller.Rebind();
			}
			self.release();
        };

		this.showAsEditPopup = function(caller, objectToEdit) {
        // Dynamically load the required view
			self.StatusData.IsBusy(true);
            self.viewLoader.loadView( { viewName : "PartialViews/VisitedPlace/VisitedPlaceFormControlPartialView", parentName : ($popupContainer ? $popupContainer.get(0).id : null), successHandler : self.onViewLoaded } ); 
            self.popupCaller = caller;
            if (self.isMemoryOnly) {
                    self.SetVisitedPlaceObject(objectToEdit);
            }
            else {
                    self.LoadVisitedPlace(objectToEdit);
            }
            self.StatusData.isPopup(true);
        };

		this.showAsCreateNewPopup = function(caller, defaultObject) {
             // Dynamically load the required view
            self.StatusData.IsBusy(true);
            self.viewLoader.loadView( { viewName : "PartialViews/VisitedPlace/VisitedPlaceFormControlPartialView", parentName : ($popupContainer ? $popupContainer.get(0).id : null), successHandler : self.onViewLoaded } ); 
            self.popupCaller = caller;

            self.SetVisitedPlaceObject(defaultObject);
			self.controller.ObjectsDataSet.AddOrReplaceObject(self.VisitedPlaceObject());

            self.StatusData.isPopup(true);
            self.Modify();
        };          

		this.closePopup = function (rebindrequired) {
			controller.applicationController.closeCurrentPopup(rebindrequired);
        };

        this.onViewLoaded = function (viewData) {
            self.$popupContainer.html(viewData);
			self.$popupContainer.show();

			ko.applyBindings(self, self.$popupContainer.get(0));
        	self.StatusData.IsBusy(false);

			self.controller.applicationController.centerPopup();
        };

		// Related data popups
		// Related data collections
		this.countryCollection = ko.observableArray();
		this.CountryContextId = this.contextId.concat([this.controller.applicationController.getNextContextId()]);

		this.clearCountryCollection = function() {
			for (var i = 0; i < self.countryCollection.length; i++) {
				if (self.countryCollection[i].Data.IsNew() == true) {
					self.controller.ObjectsDataSet.RemoveObject(self.countryCollection[i]);
				}				
			}
            
            self.countryCollection.removeAll();		
		};

		// Give custom code opportunity to post-process / filter country collection before adding to lookup
		this.includeCountryInLookup = function (country) {
		    if (self.customViewModel !== undefined && self.customViewModel.includeCountryInLookup !== undefined) {
		        return self.customViewModel.includeCountryInLookup(country);
		    }

		    return true;
		}

		this.setCountryCollection = function (data) {
			self.clearCountryCollection();
			            
			var currentSelectedIsInList = false;

			if (data) {
				for (var i=0; i < data.length; i++) {
					if (self.includeCountryInLookup(data[i])) {                		
						self.countryCollection.push(data[i]);
					
						if (self.Country_lookupItem() !== null && self.Country_lookupItem().value !== null && self.Country_lookupItem().value.Data.URI() == data[i].Data.URI()) {
                			currentSelectedIsInList = true;
                		}
					}
				}

				// If the current item is not in 
				if(self.Country_lookupItem() !== null && self.Country_lookupItem().value !== null && !currentSelectedIsInList) {
					self.countryCollection.push(self.Country_lookupItem().value);
					currentSelectedIsInList = true;
				}
				
				// For autocomplete mode, we need to check that the current item is not null before emptying
				if (self.Country_lookupItem() !== null && self.Country_lookupItem().value !== null && currentSelectedIsInList == false) {
					self.Country_lookupItem({ label: "", value: null, selectable: true });
				}
            }
		};

		this.getLookupAddItemLabelTextForCountry = function (){
			return Solid.Web.Messages.addItemLabel;
		}

		this.constructCountryArrayFlatForLookup = function () {
             var result = [], l = self.countryCollection().length;
			 var emptyItem = { label: Solid.Web.Messages.noAvailableDataLabel, value: '', selectable: false}

			 if (l === 0 && !!self.getLookupAddItemLabelTextForCountry()) {
		        result.push(emptyItem);
		        return result;
		    }

            for (var i=0; i < l; i++) {				
				result.push( { label : self.countryCollection()[i].Data.Name(), value : self.countryCollection()[i], selectable: true } );				
            }
 
			result = result.sort(function (left, right) {
				return left.label == right.label ? 0 : left.label < right.label ? -1 : 1;
            });
			return result;
		};
		this.getCountryCollectionData = function (callback) {
			self.isGetCountryCollectionBusy(true);	
					
			var configuration = {};
			configuration.contextId = self.CountryContextId;
			configuration.successHandler = callback || self.onGetCountryCollectionDataSuccess;

			configuration.errorHandler = self.onGetCountryCollectionDataError;

			self.DataStoreCountry.LoadObjectCollection(configuration);
			
		};

		this.getCountryCollectionOneLevel = function (request, response) {
                response($.ui.autocomplete.filter(self.constructCountryArrayFlatForLookup(), request.term));
        };	

		// This method is called when the user selects an item in the lookup field
		// It is used to add custom behavior and then calls the next method onSelectedCountryChanged 
		// which deals with the change internally
		this.onLookupCountryChanged = function (item) {
		    var doContinue = true;
		    if (self.customViewModel !== undefined && self.customViewModel.onLookupCountryChanged !== undefined) {
		        doContinue = self.customViewModel.onLookupCountryChanged(item);
		    }
		    if (doContinue) {
 
				if (item.value !== null) {		
					self.controller.ObjectsDataSet.AddOrReplaceObject(item.value.Clone());
				}

		        self.onSelectedCountryChanged(item.value);
		    }
		};

		// Update when lookup selection changed
		this.onSelectedCountryChanged = function (selectedObject)  {
 
			if (selectedObject == null) {
				self.VisitedPlaceObject().Data.CountryURI(null);
				self.VisitedPlaceObject().Data._country_NewObjectId(null); 
			}
			else if (selectedObject.Data.IsNew() === false) {
				self.VisitedPlaceObject().Data.CountryURI(selectedObject.Data.URI());
			}
			else {
				self.VisitedPlaceObject().Data._country_NewObjectId(selectedObject.Data.InternalObjectId());
			}

		};

	
		// Related data collections loaders
		this.onGetCountryCollectionDataSuccess = function (data) {
			self.setCountryCollection(data);					
			self.isGetCountryCollectionBusy(false);
		};

		this.onGetCountryCollectionDataError = function (error) {
			self.ShowError(error);
			self.isGetCountryCollectionBusy(false);
		};
		
        this.isGetCountryCollectionBusy = ko.observable(false);
		this.loadRelatedData = function () {
			self.getCountryCollectionData();
		};

        this.SetVisitedPlaceObject = function (objectToSet) {
            			
			if (objectToSet && (objectToSet === self.VisitedPlaceObject()))
				return;

			if (objectToSet && objectToSet.contextIds)
			    objectToSet.contextIds.push(self.contextId);
			
			if (self.VisitedPlaceObject().Data.IsNew() === true) {
				// If the old dataobject has not been saved => not used anymore, remove it from dataset
				self.controller.ObjectsDataSet.RemoveObject(self.VisitedPlaceObject());
			}
			
			
			if (objectToSet) {
				var objectFromDataset = self.controller.ObjectsDataSet.GetObject(objectToSet);						
				self.VisitedPlaceObject(objectFromDataset);
                self.StatusData.IsEmpty(false);
            }
            else {
                self.StatusData.IsEmpty(true);
            }
			
			self.onVisitedPlaceObjectChanged();
			self.Events.VisitedPlaceSetInMemory(!self.Events.VisitedPlaceSetInMemory());
						
			if (self.StatusData.isPopup()) 
				ApplicationController.centerPopup();	
				
			if (self.isMemoryOnly && self.isOpenInEditMode) {
				self.isOpenInEditMode = false;
				self.Modify();
			}
		};

		this.onVisitedPlaceObjectChanged = function() {
			
			// Reload all lookup fields related data
			self.rebindLookups();
 			
			self.StatusData.IsUIDirty(self.controller.ObjectsDataSet.isContextIdDirty(self.contextId));			
		};

 
		this.rebindLookups = function() {
			var relatedCountry = self.VisitedPlaceObject().getCountry();
			var relatedCountry_RelatedElementDisplayField = self.VisitedPlaceObject().getCountry() === null ? null : self.VisitedPlaceObject().getCountry().Data.Name();
            if (relatedCountry !== null && relatedCountry_RelatedElementDisplayField !== null) {
            	self.Country_Name(relatedCountry_RelatedElementDisplayField);
				self.Country_lookupItem({ label: relatedCountry_RelatedElementDisplayField, value: relatedCountry, selectable: true});
			} else {
				self.Country_lookupItem({ label: "", value: null});
            	self.Country_Name(null);
			}
		}
		
        this.GetVisitedPlaceObject = function () {
            return self.VisitedPlaceObject();
        };

        this.LoadVisitedPlace = function (objectToLoad) {
			
			self.StatusData.IsBusy(true);
			var configuration = {};			
			configuration.contextId = self.contextId;
			configuration.include = this.include;
			   

			configuration.pks = {
				Id : objectToLoad.Data.Id(), 
				UserProfileUri : objectToLoad.Data.UserProfileUri()
			};          

			configuration.successHandler =  self.OnVisitedPlaceLoaded;
			configuration.errorHandler = self.ShowError;
			self.DataStore.LoadObject(configuration);
        };

        this.Rebind = function() {
			if(self.isMemoryOnly === false) { 
				if(!self.VisitedPlaceObject().Data.IsNew()) {
					self.LoadVisitedPlace(self.VisitedPlaceObject());
				}
				self.loadRelatedData();
			}
        };

        // Define the load completed functions
        this.OnVisitedPlaceLoaded = function (objectLoaded) {
			// if we do next line : delete all related entities
			//self.controller.ObjectsDataSet.cleanContext(self.contextId);	
            self.SetVisitedPlaceObject(objectLoaded);
            self.StatusData.IsBusy(false);
            // the next line is to force notification of change: this way we emulate event handling
            self.Events.VisitedPlaceLoaded(!self.Events.VisitedPlaceLoaded());

			// Centers the popup div in case the content made it shift toward the page's bottom
			self.controller.applicationController.centerPopup();
				
			if (!!self.isOpenInEditMode) {
				self.isOpenInEditMode = false;
				self.Modify();
			}
		};

        this.OnVisitedPlaceSaved = function (objectSaved) {
			GO.log("VisitedPlaceForm", "VisitedPlaceObject saved with success");
			self.SetVisitedPlaceObject(objectSaved);
			self.EndEdit();
			if (self.StatusData.isPopup()) {
				var preventRebind = false;
				if(self.popupCaller.CallAfterSaveRelatedEntity) {
					// The CallAfterSaveRelatedEntity may return true to prevent rebind when closing the popup
					preventRebind = self.popupCaller.CallAfterSaveRelatedEntity(objectSaved);
				}
                self.closePopup(!preventRebind);
			}
 
        };

			
		this.selectCountryLookupField = function(relatedObject) { 
			if(relatedObject._objectType === 'Country') {
				self.Country_Name(relatedObject.Data.Name());
				self.Country_lookupItem({label: relatedObject.Data.Name(), value:relatedObject});
			}
			self.CallAfterSaveRelatedEntity = null;// reset the value
			return true; // Prevent rebind in the PopupCaller (this lookup is displayed only in edit mode)
		};
			


        this.OnVisitedPlaceDeleted = function () {
			GO.log("VisitedPlaceForm", "VisitedPlaceObject deleted with success");
            self.controller.ObjectsDataSet.cleanContext(self.contextId);	
			self.SetVisitedPlaceObject(null);
            self.StatusData.IsBusy(false);
            // the next line is to force notification of change: this way we emulate event handling
            self.Events.VisitedPlaceDeleted(!self.Events.VisitedPlaceDeleted());
 
			self.closePopup(true);
        };


        //////////////////////////////////////////////

		this.Edit = function () { self.Modify(); }

        this.Modify = function () {
			GO.log("VisitedPlaceForm", "Entering modification of VisitedPlaceObject");
	        self.SavedData = new Solid.Web.Model.DataObjects.VisitedPlaceObject();
			self.SavedData.CopyValuesFrom(self.VisitedPlaceObject());

 
            self.StatusData.DisplayMode('edit');
            self.StatusData.PreviousIsEmpty = self.StatusData.IsEmpty();
            self.StatusData.IsEmpty(false);
			
			if (self.StatusData.isPopup())			
				ApplicationController.centerPopup();			
			
			// notify listeners
            self.Events.StartEdit(!self.Events.StartEdit());
        };

        this.CancelEdit = function (isCommandCall) {
			GO.log("VisitedPlaceForm", "CancelEdit of VisitedPlaceObject");


            self.StatusData.DisplayMode('view');

 
			if (self.VisitedPlaceObject().Data.IsNew() === true) {
				// If the old dataobject has not been saved => not used anymore, remove it from dataset
				self.controller.ObjectsDataSet.RemoveObject(self.VisitedPlaceObject());
			}

            self.VisitedPlaceObject().CopyValuesFrom(self.SavedData);
			self.SavedData = null;
            self.StatusData.IsEmpty(self.StatusData.PreviousIsEmpty);

			self.onVisitedPlaceObjectChanged();
            // notify listeners
            self.Events.CancelEdit(!self.Events.CancelEdit());

			// reset contextIds status
			self.controller.ObjectsDataSet.resetContextIdDirty(self.contextId);
			self.resetValidation();

			if (isCommandCall)
			{
 
			}			
            if (self.StatusData.isPopup())
                self.closePopup(false);
        };

        this.EndEdit = function () {
			GO.log("VisitedPlaceForm", "EndEdit on VisitedPlaceObject");

            self.SavedData = null;
			self.StatusData.DisplayMode('view');
            self.StatusData.IsBusy(false);

            // notify listeners
			self.VisitedPlaceObject().StatusData.lastEditedTime(new Date().getTime());
            self.Events.EndEdit(!self.Events.EndEdit());
        };

        this.CreateNew = function () {
			GO.log("VisitedPlaceForm", "Creating new VisitedPlaceObject");
            self.SavedData = new Solid.Web.Model.DataObjects.VisitedPlaceObject();
			self.SavedData.CopyValuesFrom(self.VisitedPlaceObject());
            self.StatusData.PreviousIsEmpty = self.StatusData.IsEmpty();
			self.controller.ObjectsDataSet.cleanContext(self.contextId);
	        var objectToAdd = Solid.Web.Model.DataObjects.VisitedPlaceObjectFactory.createNew(self.controller.ObjectsDataSet, self.contextId);
			self.SetVisitedPlaceObject(objectToAdd);


			self.clearCountryCollection();
			
			self.StatusData.DisplayMode('edit');
            self.StatusData.IsEmpty(false);

  
            // notify listeners
            self.Events.StartEdit(!self.Events.StartEdit());
        };

		this.OnBeforeSave = function() {
			var diff = GO.compareEntities(self.SavedData, self.VisitedPlaceObject());
		    GO.log("VisitedPlaceForm", "Before Saving (diff)", diff);

			return true;
		};

        this.Save = function () {
			var doContinue = true;

			if (self.customViewModel !== undefined && self.customViewModel.onBeforeSave !== undefined) {
				doContinue = self.customViewModel.onBeforeSave();
			}
		
			if (doContinue) {
                doContinue = self.OnBeforeSave();
            }

            if (doContinue) {

				self.runValidation();
            
				if (self.StatusData.isValid() === false)
					return;

				self.StatusData.IsBusy(true);

				if (self.isMemoryOnly) {
					self.OnVisitedPlaceSaved(self.VisitedPlaceObject());
				}
				else {
					var configuration = {};			
					configuration.contextId = self.contextId;
					configuration.include = this.include;
					configuration.objectToSave = self.GetVisitedPlaceObject();
					configuration.successHandler =  self.OnVisitedPlaceSaved;
					configuration.errorHandler = self.ShowError;		
					GO.log("VisitedPlaceForm", "Sending payload to VisitedPlaceObject DataStore");
					self.DataStore.SaveObject(configuration);
				}
			}

			if (self.customViewModel !== undefined && self.customViewModel.onAfterSave !== undefined) {
				self.customViewModel.onAfterSave();
			}
        };

		this.onConfirmDelete = function (confirm) {
            if (confirm === true) {
				var objectToDelete = self.GetVisitedPlaceObject()
				var configuration = {};			
				configuration.contextId = self.contextId;
				configuration.pks = {
					Id : objectToDelete.Data.Id()
			};          

				configuration.successHandler =  self.OnVisitedPlaceDeleted;
				configuration.errorHandler = self.ShowError;

				self.DataStore.DeleteObject(configuration);
            }
            else {
                self.StatusData.IsBusy(false);
            }
		};

        this.Delete = function () {
            self.StatusData.IsBusy(true);
			self.controller.applicationController.showConfirmPopup(self, Solid.Web.Messages.confirmDeleteMessage.replace(/%ENTITY%/g, "VisitedPlace"), Solid.Web.Messages.confirmDeletePopupTitle, self.onConfirmDelete, self.contextId);
        };



		this.release = function() {

			// Remove Custom ViewModel reference
			if (self.customViewModel !== undefined) {
				if(self.customViewModel.release !== undefined) {
				    self.customViewModel.release();
				}
				delete self.customViewModel;
			}

			self.DataStore = null;

			// Related Data Stores 
			delete self.DataStoreCountry.dataSet;
			self.DataStoreCountry = null;
            // Cleaning references to subscriptions & handlers
			self.controller.ObjectsDataSet.RemoveContextIdsStatusChangeHandler(self.onContextIdsStatusChanged);			
			for(var i=0; i < self.subscriptions.length; i++)
			{
				self.subscriptions[i].dispose();
			}
			self.subscriptions = [];
 
			// Lookup fields
			this.Country_Name = ko.observable(null);
			this.Country_lookupItem = ko.observable(null);
			// Cleaning the context if data has been saved already
			if (!self.isMemoryOnly) {
				self.controller.ObjectsDataSet.cleanContext(self.contextId);
			}
			if(self.$formContainer) {
				ko.removeNode(self.$formContainer.get(0));
			}
		};


 
        this.ShowError = function (errorMessage, title) {
			self.isOpenInEditMode = false;
			self.controller.applicationController.showAlertPopup(self, errorMessage, title, null, self.contextId);
            self.StatusData.IsBusy(false);
        };		

		this.getErrorClass = ko.pureComputed(function () {
            if (self.customViewModel !== undefined && self.customViewModel.getErrorClass !== undefined) {
                return self.customViewModel.getErrorClass();
            }
            return "errorText";
        });
		
		this.initialize = function() {
			// Call custom initialize if defined
			if (self.customViewModel !== undefined && self.customViewModel.initialize !== undefined) {
			    self.customViewModel.initialize();
			}
		};

		self.initialize();
	
		// Apply bindings
		if (self.$formContainer) {
			ko.applyBindings(self, self.$formContainer.get(0));
    		self.StatusData.IsBusy(false);
		}
	};		

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/ViewModels/VisitedPlace/VisitedPlaceFormViewModel.js");
} ());