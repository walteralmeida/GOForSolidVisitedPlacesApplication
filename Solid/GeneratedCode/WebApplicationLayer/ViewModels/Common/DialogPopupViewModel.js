////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
(function () {
	// 
    Solid.Web.ViewModels.DialogPopupViewModel = function (controller, $formContainer, sDataBindRoot, $popupContainer, parentContextId) {
		var self = this;
		this.controller = controller;

		if (sDataBindRoot)
			sDataBindRoot = sDataBindRoot + ".";
		else
			sDataBindRoot = "";
			
		this.$formContainer = $formContainer;

		this.contextId = parentContextId ? parentContextId.concat([this.controller.applicationController.getNextContextId()]) : [this.controller.applicationController.getNextContextId()];

        // Popups management
		this.viewLoader = new Solid.Web.Views.viewLoader();

		this.$popupContainer = $popupContainer;

		this.StatusData = {
		    IsBusy: ko.observable(false),
		    isPopup: ko.observable(false),
		    isValid: ko.observable(true)
		};

		this.onPopupClosed = function (rebindrequired) {
			if (rebindrequired === true)    
				self.popupCaller.Rebind();
		};

		this.Rebind = function () {
		    if (self.isMemoryOnly === false) {
		        self.LoadAttribute(self.AttributeObject);
		    }
		};

		this.onViewLoaded = function (viewData) {
		    self.$popupContainer.html(viewData);
		    self.$popupContainer.show();

		    switch (self.type) {
		        case 'alert':
		            self.clickOk = function() {
		                if (self.callback) self.callback(true);
		                self.controller.applicationController.closeCurrentPopup(false);
		            };
		            break;
		        case 'confirm':
		            self.clickOk = function () {
		                if (self.callback) self.callback(true);
		                self.controller.applicationController.closeCurrentPopup(false);
		            };
		            self.clickCancel = function () {
		                if (self.callback) self.callback(false);
		                self.controller.applicationController.closeCurrentPopup(false);
		            };
		            break;
		        case 'prompt':
		            self.clickOk = function () {
		                if (self.callback) self.callback(self.valuePrompt());
		                self.controller.applicationController.closeCurrentPopup(false);
		            };
		            self.clickCancel = function () {
		                if (self.callback) self.callback(false);
		                self.controller.applicationController.closeCurrentPopup(false);
		            };
		            break;
		        default:
		            //Unknowned type
		            break;
		    };
					    
		    ko.applyBindings(self, self.$popupContainer.get(0));
		    self.controller.applicationController.centerPopup();
		    self.StatusData.IsBusy(false);
		};

		this.showAsDialog = function (caller, type, message, valuePrompt, title, callback) {
		    self.StatusData.IsBusy(true);

		    self.popupCaller = caller;
		    self.type = type;
		    self.message = ko.observable(message.replace(/\n/g, '<br />'));
		    self.valuePrompt = ko.observable(valuePrompt);
		    self.title = ko.observable(title);
		    self.callback = callback;
		    switch (self.type) {
		        case 'alert':
		            self.viewLoader.loadView({ viewName: "PartialViews/Common/AlertPopupPartialView", parentName: ($popupContainer ? $popupContainer.get(0).id : null), successHandler: self.onViewLoaded });
		            break;
		        case 'confirm':
		            self.viewLoader.loadView({ viewName: "PartialViews/Common/ConfirmPopupPartialView", parentName: ($popupContainer ? $popupContainer.get(0).id : null), successHandler: self.onViewLoaded });
		            break;
		        case 'prompt':
		            self.viewLoader.loadView({ viewName: "PartialViews/Common/PromptPopupPartialView", parentName: ($popupContainer ? $popupContainer.get(0).id : null), successHandler: self.onViewLoaded });
		            break;
		        default:
		            //Unknowned type
		            break;
		    };

		    self.StatusData.isPopup(true);
		}

		// Apply bindings
		if (self.$formContainer) {
			ko.applyBindings(self, self.$formContainer.get(0));
    		self.StatusData.IsBusy(false);
		}
    };
} ());
