////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	// 
	Solid.Web.ViewModels.PlaceToLocationFormViewModel = function(controller, $formContainer, sDataBindRoot, $popupContainer, parentContextId, options) {
		var self = this;
		this.controller = controller;
		this.subscriptions = [];

		if (sDataBindRoot)
			sDataBindRoot = sDataBindRoot + ".";
		else
			sDataBindRoot = "";
			
		this.$formContainer = $formContainer;

		this.contextId = parentContextId ? parentContextId.concat([this.controller.applicationController.getNextContextId()]) : [this.controller.applicationController.getNextContextId()];
		this.popupWidth = options && options.popupWidth;
		this.alternateTitle = options && options.alternateTitle;

		this.DataStore = new Solid.Web.Model.DataStores.DataStore(controller.applicationController.ObjectsDataSet, 'placetolocation');
		// Related Data Stores
		this.DataStoreLocation = new Solid.Web.Model.DataStores.DataStore(new Solid.Web.Model.DataSets.ObjectsDataSet(), 'location');

 
		this.isMemoryOnly = false;

		// Object data
		this.PlaceToLocationObject = ko.observable(new Solid.Web.Model.DataObjects.PlaceToLocationObject());
		this.PlaceToLocationObject().ObjectsDataSet = this.controller.ObjectsDataSet;
		this.CurrentObject = ko.pureComputed(function () { return this.PlaceToLocationObject() }, this);

		
		this.CallAfterSaveRelatedEntity = null;
			// Lookup fields display fields
		this.Location_Name = ko.observable(null);
		this.Location_lookupItem = ko.observable(null); //Storing current selected item for this lookupfield
 
		// Form status data
        this.StatusData = {
			IsUIDirty : ko.observable (false),
            // Control properties         
			IsBusy: ko.observable(false),
            IsEnabled: ko.observable(true),
			IsVisible: ko.observable(true),
            DisplayMode: ko.observable('view'),
            ShowTitle : ko.observable(true),

            PreviousIsEmpty : true,
            IsEmpty : ko.observable(true),
			isPopup : ko.observable(false),
			isValid : ko.observable(true),
			errorSummary : ko.observableArray()
		};

 
		// Integrate custom code if any
		if (Solid.Web.ViewModels.PlaceToLocationFormViewModelCustom !== undefined) {
		    this.customViewModel = new Solid.Web.ViewModels.PlaceToLocationFormViewModelCustom(self);
		};

		this.StatusData.Title = ko.pureComputed(function() { 
			if (self.customViewModel !== undefined && self.customViewModel.Title !== undefined) {
				return self.customViewModel.Title();
			}	
			
			if(!self.PlaceToLocationObject())
				return;
							
			return self.alternateTitle || 'Place To Location Details'; 
		});

		this.runValidation = function() {
			self.PlaceToLocationObject().runValidation();

			var isValid = self.PlaceToLocationObject().StatusData.isValid();
			self.StatusData.errorSummary.removeAll();
			for (var i=0; i < self.PlaceToLocationObject().StatusData.errorSummary().length; i++) {
				self.StatusData.errorSummary.push(self.PlaceToLocationObject().StatusData.errorSummary()[i]);
			}

			// Remove duplicates
			self.StatusData.errorSummary(GO.Array.Distinct(self.StatusData.errorSummary()));

			self.StatusData.isValid(isValid);
		};

		this.resetValidation = function () {
			self.PlaceToLocationObject().resetValidation();
			self.StatusData.isValid(true);
			self.StatusData.errorSummary.removeAll();
		};

		this.onContextIdsStatusChanged = function() {
			self.StatusData.IsUIDirty(self.controller.ObjectsDataSet.isContextIdDirty(self.contextId));			
		};

		this.controller.ObjectsDataSet.AddContextIdsStatusChangeHandler(self.onContextIdsStatusChanged);

		this.subscriptions.push(this.StatusData.DisplayMode.subscribe ( function (newValue) {
			if (newValue === "edit")	{
				self.loadRelatedData();
			}
		}));

		this.StatusData.IsLocationVisible = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsLocationVisible !== undefined) {
				return self.customViewModel.IsLocationVisible();
			}
			
			return true;
		});

		this.StatusData.IsLocationReadOnly = ko.pureComputed( function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsLocationReadOnly !== undefined) {
				return self.customViewModel.IsLocationReadOnly();
			}
			return false;
        });

		// Form events data
		this.Events = {
            PlaceToLocationLoaded: ko.observable(false),
            PlaceToLocationSaved: ko.observable(false),
            PlaceToLocationDeleted: ko.observable(false),
			PlaceToLocationSetInMemory: ko.observable(false),
            StartEdit: ko.observable(false),
            CancelEdit: ko.observable(false),
            EndEdit: ko.observable(false)
		};
				
		// Form commands data
		this.Commands = {
			CreateNewCommand: function() {
				self.CreateNew(true);
			}, 
			EditCommand: function() {
				self.Edit(true);
			}, 
			DeleteCommand: function() {
				self.Delete(true);
			}, 
			SaveCommand: function() {
				self.Save(true);
			}, 
			CancelEditCommand: function() {
				self.CancelEdit(true);
			} 
      };

		// Form computed command data
      this.Commands.IsCreateNewCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCreateNewCommandVisible !== undefined) {
				return self.customViewModel.IsCreateNewCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.isPopup() && self.DataStore && self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });

        this.Commands.IsCreateNewCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCreateNewCommandEnabled !== undefined) {
				return self.customViewModel.IsCreateNewCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.isPopup());
        });

      this.Commands.IsEditCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsModifyCommandVisible !== undefined) {
				return self.customViewModel.IsModifyCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.IsEmpty() && self.DataStore && self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });
        this.Commands.IsModifyCommandVisible = this.Commands.IsEditCommandVisible;

        this.Commands.IsEditCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsModifyCommandEnabled !== undefined) {
				return self.customViewModel.IsModifyCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'view');
        });
        this.Commands.IsModifyCommandEnabled = this.Commands.IsEditCommandEnabled;

		this.Commands.IsCancelEditCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCancelEditCommandVisible !== undefined) {
				return self.customViewModel.IsCancelEditCommandVisible();
			}

            return  (self.StatusData.DisplayMode() == 'edit'); 
        });

        this.Commands.IsCancelEditCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsCancelEditCommandEnabled !== undefined) {
				return self.customViewModel.IsCancelEditCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'edit');
        });

      this.Commands.IsDeleteCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsDeleteCommandVisible !== undefined) {
				return self.customViewModel.IsDeleteCommandVisible();
			}
			
			return (self.StatusData.DisplayMode() == 'view' && !self.StatusData.IsEmpty()  && self.DataStore &&  self.DataStore.CheckAuthorizationForEntityAndMethod('delete')); 

        });

        this.Commands.IsDeleteCommandEnabled = ko.pureComputed(function () {
			if(self.customViewModel !== undefined && self.customViewModel.IsDeleteCommandEnabled !== undefined) {
				return self.customViewModel.IsDeleteCommandEnabled();
			}
            return (self.StatusData.DisplayMode() == 'view');
        });

      this.Commands.IsSaveCommandVisible = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsSaveCommandVisible !== undefined) {
				return self.customViewModel.IsSaveCommandVisible();
			}

            return (self.StatusData.DisplayMode() == 'edit' && self.DataStore &&  self.DataStore.CheckAuthorizationForEntityAndMethod('save')); 
        });

        this.Commands.IsSaveCommandEnabled = ko.pureComputed(function () {
			if (self.customViewModel !== undefined && self.customViewModel.IsSaveCommandEnabled !== undefined) {
				return self.customViewModel.IsSaveCommandEnabled();
			}

            return (self.StatusData.DisplayMode() == 'edit');
            //return (self.StatusData.DisplayMode() == 'edit' && self.StatusData.IsUIDirty() === true);
        });


		// var generatedIncludes = "Location";
		// The server auto-maps the include path if we send the following auto-include-id
		this.include = "auto-include-id-a6613eb3-dd9e-4182-9122-9e96193680b8";
		// Popups management
        // this.viewLoader = new Solid.Web.Views.viewLoader();
		this.viewLoader = controller.applicationController.viewLoader;

        this.popupCaller = null;
		this.$popupContainer = $popupContainer;
		
        //The close event is emitted by the dialog extension - see html markup
        this.onPopupClosed = function (rebindrequired) {
			self.StatusData.isPopup(false);
		    if (self.StatusData.DisplayMode() === 'edit') {
		        self.CancelEdit(false);
		    }
			if (rebindrequired) {
				self.popupCaller.Rebind();
			}
			self.release();
        };

		this.showAsEditPopup = function(caller, objectToEdit) {
        // Dynamically load the required view
			self.StatusData.IsBusy(true);
            self.viewLoader.loadView( { viewName : "PartialViews/PlaceToLocation/PlaceToLocationFormControlPartialView", parentName : ($popupContainer ? $popupContainer.get(0).id : null), successHandler : self.onViewLoaded } ); 
            self.popupCaller = caller;
            if (self.isMemoryOnly) {
                    self.SetPlaceToLocationObject(objectToEdit);
            }
            else {
                    self.LoadPlaceToLocation(objectToEdit);
            }
            self.StatusData.isPopup(true);
        };

		this.showAsCreateNewPopup = function(caller, defaultObject) {
             // Dynamically load the required view
            self.StatusData.IsBusy(true);
            self.viewLoader.loadView( { viewName : "PartialViews/PlaceToLocation/PlaceToLocationFormControlPartialView", parentName : ($popupContainer ? $popupContainer.get(0).id : null), successHandler : self.onViewLoaded } ); 
            self.popupCaller = caller;

            self.SetPlaceToLocationObject(defaultObject);
			self.controller.ObjectsDataSet.AddOrReplaceObject(self.PlaceToLocationObject());

            self.StatusData.isPopup(true);
            self.Modify();
        };          

		this.closePopup = function (rebindrequired) {
			controller.applicationController.closeCurrentPopup(rebindrequired);
        };

        this.onViewLoaded = function (viewData) {
            self.$popupContainer.html(viewData);
			self.$popupContainer.show();

			ko.applyBindings(self, self.$popupContainer.get(0));
        	self.StatusData.IsBusy(false);

			self.controller.applicationController.centerPopup();
        };

		// Related data popups
		this.isShowEditLocationPopupVisible = function () {
			return true;
		};

		this.isShowEditLocationPopupEnabled = function () {
			return self.PlaceToLocationObject().getLocation() != null;
		};

		this.showEditLocationPopup = function () {
			var objectToShow = self.PlaceToLocationObject().getLocation();
			// Preventing errors due to visualization of informations of an empty element.
			if (!objectToShow)
				return;
			if (objectToShow != null) {
				objectToShow.ObjectsDataSet = self.controller.ObjectsDataSet;
			}

			var isMemoryOnly = objectToShow != null && objectToShow.Data.IsNew();

			// Callback called when popup is closed
			self.CallAfterSaveRelatedEntity = self.selectLocationLookupField; 

			self.controller.applicationController.showEditPopup("LocationForm", self, objectToShow, isMemoryOnly, null, "70%");
			GO.log("PlaceToLocationForm", "Opening lookup popup on LocationForm");
		};

		this.Commands.isShowCreateNewLocationPopupVisible = function () {
			if (self.customViewModel !== undefined && self.customViewModel.isShowCreateNewLocationPopupVisible !== undefined) {
				return self.customViewModel.isShowCreateNewLocationPopupVisible();
			}

			return true;
		};

		this.Commands.isShowCreateNewLocationPopupEnabled = function () {
			if (self.customViewModel !== undefined && self.customViewModel.isShowCreateNewLocationPopupEnabled !== undefined) {
				return self.customViewModel.isShowCreateNewLocationPopupEnabled();
			}
			return true;
		};

		this.Commands.showCreateNewLocationPopup = function () {

 
            var newObject = Solid.Web.Model.DataObjects.LocationObjectFactory.createNew(self.controller.ObjectsDataSet, self.contextId);

			newObject.DirtyHandlerOn = false;
            newObject.DirtyHandlerOn = true;
				
			// Callback called when popup is closed
			self.CallAfterSaveRelatedEntity = self.selectLocationLookupField; 

			var isPKSideToFKSidePopup = false;
			var isMemoryOnly = isPKSideToFKSidePopup ? true : self.isMemoryOnlyCollection;
            self.controller.applicationController.showCreateNewPopup("LocationForm", self, newObject, isMemoryOnly, self.contextId, "70%");
        };
		// Related data collections
		this.Location_lookupMethod = null; //set on loadData
		this.Location_lookupThreshold = 100; // Threshold for automatic switch
		this.Location_lookupMinLength = ko.observable(0);
		this.locationCollection = ko.observableArray();
		this.LocationContextId = this.contextId.concat([this.controller.applicationController.getNextContextId()]);

		this.clearLocationCollection = function() {
			for (var i = 0; i < self.locationCollection.length; i++) {
				if (self.locationCollection[i].Data.IsNew() == true) {
					self.controller.ObjectsDataSet.RemoveObject(self.locationCollection[i]);
				}				
			}
            
            self.locationCollection.removeAll();		
		};

		// Give custom code opportunity to post-process / filter location collection before adding to lookup
		this.includeLocationInLookup = function (location) {
		    if (self.customViewModel !== undefined && self.customViewModel.includeLocationInLookup !== undefined) {
		        return self.customViewModel.includeLocationInLookup(location);
		    }

		    return true;
		}

		this.setLocationCollection = function (data) {
			self.clearLocationCollection();
			            
			var currentSelectedIsInList = false;

			if (data) {
				for (var i=0; i < data.length; i++) {
					if (self.includeLocationInLookup(data[i])) {                		
						self.locationCollection.push(data[i]);
					
						if (self.Location_lookupItem() !== null && self.Location_lookupItem().value !== null && self.Location_lookupItem().value.Data.URI() == data[i].Data.URI()) {
                			currentSelectedIsInList = true;
                		}
					}
				}

				// If the current item is not in 
				if(self.Location_lookupItem() !== null && self.Location_lookupItem().value !== null && !currentSelectedIsInList) {
					self.locationCollection.push(self.Location_lookupItem().value);
					currentSelectedIsInList = true;
				}
				
				// For autocomplete mode, we need to check that the current item is not null before emptying
				if (self.Location_lookupItem() !== null && self.Location_lookupItem().value !== null && currentSelectedIsInList == false) {
					self.Location_lookupItem({ label: "", value: null, selectable: true });
				}
            }
		};

		this.getLookupAddItemLabelTextForLocation = function (){
			return Solid.Web.Messages.addItemLabel;
		}

		this.constructLocationArrayFlatForLookup = function () {
             var result = [], l = self.locationCollection().length;
			 var emptyItem = { label: Solid.Web.Messages.noAvailableDataLabel + '. ' + self.getLookupAddItemLabelTextForLocation(), value: '', selectable: true, command: 'create'}

			 if (l === 0 && !!self.getLookupAddItemLabelTextForLocation()) {
		        result.push(emptyItem);
		        return result;
		    }

            for (var i=0; i < l; i++) {				
				result.push( { label : self.locationCollection()[i].Data.Name(), value : self.locationCollection()[i], selectable: true } );				
            }
			if (!!self.getLookupAddItemLabelTextForLocation()) {
				emptyItem.label = self.getLookupAddItemLabelTextForLocation();
				result.push(emptyItem);
			}
			return result;
		};
		this.getLocationCollectionData = function (callback) {
			self.isGetLocationCollectionBusy(true);	
					
			var configuration = {};
			configuration.contextId = self.LocationContextId;
			configuration.successHandler = callback || self.onGetLocationCollectionDataSuccess;

			configuration.errorHandler = self.onGetLocationCollectionDataError;

			self.DataStoreLocation.LoadObjectCollection(configuration);
			
		};

		this.getLocationCollectionOneLevel = function (request, response) {
                response($.ui.autocomplete.filter(self.constructLocationArrayFlatForLookup(), request.term));
        };	
		this.getFilteredLocationCollectionData = function (searchValue, callback) {
					
			var configuration = {};
			configuration.contextId = self.LocationContextId;
			configuration.filterPredicate = 'Name.StartsWith("' + searchValue + '")';
			configuration.pageSize = 50;
			configuration.pageNumber = 1;
			configuration.successHandler = callback;

			configuration.errorHandler = self.onGetLocationCollectionDataError;

			self.DataStoreLocation.LoadObjectCollection(configuration);
			
		};

		this.getLocationAutoComplete = function (request, response) {
            self.getFilteredLocationCollectionData(request.term, function (data) {
                self.setLocationCollection(data);
                response(self.constructLocationArrayFlatForLookup());
            });
        };


		// This method is called when the user selects an item in the lookup field
		// It is used to add custom behavior and then calls the next method onSelectedLocationChanged 
		// which deals with the change internally
		this.onLookupLocationChanged = function (item) {
		    var doContinue = true;
		    if (self.customViewModel !== undefined && self.customViewModel.onLookupLocationChanged !== undefined) {
		        doContinue = self.customViewModel.onLookupLocationChanged(item);
		    }
		    if (doContinue) {
				if (item.command === 'create') {
		            item.label = '';
		            self.Commands.showCreateNewLocationPopup();
		            return;
		        } 
 
				if (item.value !== null) {		
					self.controller.ObjectsDataSet.AddOrReplaceObject(item.value.Clone());
				}

		        self.onSelectedLocationChanged(item.value);
		    }
		};

		// Update when lookup selection changed
		this.onSelectedLocationChanged = function (selectedObject)  {
 
			if (selectedObject == null) {
				self.PlaceToLocationObject().Data.LocationURI(null);
				self.PlaceToLocationObject().Data._location_NewObjectId(null); 
			}
			else if (selectedObject.Data.IsNew() === false) {
				self.PlaceToLocationObject().Data.LocationURI(selectedObject.Data.URI());
			}
			else {
				self.PlaceToLocationObject().Data._location_NewObjectId(selectedObject.Data.InternalObjectId());
			}

		};

		//Specific functions for Automatic load
		this.countLocationElements = function (callback) {
			var configuration = {};
			configuration.contextId = self.LocationContextId;
			
			configuration.successHandler = callback;
			configuration.errorHandler = function() { callback(0); };

			self.DataStoreLocation.CountObjects(configuration);
		};

		this.getLocationForLookupAutomatic = function(request, response)  {
			self.Location_lookupMethod && self.Location_lookupMethod(request, response);
		};

		this.selectiveLoadDataForLocation = function() {
			self.countLocationElements(function (data) {
                if (data > self.Location_lookupThreshold) {
                    self.Location_lookupMethod = self.getLocationAutoComplete;
                    self.Location_lookupMinLength(2);
                } else {                   
                    self.getLocationCollectionData();
                    self.Location_lookupMethod = self.getLocationCollectionOneLevel;
                    self.Location_lookupMinLength(0);
                }
            });
		};


	
		// Related data collections loaders
		this.onGetLocationCollectionDataSuccess = function (data) {
			self.setLocationCollection(data);					
			self.isGetLocationCollectionBusy(false);
		};

		this.onGetLocationCollectionDataError = function (error) {
			self.ShowError(error);
			self.isGetLocationCollectionBusy(false);
		};
		
        this.isGetLocationCollectionBusy = ko.observable(false);
		this.loadRelatedData = function () {
			self.selectiveLoadDataForLocation();
		};

        this.SetPlaceToLocationObject = function (objectToSet) {
            			
			if (objectToSet && (objectToSet === self.PlaceToLocationObject()))
				return;

			if (objectToSet && objectToSet.contextIds)
			    objectToSet.contextIds.push(self.contextId);
			
			if (self.PlaceToLocationObject().Data.IsNew() === true) {
				// If the old dataobject has not been saved => not used anymore, remove it from dataset
				self.controller.ObjectsDataSet.RemoveObject(self.PlaceToLocationObject());
			}
			
			
			if (objectToSet) {
				var objectFromDataset = self.controller.ObjectsDataSet.GetObject(objectToSet);						
				self.PlaceToLocationObject(objectFromDataset);
                self.StatusData.IsEmpty(false);
            }
            else {
                self.StatusData.IsEmpty(true);
            }
			
			self.onPlaceToLocationObjectChanged();
			self.Events.PlaceToLocationSetInMemory(!self.Events.PlaceToLocationSetInMemory());
						
			if (self.StatusData.isPopup()) 
				ApplicationController.centerPopup();	
				
			if (self.isMemoryOnly && self.isOpenInEditMode) {
				self.isOpenInEditMode = false;
				self.Modify();
			}
		};

		this.onPlaceToLocationObjectChanged = function() {
			
			// Reload all lookup fields related data
			self.rebindLookups();
 			
			self.StatusData.IsUIDirty(self.controller.ObjectsDataSet.isContextIdDirty(self.contextId));			
		};

 
		this.rebindLookups = function() {
			var relatedLocation = self.PlaceToLocationObject().getLocation();
			var relatedLocation_RelatedElementDisplayField = self.PlaceToLocationObject().getLocation() === null ? null : self.PlaceToLocationObject().getLocation().Data.Name();
            if (relatedLocation !== null && relatedLocation_RelatedElementDisplayField !== null) {
            	self.Location_Name(relatedLocation_RelatedElementDisplayField);
				self.Location_lookupItem({ label: relatedLocation_RelatedElementDisplayField, value: relatedLocation, selectable: true});
			} else {
				self.Location_lookupItem({ label: "", value: null});
            	self.Location_Name(null);
			}
		}
		
        this.GetPlaceToLocationObject = function () {
            return self.PlaceToLocationObject();
        };

        this.LoadPlaceToLocation = function (objectToLoad) {
			
			self.StatusData.IsBusy(true);
			var configuration = {};			
			configuration.contextId = self.contextId;
			configuration.include = this.include;
			   

			configuration.pks = {
				LocationURI : objectToLoad.Data.LocationURI(), 
				PlaceURI : objectToLoad.Data.PlaceURI()
			};          

			configuration.successHandler =  self.OnPlaceToLocationLoaded;
			configuration.errorHandler = self.ShowError;
			self.DataStore.LoadObject(configuration);
        };

        this.Rebind = function() {
			if(self.isMemoryOnly === false) { 
				if(!self.PlaceToLocationObject().Data.IsNew()) {
					self.LoadPlaceToLocation(self.PlaceToLocationObject());
				}
				self.loadRelatedData();
			}
        };

        // Define the load completed functions
        this.OnPlaceToLocationLoaded = function (objectLoaded) {
			// if we do next line : delete all related entities
			//self.controller.ObjectsDataSet.cleanContext(self.contextId);	
            self.SetPlaceToLocationObject(objectLoaded);
            self.StatusData.IsBusy(false);
            // the next line is to force notification of change: this way we emulate event handling
            self.Events.PlaceToLocationLoaded(!self.Events.PlaceToLocationLoaded());

			// Centers the popup div in case the content made it shift toward the page's bottom
			self.controller.applicationController.centerPopup();
				
			if (!!self.isOpenInEditMode) {
				self.isOpenInEditMode = false;
				self.Modify();
			}
		};

        this.OnPlaceToLocationSaved = function (objectSaved) {
			GO.log("PlaceToLocationForm", "PlaceToLocationObject saved with success");
			self.SetPlaceToLocationObject(objectSaved);
			self.EndEdit();
			if (self.StatusData.isPopup()) {
				var preventRebind = false;
				if(self.popupCaller.CallAfterSaveRelatedEntity) {
					// The CallAfterSaveRelatedEntity may return true to prevent rebind when closing the popup
					preventRebind = self.popupCaller.CallAfterSaveRelatedEntity(objectSaved);
				}
                self.closePopup(!preventRebind);
			}
 
        };

			
		this.selectLocationLookupField = function(relatedObject) { 
			if(relatedObject._objectType === 'Location') {
				self.Location_Name(relatedObject.Data.Name());
				self.Location_lookupItem({label: relatedObject.Data.Name(), value:relatedObject});
			}
			self.CallAfterSaveRelatedEntity = null;// reset the value
			return true; // Prevent rebind in the PopupCaller (this lookup is displayed only in edit mode)
		};
			


        this.OnPlaceToLocationDeleted = function () {
			GO.log("PlaceToLocationForm", "PlaceToLocationObject deleted with success");
            self.controller.ObjectsDataSet.cleanContext(self.contextId);	
			self.SetPlaceToLocationObject(null);
            self.StatusData.IsBusy(false);
            // the next line is to force notification of change: this way we emulate event handling
            self.Events.PlaceToLocationDeleted(!self.Events.PlaceToLocationDeleted());
 
			self.closePopup(true);
        };


        //////////////////////////////////////////////

		this.Edit = function () { self.Modify(); }

        this.Modify = function () {
			GO.log("PlaceToLocationForm", "Entering modification of PlaceToLocationObject");
	        self.SavedData = new Solid.Web.Model.DataObjects.PlaceToLocationObject();
			self.SavedData.CopyValuesFrom(self.PlaceToLocationObject());

 
            self.StatusData.DisplayMode('edit');
            self.StatusData.PreviousIsEmpty = self.StatusData.IsEmpty();
            self.StatusData.IsEmpty(false);
			
			if (self.StatusData.isPopup())			
				ApplicationController.centerPopup();			
			
			// notify listeners
            self.Events.StartEdit(!self.Events.StartEdit());
        };

        this.CancelEdit = function (isCommandCall) {
			GO.log("PlaceToLocationForm", "CancelEdit of PlaceToLocationObject");


            self.StatusData.DisplayMode('view');

 
			if (self.PlaceToLocationObject().Data.IsNew() === true) {
				// If the old dataobject has not been saved => not used anymore, remove it from dataset
				self.controller.ObjectsDataSet.RemoveObject(self.PlaceToLocationObject());
			}

            self.PlaceToLocationObject().CopyValuesFrom(self.SavedData);
			self.SavedData = null;
            self.StatusData.IsEmpty(self.StatusData.PreviousIsEmpty);

			self.onPlaceToLocationObjectChanged();
            // notify listeners
            self.Events.CancelEdit(!self.Events.CancelEdit());

			// reset contextIds status
			self.controller.ObjectsDataSet.resetContextIdDirty(self.contextId);
			self.resetValidation();

			if (isCommandCall)
			{
 
			}			
            if (self.StatusData.isPopup())
                self.closePopup(false);
        };

        this.EndEdit = function () {
			GO.log("PlaceToLocationForm", "EndEdit on PlaceToLocationObject");

            self.SavedData = null;
			self.StatusData.DisplayMode('view');
            self.StatusData.IsBusy(false);

            // notify listeners
			self.PlaceToLocationObject().StatusData.lastEditedTime(new Date().getTime());
            self.Events.EndEdit(!self.Events.EndEdit());
        };

        this.CreateNew = function () {
			GO.log("PlaceToLocationForm", "Creating new PlaceToLocationObject");
            self.SavedData = new Solid.Web.Model.DataObjects.PlaceToLocationObject();
			self.SavedData.CopyValuesFrom(self.PlaceToLocationObject());
            self.StatusData.PreviousIsEmpty = self.StatusData.IsEmpty();
			self.controller.ObjectsDataSet.cleanContext(self.contextId);
	        var objectToAdd = Solid.Web.Model.DataObjects.PlaceToLocationObjectFactory.createNew(self.controller.ObjectsDataSet, self.contextId);
			self.SetPlaceToLocationObject(objectToAdd);


			self.clearLocationCollection();
			
			self.StatusData.DisplayMode('edit');
            self.StatusData.IsEmpty(false);

  
            // notify listeners
            self.Events.StartEdit(!self.Events.StartEdit());
        };

		this.OnBeforeSave = function() {
			var diff = GO.compareEntities(self.SavedData, self.PlaceToLocationObject());
		    GO.log("PlaceToLocationForm", "Before Saving (diff)", diff);

			return true;
		};

        this.Save = function () {
			var doContinue = true;

			if (self.customViewModel !== undefined && self.customViewModel.onBeforeSave !== undefined) {
				doContinue = self.customViewModel.onBeforeSave();
			}
		
			if (doContinue) {
                doContinue = self.OnBeforeSave();
            }

            if (doContinue) {

				self.runValidation();
            
				if (self.StatusData.isValid() === false)
					return;

				self.StatusData.IsBusy(true);

				if (self.isMemoryOnly) {
					self.OnPlaceToLocationSaved(self.PlaceToLocationObject());
				}
				else {
					var configuration = {};			
					configuration.contextId = self.contextId;
					configuration.include = this.include;
					configuration.objectToSave = self.GetPlaceToLocationObject();
					configuration.successHandler =  self.OnPlaceToLocationSaved;
					configuration.errorHandler = self.ShowError;		
					GO.log("PlaceToLocationForm", "Sending payload to PlaceToLocationObject DataStore");
					self.DataStore.SaveObject(configuration);
				}
			}

			if (self.customViewModel !== undefined && self.customViewModel.onAfterSave !== undefined) {
				self.customViewModel.onAfterSave();
			}
        };

		this.onConfirmDelete = function (confirm) {
            if (confirm === true) {
				var objectToDelete = self.GetPlaceToLocationObject()
				var configuration = {};			
				configuration.contextId = self.contextId;
				configuration.pks = {
					LocationURI : objectToDelete.Data.LocationURI(), 
					PlaceURI : objectToDelete.Data.PlaceURI()
			};          

				configuration.successHandler =  self.OnPlaceToLocationDeleted;
				configuration.errorHandler = self.ShowError;

				self.DataStore.DeleteObject(configuration);
            }
            else {
                self.StatusData.IsBusy(false);
            }
		};

        this.Delete = function () {
            self.StatusData.IsBusy(true);
			self.controller.applicationController.showConfirmPopup(self, Solid.Web.Messages.confirmDeleteMessage.replace(/%ENTITY%/g, "PlaceToLocation"), Solid.Web.Messages.confirmDeletePopupTitle, self.onConfirmDelete, self.contextId);
        };



		this.release = function() {

			// Remove Custom ViewModel reference
			if (self.customViewModel !== undefined) {
				if(self.customViewModel.release !== undefined) {
				    self.customViewModel.release();
				}
				delete self.customViewModel;
			}

			self.DataStore = null;

			// Related Data Stores 
			delete self.DataStoreLocation.dataSet;
			self.DataStoreLocation = null;
            // Cleaning references to subscriptions & handlers
			self.controller.ObjectsDataSet.RemoveContextIdsStatusChangeHandler(self.onContextIdsStatusChanged);			
			for(var i=0; i < self.subscriptions.length; i++)
			{
				self.subscriptions[i].dispose();
			}
			self.subscriptions = [];
 
			// Lookup fields
			this.Location_Name = ko.observable(null);
			this.Location_lookupItem = ko.observable(null);
			// Cleaning the context if data has been saved already
			if (!self.isMemoryOnly) {
				self.controller.ObjectsDataSet.cleanContext(self.contextId);
			}
			if(self.$formContainer) {
				ko.removeNode(self.$formContainer.get(0));
			}
		};


 
        this.ShowError = function (errorMessage, title) {
			self.isOpenInEditMode = false;
			self.controller.applicationController.showAlertPopup(self, errorMessage, title, null, self.contextId);
            self.StatusData.IsBusy(false);
        };		

		this.getErrorClass = ko.pureComputed(function () {
            if (self.customViewModel !== undefined && self.customViewModel.getErrorClass !== undefined) {
                return self.customViewModel.getErrorClass();
            }
            return "errorText";
        });
		
		this.initialize = function() {
			// Call custom initialize if defined
			if (self.customViewModel !== undefined && self.customViewModel.initialize !== undefined) {
			    self.customViewModel.initialize();
			}
		};

		self.initialize();
	
		// Apply bindings
		if (self.$formContainer) {
			ko.applyBindings(self, self.$formContainer.get(0));
    		self.StatusData.IsBusy(false);
		}
	};		

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/ViewModels/PlaceToLocation/PlaceToLocationFormViewModel.js");
} ());