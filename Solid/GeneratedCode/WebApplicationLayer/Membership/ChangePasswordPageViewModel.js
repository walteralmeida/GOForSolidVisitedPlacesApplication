////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
(function () {
    // 
    Solid.Web.Membership.ChangePasswordPageViewModel = function () {
        var self = this;

		var username;

        this.securityProviderProxy = new Solid.Web.Model.Components.GOSecurityProviderProxy(this.ObjectsDataSet);

        this.data = {
            oldPassword: ko.observable(null),
            newPassword: ko.observable(null),
			confirmPassword: ko.observable(null),
			changePasswordFailed: ko.observable(false),
            errorMessage: ko.observable(null)
        };

        this.commands = {
            changePassword: function () {
                self.changePassword();
            },
			changePasswordText: ko.observable(Solid.Web.Messages.changePassword),
			changePasswordEnabled: ko.observable(true)
        };

        this.changePassword = function () {
             $(':input').trigger('change');
			if(self.data.newPassword()!=self.data.confirmPassword())
			{
				self.onPasswordUnconfirmedError(Solid.Web.Messages.changePasswordMismatchNewConfirm);
				return;
			}
			
			var configuration = {};

			configuration.userId = username;
            configuration.oldPassword = self.data.oldPassword();
            configuration.newPassword = self.data.newPassword();

			configuration.useCookies = true; // as per configuration passed to securityProviderProxy.Authenticate()

            configuration.successHandler = self.onChangePasswordSucceeded;
            configuration.errorHandler = self.onChangePasswordError;
		
			self.commands.changePasswordText(Solid.Web.Messages.changingPassword);
			self.commands.changePasswordEnabled(false);

            self.securityProviderProxy.ChangePassword(configuration);

        };

        this.onChangePasswordSucceeded = function (token) {
            window.location = Solid.Web.Application.BaseURL + window.location.hash;
        };

		this.onChangePasswordError = function (error) {
			self.commands.changePasswordText(Solid.Web.Messages.changePassword);
			self.commands.changePasswordEnabled(true);
	        self.data.oldPassword(null);    
	        self.data.newPassword(null);    
			self.data.confirmPassword(null);    
			self.data.changePasswordFailed(true);
	        self.data.errorMessage(error);
        };

       this.onPasswordUnconfirmedError = function (error) {
			self.commands.changePasswordText(Solid.Web.Messages.changePassword);
			self.commands.changePasswordEnabled(true);
	        self.data.newPassword(null);    
	        self.data.confirmPassword(null);
			self.data.changePasswordFailed(true);
	        self.data.errorMessage(error);
        };

		this.initialize = function () {
		   username = getQueryParameter("passwordHasExpired");
                
		    if (username) {
				// Show change password prompt
				var prompt = Solid.Web.Messages.passwordHasExpired;
                self.data.changePasswordFailed(true);
                self.data.errorMessage(prompt);
            }
		}

		this.initialize();

        // Apply bindings
        ko.applyBindings(self, $("#Main").get(0));
    };
}());