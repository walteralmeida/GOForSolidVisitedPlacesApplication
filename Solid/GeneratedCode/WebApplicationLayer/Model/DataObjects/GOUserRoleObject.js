////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict';
	
	/// <summary>
	/// DataObject class for the entity 'GOUserRole'.
	/// </summary>
	Solid.Web.Model.DataObjects.GOUserRoleObject = function(rootobject) {
		var self = this;
		
		this._objectType = "GOUserRole";
		
		// Dealing with memory
		this.subscriptions = [];
		this.ko_computed = [];
		this.IsReleased = false;

	
		// GOUserRoleObject Data
		this.Data = {
			// PK fields
			GORoleName: ko.observable(null),
			GORoleName_OldValue: ko.observable(null),	
			GOUserId: ko.observable(Math.uuid()),
			GOUserId_OldValue: ko.observable(Math.uuid()),	
			
			// Relation	fields (navigators + FK temporary keys observable if needed)
			_role_NewObjectId : ko.observable(null),
			_user_NewObjectId : ko.observable(null),
			Role: function () { return self.getRole(); },
 			User: function () { return self.getUser(); },
 			// State attributes
			InternalObjectId: ko.observable(null),

			// IsDirty indicates weither the data objects has to be persisted
			IsDirty: ko.observable(true),
			IsNew: ko.observable(true),
			IsMarkedForDeletion: ko.observable(false)
		};

		// Computed
		this.ko_computed.push(this.Data.PrimaryKey = ko.pureComputed(ComputedPKForGOUserRole, this));

 
		// timezone adjustment
		// Currently not doing anything useful, left in as a placeholder for future expansion (if e.g. we support showing dates in user-specified timezones)
		this.getTimezoneAdjustedDate = function (fieldName, isAbsolute) {
			return GO.GetDisplayDate(self.Data[fieldName](), 0, isAbsolute);
		};

		// Validation control
		this.StatusData = {
			isGORoleNameValid: ko.observable(true),
			gORoleNameErrorMessage: ko.observable(null), 
			isGOUserIdValid: ko.observable(true),
			gOUserIdErrorMessage: ko.observable(null), 
			isRoleValid: ko.observable(true),
			roleErrorMessage: ko.observable(null), 
			isUserValid: ko.observable(true),
			userErrorMessage: ko.observable(null), 
			
			// Used for Custom Validation Rules
			isGOUserRoleEntityValid: ko.observable(true),
			gOUserRoleEntityErrorMessage: ko.observable(null),
			errorSummary: ko.observableArray(),
			lastEditedTime: ko.observable(new Date().getTime())
		};

		// Overall validity
		this.ko_computed.push(this.StatusData.isValid = ko.pureComputed(statusDataValidationComputed, this));

		/**********************************/
		/****** ADDITIONNAL FIELDS ********/
		/**********************************/

		// Dataset
		//this.datasetClone = null;
        this.ObjectsDataSet = null;
        this.contextIds = [];
		
		// Dependencies		
        this.isInUpdateDependentCustomValues = false;
        this.DirtyHandlerOn = true;
        this.notifyChangesOn = true;
		this.onPropertyChangedHandlers = [];

		this.initialize();
	};

	// Overriding default toString with the Title field set
	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.toString = function() {
		return this.Data.GORoleName();
	};

	/****************************************/
    /****** PROPERTY CHANGE HANDLING ********/
    /****************************************/

 
	// DateTime handling
	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.setDateTimeFromJSON = function(prop, date) {

		if (!date || !date.Date)
			return;

		if (!this.Data[prop])
			return;
 
		this.Data[prop](date.Date);
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.addOnPropertyChangedHandler = function( handler ) {
		this.onPropertyChangedHandlers.push(handler);
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.removeOnPropertyChangedHandler = function( handler ) {
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			if (this.onPropertyChangedHandlers[i] === handler) {
				this.onPropertyChangedHandlers.splice(i,1);
				i--;
			}
		}
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.onPropertyChanged = function (propertyName, callers) {
		if (this.notifyChangesOn === false)
			return;

		var localPropertyName = propertyName;
			
		// This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
        if (!callers) {
			callers = [];
		}
			
        var callerIndex = callers.indexOf(this);
		if (callerIndex !== -1)
        {
			return;
        }
			
		callers.push(this);
			
		
		// Push the notification to related objects			
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			this.onPropertyChangedHandlers[i](localPropertyName);
		}
	};

		
    /*************************/
    /****** RELATIONS ********/
    /*************************/

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.getRole = function () {
		if (!this.ObjectsDataSet)
            return null;

		if(Solid.Web.Model.DataObjects.GORoleObject === undefined) {
			// case script not already loaded
			return null;
		}

		var result;
        var gORoleDataset = this.ObjectsDataSet.getGORoleObjectsDataSet();

        if (this.Data._role_NewObjectId() !== null) {                
            result = gORoleDataset.GetObjectByInternalId(this.Data._role_NewObjectId(), true);
        } else {
            result = gORoleDataset.GetObjectByPK(this.Data.GORoleName());
        }		

		if (result)
			result.updateDependentValues();

		return result;
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.setRole = function (valueToSet, notifyChanges, dirtyHandlerOn) {
		var existing_role = null;

		if (((this.Data.GORoleName === null) && this.Data._role_NewObjectId() === null) || this.ObjectsDataSet === null) {
			existing_role = null;
		} else {
			var gORoleDataset = this.ObjectsDataSet.getGORoleObjectsDataSet();

			if (this.Data._role_NewObjectId() === null) {
				existing_role =  gORoleDataset.GetObjectByPK(this.Data.GORoleName());
			} else {
				existing_role = gORoleDataset.GetObjectByInternalId(this.Data._role_NewObjectId(), true);
			}				
		}
				
		if (existing_role === valueToSet) {
			return;
        }
		// Setting the navigator desync the FK. The FK should be resync
		if (valueToSet !== null) {
            this.ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
			if (valueToSet.Data.IsNew()) {
				if (this.Data._role_NewObjectId() !== valueToSet.Data.InternalObjectId()) {
					this.Data._role_NewObjectId(valueToSet.Data.InternalObjectId());
				}
			} else {
				if (this.Data.GORoleName() !== valueToSet.Data.Name()) {
					this.Data._role_NewObjectId(null);

					this.Data.GORoleName(valueToSet.Data.Name());
				}
			}
		} else {
			this.Data.GORoleName(null);
		}
	};
	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.getUser = function () {
		if (!this.ObjectsDataSet)
            return null;

		if(Solid.Web.Model.DataObjects.GOUserObject === undefined) {
			// case script not already loaded
			return null;
		}

		var result;
        var gOUserDataset = this.ObjectsDataSet.getGOUserObjectsDataSet();

        if (this.Data._user_NewObjectId() !== null) {                
            result = gOUserDataset.GetObjectByInternalId(this.Data._user_NewObjectId(), true);
        } else {
            result = gOUserDataset.GetObjectByPK(this.Data.GOUserId());
        }		

		if (result)
			result.updateDependentValues();

		return result;
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.setUser = function (valueToSet, notifyChanges, dirtyHandlerOn) {
		var existing_user = null;

		if (this.ObjectsDataSet === null) {
			existing_user = null;
		} else {
			var gOUserDataset = this.ObjectsDataSet.getGOUserObjectsDataSet();

			if (this.Data._user_NewObjectId() === null) {
				existing_user =  gOUserDataset.GetObjectByPK(this.Data.GOUserId());
			} else {
				existing_user = gOUserDataset.GetObjectByInternalId(this.Data._user_NewObjectId(), true);
			}				
		}
				
		if (existing_user === valueToSet) {
			return;
        }
		// Setting the navigator desync the FK. The FK should be resync
		if (valueToSet !== null) {
            this.ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
			if (valueToSet.Data.IsNew()) {
				if (this.Data._user_NewObjectId() !== valueToSet.Data.InternalObjectId()) {
					this.Data._user_NewObjectId(valueToSet.Data.InternalObjectId());
				}
			} else {
				if (this.Data.GOUserId() !== valueToSet.Data.Id()) {
					this.Data._user_NewObjectId(null);

					this.Data.GOUserId(valueToSet.Data.Id());
				}
			}
		} else {
			this.Data.GOUserId(Math.uuid());
		}
	};

	/*************************/
    /****** VALIDATION *******/
    /*************************/       

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.runValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOUserRoleValidator.validate(this);
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.resetValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOUserRoleValidator.resetValidation(this);
	};


	/********************/
    /****** MODEL *******/
    /********************/
		
	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.Clone = function() {
		var clone = new Solid.Web.Model.DataObjects.GOUserRoleObject();
        clone.DirtyHandlerOn = false;
		clone.notifyChangesOn = false;
		clone.Data.InternalObjectId(this.Data.InternalObjectId());

		// Copy all fields
		clone.Data.GORoleName_OldValue(this.Data.GORoleName_OldValue());
		clone.Data.GORoleName(this.Data.GORoleName());
		clone.Data.GOUserId_OldValue(this.Data.GOUserId_OldValue());
		clone.Data.GOUserId(this.Data.GOUserId());
		clone.Data._role_NewObjectId (this.Data._role_NewObjectId());
		clone.Data._user_NewObjectId (this.Data._user_NewObjectId());
		clone.contextIds = this.contextIds;

		clone.Data.IsDirty(this.Data.IsDirty());
		clone.Data.IsNew(this.Data.IsNew());
		clone.Data.IsMarkedForDeletion(this.Data.IsMarkedForDeletion());

        clone.DirtyHandlerOn = true;
		clone.notifyChangesOn = true;

		clone.updateDependentValues();

		return clone;
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.CopyValuesFrom = function(sourceObject) {
        var oldDirtyHandlerOn = this.DirtyHandlerOn;
        var oldNotifyChangesOn = this.notifyChangesOn;
        this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;

		if (sourceObject) {
			this.Data.InternalObjectId(sourceObject.Data.InternalObjectId());

			// Copy all fields
			this.Data.GORoleName_OldValue(sourceObject.Data.GORoleName_OldValue());
			this.Data.GORoleName(sourceObject.Data.GORoleName());
			this.Data.GOUserId_OldValue(sourceObject.Data.GOUserId_OldValue());
			this.Data.GOUserId(sourceObject.Data.GOUserId());
			this.Data._role_NewObjectId (sourceObject.Data._role_NewObjectId());
			this.Data._user_NewObjectId (sourceObject.Data._user_NewObjectId());
			this.contextIds = sourceObject.contextIds;

			this.Data.IsDirty(sourceObject.Data.IsDirty());
			this.Data.IsNew(sourceObject.Data.IsNew());
			this.Data.IsMarkedForDeletion(sourceObject.Data.IsMarkedForDeletion());
		}

        this.DirtyHandlerOn = oldDirtyHandlerOn;
        this.notifyChangesOn = oldNotifyChangesOn;

		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.updateDependentCustomValues = function () {
		if (this.isInUpdateDependentCustomValues === true || !this.notifyChangesOn)
		    return;
			
		this.isInUpdateDependentCustomValues = true;			
		this.isInUpdateDependentCustomValues = false;
	};
		
	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.updateDependentValues = function() {
		if (!this.notifyChangesOn)
			return;
	};

	/*****************************/
    /****** INITIALIZATION *******/
    /*****************************/

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.initialize = function() {

		// Subscriptions
		this.subscriptions.push(this.Data.IsDirty.subscribe(isDirtySubscriptionHandler, this));
		this.subscriptions.push(this.Data.IsMarkedForDeletion.subscribe(isMarkedForDeletionSubscriptionHandler, this));
		this.subscriptions.push(this.Data.GORoleName.subscribe(GORoleNamePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.GOUserId.subscribe(GOUserIdPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data._role_NewObjectId.subscribe(roleNewObjectSubscriptionHandler, this));
		this.subscriptions.push(this.Data._user_NewObjectId.subscribe(userNewObjectSubscriptionHandler, this));

 
		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOUserRoleObject.prototype.release = function() {			
		if (this.IsReleased)
			return;

		this.IsReleased = true;

		var i;
		for (i = 0; i < this.ko_computed.length; i++) {
			this.ko_computed[i].dispose();
		}
		
		for (i = 0; i < this.subscriptions.length; i++) {
			this.subscriptions[i].dispose();
		}

		// Resetting arrays for GC
		this.ko_computed = [];
		this.subscriptions = [];
	};


	/***************************************************************/
    /****** "PRIVATE" methods, FOR SUBSCRIPTIONS / COMPUTED ********/
    /***************************************************************/
		
	/// Computed functions
		
	function ComputedPKForGOUserRole() {
		return { "id1": this.Data.GORoleName(), "id2": this.Data.GOUserId() };
	}	 
	
	function statusDataValidationComputed() {
		var isValid = true;
		isValid = isValid && this.StatusData.isRoleValid() && this.StatusData.isUserValid();
		return isValid;
	}

	
	/// Subscription handler
	function isDirtySubscriptionHandler(newValue) {
		if (newValue === true && this.ObjectsDataSet) {
			this.ObjectsDataSet.setContextIdsDirty(this.contextIds);
		}		
	}

	function isMarkedForDeletionSubscriptionHandler(newValue) {
		this.Data.IsDirty(true);
	}
			

	function GORoleNamePropertySubscriptionHandler(newValue) {
		// PK Changed => update dataset internalId table (don't do it if new object)
		if (this.Data.IsNew() === false && !this.isDataSetCopy && this.Data.GORoleName_OldValue() !== newValue) {
			if (this.ObjectsDataSet) {
				this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[newValue] = this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[this.Data.GORoleName_OldValue()];
				delete this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[this.Data.GORoleName_OldValue()];
			}
		}
		
		if (this.Data.GORoleName_OldValue() !== newValue && this.ObjectsDataSet) {
			this.ObjectsDataSet.getGOUserRoleObjectsDataSet().UpdateRoleFKIndex(this.Data.GORoleName_OldValue(), newValue, this);            
		}
		this.Data.GORoleName_OldValue(newValue);
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("GORoleName");
			this.onPropertyChanged("Role");
		}
    }

	function GOUserIdPropertySubscriptionHandler(newValue) {
		// PK Changed => update dataset internalId table (don't do it if new object)
		if (this.Data.IsNew() === false && !this.isDataSetCopy && this.Data.GOUserId_OldValue() !== newValue) {
			if (this.ObjectsDataSet) {
				this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[this.Data.GORoleName()][newValue] = this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[this.Data.GORoleName()][this.Data.GOUserId_OldValue()];
				delete this.ObjectsDataSet.getGOUserRoleObjectsDataSet().gOUserRoleObjectInternalIds[this.Data.GORoleName()][this.Data.GOUserId_OldValue()];
			}
		}
		
		if (this.Data.GOUserId_OldValue() !== newValue && this.ObjectsDataSet) {
			this.ObjectsDataSet.getGOUserRoleObjectsDataSet().UpdateUserFKIndex(this.Data.GOUserId_OldValue(), newValue, this);            
		}
		this.Data.GOUserId_OldValue(newValue);
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("GOUserId");
			this.onPropertyChanged("User");
		}
    }

	function roleNewObjectSubscriptionHandler(newValue) {
		if (this.DirtyHandlerOn === true) 			
            this.Data.IsDirty(true);

		if (this.notifyChangesOn === true) {	
			this.onPropertyChanged("Role");
		}
    }
 


	function userNewObjectSubscriptionHandler(newValue) {
		if (this.DirtyHandlerOn === true) 			
            this.Data.IsDirty(true);

		if (this.notifyChangesOn === true) {	
			this.onPropertyChanged("User");
		}
    }
 



	/*************************/
    /****** FACTORY **********/
    /*************************/

    Solid.Web.Model.DataObjects.GOUserRoleObjectFactory = {
        createNew: function (objectsDataSet, contextId) {
            // if there is a custom implementation => call it
			if (Solid.Web.Model.DataObjects.GOUserRoleObjectFactoryCustom) {
                return Solid.Web.Model.DataObjects.GOUserRoleObjectFactoryCustom.createNew(objectsDataSet, contextId);
            }
            else {
                var newObject = new Solid.Web.Model.DataObjects.GOUserRoleObject();

                if (contextId) {
                    newObject.contextIds.push(contextId);
                }

                if (objectsDataSet) {
                    objectsDataSet.AddObject(newObject);

					if (contextId)
						objectsDataSet.setContextIdsDirty(newObject.contextIds);

                }

                return newObject;
            }
        }
    };

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataObjects/GOUserRoleObject.js");

} ());