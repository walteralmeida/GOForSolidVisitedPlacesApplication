////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict';
	
	/// <summary>
	/// DataObject class for the entity 'GOGroup'.
	/// </summary>
	Solid.Web.Model.DataObjects.GOGroupObject = function(rootobject) {
		var self = this;
		
		this._objectType = "GOGroup";
		
		// Dealing with memory
		this.subscriptions = [];
		this.ko_computed = [];
		this.IsReleased = false;

	
		// GOGroupObject Data
		this.Data = {
			// PK fields
			Name: ko.observable(null),
			Name_OldValue: ko.observable(null),	
			
			// Relation	fields (navigators + FK temporary keys observable if needed)
			GroupRoleItems: function () { return self.getGroupRoleItems(); },
 			UserGroupItems: function () { return self.getUserGroupItems(); },
 		
			// Other fields
			Description: ko.observable(null),
			DisplayName: ko.observable(null),
			IsSpecialGroup: ko.observable(),
			SpecialGroup: ko.observable(0),
			SpecialGroupDisplayString: ko.observable(Solid.Web.Model.DataObjects.GOSpecialGroupsEnum[0]),
			// State attributes
			InternalObjectId: ko.observable(null),

			// IsDirty indicates weither the data objects has to be persisted
			IsDirty: ko.observable(true),
			IsNew: ko.observable(true),
			IsMarkedForDeletion: ko.observable(false)
		};

		// Enumerations
				this.Data.gOSpecialGroupsValues = ko.observableArray([0, 1]);

		this.Data.SpecialGroupValues = ko.observableArray([{ selectvalue : 0, visible: ko.observable(true) }, { selectvalue : 1, visible: ko.observable(true) }]);		
			
			this.SpecialGroupOptionsAfterRender = function (option, item) {
				// implement in custom SpecialGroupOptionsAfterRenderCustom if you want post render control
				if (self.SpecialGroupOptionsAfterRenderCustom) {
					self.SpecialGroupOptionsAfterRenderCustom(option, item);
				}
				else {
		            ko.applyBindingsToNode(option, { visible: item.visible }, item);
				}
			};
            this.Data.gOSpecialGroupsValues.subscribe(function (changes) {
                for (var i = 0; i < changes.length; i++) {
                    if (changes[i].moved != undefined) {
                        // we don't treat moves ....
						continue;
                    }
                    if (changes[i].status == "deleted") {
                        for (var j = 0; j < self.Data.SpecialGroupValues().length; j++) {
                            if (self.Data.SpecialGroupValues()[j].selectvalue == changes[i].value) {
                                self.Data.SpecialGroupValues()[j].visible(false);
                            }
                        };                            
                    }
                    else if (changes[i].status == "added") {
                        for (var j = 0; j < self.Data.SpecialGroupValues().length; j++) {
                            if (self.Data.SpecialGroupValues()[j].selectvalue == changes[i].value) {
                                self.Data.SpecialGroupValues()[j].visible(true);
                            }
                        };                            
                    }
                }
            }, null, "arrayChange");


		// Computed
		this.ko_computed.push(this.Data.PrimaryKey = ko.pureComputed(ComputedPKForGOGroup, this));

 
		// timezone adjustment
		// Currently not doing anything useful, left in as a placeholder for future expansion (if e.g. we support showing dates in user-specified timezones)
		this.getTimezoneAdjustedDate = function (fieldName, isAbsolute) {
			return GO.GetDisplayDate(self.Data[fieldName](), 0, isAbsolute);
		};

		// Validation control
		this.StatusData = {
			isDescriptionValid: ko.observable(true),
			descriptionErrorMessage: ko.observable(null), 
			isDisplayNameValid: ko.observable(true),
			displayNameErrorMessage: ko.observable(null), 
			isGroupRoleItemsValid: ko.observable(true),
			groupRoleItemsErrorMessage: ko.observable(null), 
			isIsSpecialGroupValid: ko.observable(true),
			isSpecialGroupErrorMessage: ko.observable(null), 
			isNameValid: ko.observable(true),
			nameErrorMessage: ko.observable(null), 
			isSpecialGroupValid: ko.observable(true),
			specialGroupErrorMessage: ko.observable(null), 
			isUserGroupItemsValid: ko.observable(true),
			userGroupItemsErrorMessage: ko.observable(null), 
			IsNameReadOnly: ko.observable(),
			IsDisplayNameReadOnly: ko.observable(),
			IsDescriptionReadOnly: ko.observable(),
			IsSpecialGroupVisible: ko.observable(),
			
			// Used for Custom Validation Rules
			isGOGroupEntityValid: ko.observable(true),
			gOGroupEntityErrorMessage: ko.observable(null),
			errorSummary: ko.observableArray(),
			lastEditedTime: ko.observable(new Date().getTime())
		};

		// Overall validity
		this.ko_computed.push(this.StatusData.isValid = ko.pureComputed(statusDataValidationComputed, this));

		/**********************************/
		/****** ADDITIONNAL FIELDS ********/
		/**********************************/

		// Dataset
		//this.datasetClone = null;
        this.ObjectsDataSet = null;
        this.contextIds = [];
		
		// Dependencies		
        this.isInUpdateDependentCustomValues = false;
        this.DirtyHandlerOn = true;
        this.notifyChangesOn = true;
		this.onPropertyChangedHandlers = [];

		this.initialize();
	};

	// Overriding default toString with the Title field set
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.toString = function() {
		return this.Data.Name();
	};

	/****************************************/
    /****** PROPERTY CHANGE HANDLING ********/
    /****************************************/

 
	// DateTime handling
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.setDateTimeFromJSON = function(prop, date) {

		if (!date || !date.Date)
			return;

		if (!this.Data[prop])
			return;
 
		this.Data[prop](date.Date);
	};

	// Triggers for Business rules data dependency
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateDisplayNameValue = function() {
		this.Data.DisplayName(((this.Data.IsSpecialGroup() == false) ? (!!this.Data.DisplayName() ? this.Data.DisplayName() : '') : ((this.Data.SpecialGroup() == 0) ? 'Authenticated Users' : 'Anonymous Users')));
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateDescriptionValue = function() {
		this.Data.Description(((this.Data.IsSpecialGroup() == false) ? (!!this.Data.Description() ? this.Data.Description() : '') : ((this.Data.SpecialGroup() == 0) ? 'Represents all authenticated users' : 'Represents all anonymous users')));
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateNameValue = function() {
		this.Data.Name(((this.Data.IsSpecialGroup() == false) ? (!!this.Data.Name() ? this.Data.Name() : '') : ((this.Data.SpecialGroup() == 0) ? 'Authenticated Users' : 'Anonymous Users')));
	};
		
	// Triggers for Business Rules ReadOnly dependency
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateIsNameReadOnlyValue = function() {
		this.StatusData.IsNameReadOnly((this.Data.IsSpecialGroup() == true));
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateIsDisplayNameReadOnlyValue = function() {
		this.StatusData.IsDisplayNameReadOnly((this.Data.IsSpecialGroup() == true));
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateIsDescriptionReadOnlyValue = function() {
		this.StatusData.IsDescriptionReadOnly((this.Data.IsSpecialGroup() == true));
	};
		
	// Triggers for Business Rules IsVisible dependency
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateIsSpecialGroupVisibleValue = function() {
		this.StatusData.IsSpecialGroupVisible((this.Data.IsSpecialGroup() == true));
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.addOnPropertyChangedHandler = function( handler ) {
		this.onPropertyChangedHandlers.push(handler);
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.removeOnPropertyChangedHandler = function( handler ) {
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			if (this.onPropertyChangedHandlers[i] === handler) {
				this.onPropertyChangedHandlers.splice(i,1);
				i--;
			}
		}
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.onPropertyChanged = function (propertyName, callers) {
		if (this.notifyChangesOn === false)
			return;

		var localPropertyName = propertyName;
			
		// This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
        if (!callers) {
			callers = [];
		}
			
        var callerIndex = callers.indexOf(this);
		if (callerIndex !== -1)
        {
			return;
        }
			
		callers.push(this);
			
		
		// Push the notification to related objects			
		var groupRoleItemsItems = this.Data.GroupRoleItems();

		if (groupRoleItemsItems !== null && groupRoleItemsItems) {
			for (var i=0; i < groupRoleItemsItems.length; i++) {
				groupRoleItemsItems[i].onPropertyChanged("Group." + localPropertyName, callers);
			}
		}

		var userGroupItemsItems = this.Data.UserGroupItems();

		if (userGroupItemsItems !== null && userGroupItemsItems) {
			for (var i=0; i < userGroupItemsItems.length; i++) {
				userGroupItemsItems[i].onPropertyChanged("Group." + localPropertyName, callers);
			}
		}

		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			this.onPropertyChangedHandlers[i](localPropertyName);
		}
	};

		
    /*************************/
    /****** RELATIONS ********/
    /*************************/

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.getGroupRoleItems = function () {
		if (!this.ObjectsDataSet)
            return null;

		return this.ObjectsDataSet.GetRelatedObjects(this, "GroupRoleItems");							
	};

		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.onGroupRoleItemsChanged = function (change, newitems, olditems, dirtyhandlerOn) {
        if (change === "add") {
            for (var i = 0 ; i < newitems.length ;  i++) {
                if (this.Data.IsNew() === true) {
                    newitems[i].Data._group_NewObjectId(this.Data.InternalObjectId());
                } else {
					newitems[i].Data.GOGroupName(this.Data.Name());
              }
            }

			if (newitems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }
        else if (change === "remove") {
            for (var i = 0 ; i < olditems.length ;  i++) {
                if ( olditems[i].Data.IsNew() === true) {
					this.ObjectsDataSet.RemoveObject(olditems[i]);
                }
            }

			if (olditems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }            
    };		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.getUserGroupItems = function () {
		if (!this.ObjectsDataSet)
            return null;

		return this.ObjectsDataSet.GetRelatedObjects(this, "UserGroupItems");							
	};

		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.onUserGroupItemsChanged = function (change, newitems, olditems, dirtyhandlerOn) {
        if (change === "add") {
            for (var i = 0 ; i < newitems.length ;  i++) {
                if (this.Data.IsNew() === true) {
                    newitems[i].Data._group_NewObjectId(this.Data.InternalObjectId());
                } else {
					newitems[i].Data.GOGroupName(this.Data.Name());
              }
            }

			if (newitems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }
        else if (change === "remove") {
            for (var i = 0 ; i < olditems.length ;  i++) {
                if ( olditems[i].Data.IsNew() === true) {
					this.ObjectsDataSet.RemoveObject(olditems[i]);
                }
            }

			if (olditems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }            
    };		

	/*************************/
    /****** VALIDATION *******/
    /*************************/       

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.runValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOGroupValidator.validate(this);
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.resetValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOGroupValidator.resetValidation(this);
	};


	/********************/
    /****** MODEL *******/
    /********************/
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.Clone = function() {
		var clone = new Solid.Web.Model.DataObjects.GOGroupObject();
        clone.DirtyHandlerOn = false;
		clone.notifyChangesOn = false;
		clone.Data.InternalObjectId(this.Data.InternalObjectId());

		// Copy all fields
		clone.Data.Name_OldValue(this.Data.Name_OldValue());
		clone.Data.Name(this.Data.Name());
		clone.Data.Description(this.Data.Description());
		clone.Data.DisplayName(this.Data.DisplayName());
		clone.Data.IsSpecialGroup(this.Data.IsSpecialGroup());
		clone.Data.SpecialGroup(this.Data.SpecialGroup());
		clone.contextIds = this.contextIds;

		clone.Data.IsDirty(this.Data.IsDirty());
		clone.Data.IsNew(this.Data.IsNew());
		clone.Data.IsMarkedForDeletion(this.Data.IsMarkedForDeletion());

        clone.DirtyHandlerOn = true;
		clone.notifyChangesOn = true;

		clone.updateDependentValues();

		return clone;
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.CopyValuesFrom = function(sourceObject) {
        var oldDirtyHandlerOn = this.DirtyHandlerOn;
        var oldNotifyChangesOn = this.notifyChangesOn;
        this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;

		if (sourceObject) {
			this.Data.InternalObjectId(sourceObject.Data.InternalObjectId());

			// Copy all fields
			this.Data.Name_OldValue(sourceObject.Data.Name_OldValue());
			this.Data.Name(sourceObject.Data.Name());
					this.Data.Description(sourceObject.Data.Description());
			this.Data.DisplayName(sourceObject.Data.DisplayName());
			this.Data.IsSpecialGroup(sourceObject.Data.IsSpecialGroup());
			this.Data.SpecialGroup(sourceObject.Data.SpecialGroup());
			this.contextIds = sourceObject.contextIds;

			this.Data.IsDirty(sourceObject.Data.IsDirty());
			this.Data.IsNew(sourceObject.Data.IsNew());
			this.Data.IsMarkedForDeletion(sourceObject.Data.IsMarkedForDeletion());
		}

        this.DirtyHandlerOn = oldDirtyHandlerOn;
        this.notifyChangesOn = oldNotifyChangesOn;

		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateDependentCustomValues = function () {
		if (this.isInUpdateDependentCustomValues === true || !this.notifyChangesOn)
		    return;
			
		this.isInUpdateDependentCustomValues = true;			
		this.isInUpdateDependentCustomValues = false;
	};
		
	Solid.Web.Model.DataObjects.GOGroupObject.prototype.updateDependentValues = function() {
		if (!this.notifyChangesOn)
			return;
		
		// Initialize Business Rules ReadOnly
		this.updateIsNameReadOnlyValue();		
		this.updateIsDisplayNameReadOnlyValue();		
		this.updateIsDescriptionReadOnlyValue();		
		
		// Initialize Business Rules Visibility
		this.updateIsSpecialGroupVisibleValue();		
		
		// Initialize Business Setter Rules	
		this.updateDisplayNameValue();		
		this.updateDescriptionValue();		
		this.updateNameValue();		
	};

	/*****************************/
    /****** INITIALIZATION *******/
    /*****************************/

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.initialize = function() {

		// Subscriptions
		this.subscriptions.push(this.Data.IsDirty.subscribe(isDirtySubscriptionHandler, this));
		this.subscriptions.push(this.Data.IsMarkedForDeletion.subscribe(isMarkedForDeletionSubscriptionHandler, this));
		this.subscriptions.push(this.Data.Description.subscribe(DescriptionPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.DisplayName.subscribe(DisplayNamePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.IsSpecialGroup.subscribe(IsSpecialGroupPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Name.subscribe(NamePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.SpecialGroup.subscribe(SpecialGroupPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.SpecialGroup.subscribe(SpecialGroupEnumSubscriptionHandler, this));

		this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;
		
		// Setting default values
		this.Data.IsSpecialGroup(false);
		
		this.DirtyHandlerOn = true;
		this.notifyChangesOn = true;
 
		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOGroupObject.prototype.release = function() {			
		if (this.IsReleased)
			return;

		this.IsReleased = true;

		var i;
		for (i = 0; i < this.ko_computed.length; i++) {
			this.ko_computed[i].dispose();
		}
		
		for (i = 0; i < this.subscriptions.length; i++) {
			this.subscriptions[i].dispose();
		}

		// Resetting arrays for GC
		this.ko_computed = [];
		this.subscriptions = [];
	};


	/***************************************************************/
    /****** "PRIVATE" methods, FOR SUBSCRIPTIONS / COMPUTED ********/
    /***************************************************************/
		
	/// Computed functions
		
	function ComputedPKForGOGroup() {
		return this.Data.Name();
	}	 
	
	function statusDataValidationComputed() {
		var isValid = true;
		isValid = isValid && this.StatusData.isDescriptionValid() && this.StatusData.isDisplayNameValid() && this.StatusData.isIsSpecialGroupValid() && this.StatusData.isNameValid() && this.StatusData.isSpecialGroupValid() && this.StatusData.isGOGroupEntityValid();
		return isValid;
	}

	
	/// Subscription handler
	function isDirtySubscriptionHandler(newValue) {
		if (newValue === true && this.ObjectsDataSet) {
			this.ObjectsDataSet.setContextIdsDirty(this.contextIds);
		}		
	}

	function isMarkedForDeletionSubscriptionHandler(newValue) {
		this.Data.IsDirty(true);
	}
			
	function SpecialGroupEnumSubscriptionHandler(newValue) {
		this.Data.SpecialGroupDisplayString(Solid.Web.Model.DataObjects.GOSpecialGroupsEnum[this.Data.SpecialGroup()]);
	};	
	

	function DescriptionPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Description");
		}
    }

	function DisplayNamePropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("DisplayName");
		}
    }

	function IsSpecialGroupPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("IsSpecialGroup");
		}
    }

	function NamePropertySubscriptionHandler(newValue) {
		// PK Changed => update dataset internalId table (don't do it if new object)
		if (this.Data.IsNew() === false && !this.isDataSetCopy && this.Data.Name_OldValue() !== newValue) {
			if (this.ObjectsDataSet) {
				this.ObjectsDataSet.getGOGroupObjectsDataSet().gOGroupObjectInternalIds[newValue] = this.ObjectsDataSet.getGOGroupObjectsDataSet().gOGroupObjectInternalIds[this.Data.Name_OldValue()];
				delete this.ObjectsDataSet.getGOGroupObjectsDataSet().gOGroupObjectInternalIds[this.Data.Name_OldValue()];
			}
		}
		
		this.Data.Name_OldValue(newValue);
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Name");
		}
    }

	function SpecialGroupPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("SpecialGroup");
		}
    }

 


 



	/*************************/
    /****** FACTORY **********/
    /*************************/

    Solid.Web.Model.DataObjects.GOGroupObjectFactory = {
        createNew: function (objectsDataSet, contextId) {
            // if there is a custom implementation => call it
			if (Solid.Web.Model.DataObjects.GOGroupObjectFactoryCustom) {
                return Solid.Web.Model.DataObjects.GOGroupObjectFactoryCustom.createNew(objectsDataSet, contextId);
            }
            else {
                var newObject = new Solid.Web.Model.DataObjects.GOGroupObject();

                if (contextId) {
                    newObject.contextIds.push(contextId);
                }

                if (objectsDataSet) {
                    objectsDataSet.AddObject(newObject);

					if (contextId)
						objectsDataSet.setContextIdsDirty(newObject.contextIds);

                }

                return newObject;
            }
        }
    };

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataObjects/GOGroupObject.js");

} ());