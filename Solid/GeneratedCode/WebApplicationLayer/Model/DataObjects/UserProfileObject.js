////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict';
	
	/// <summary>
	/// DataObject class for the entity 'UserProfile'.
	/// </summary>
	Solid.Web.Model.DataObjects.UserProfileObject = function(rootobject) {
		var self = this;
		
		this._objectType = "UserProfile";
		
		// Dealing with memory
		this.subscriptions = [];
		this.ko_computed = [];
		this.IsReleased = false;

	
		// UserProfileObject Data
		this.Data = {
			// PK fields
			Uri: ko.observable(null),
			Uri_OldValue: ko.observable(null),	
			
			// Relation	fields (navigators + FK temporary keys observable if needed)
			_gOUser_NewObjectId : ko.observable(null),
			GOUser: function () { return self.getGOUser(); },
 			VisitedPlaceItems: function () { return self.getVisitedPlaceItems(); },
 		
			// Other fields
			Name: ko.observable(null),
			OrganizationName: ko.observable(null),
			Role: ko.observable(null),
			// State attributes
			InternalObjectId: ko.observable(null),

			// IsDirty indicates weither the data objects has to be persisted
			IsDirty: ko.observable(true),
			IsNew: ko.observable(true),
			IsMarkedForDeletion: ko.observable(false)
		};

		// Computed
		this.ko_computed.push(this.Data.PrimaryKey = ko.pureComputed(ComputedPKForUserProfile, this));

 
		// timezone adjustment
		// Currently not doing anything useful, left in as a placeholder for future expansion (if e.g. we support showing dates in user-specified timezones)
		this.getTimezoneAdjustedDate = function (fieldName, isAbsolute) {
			return GO.GetDisplayDate(self.Data[fieldName](), 0, isAbsolute);
		};

		// Validation control
		this.StatusData = {
			isGOUserValid: ko.observable(true),
			gOUserErrorMessage: ko.observable(null), 
			isNameValid: ko.observable(true),
			nameErrorMessage: ko.observable(null), 
			isOrganizationNameValid: ko.observable(true),
			organizationNameErrorMessage: ko.observable(null), 
			isRoleValid: ko.observable(true),
			roleErrorMessage: ko.observable(null), 
			isUriValid: ko.observable(true),
			uriErrorMessage: ko.observable(null), 
			isVisitedPlaceItemsValid: ko.observable(true),
			visitedPlaceItemsErrorMessage: ko.observable(null), 
			
			// Used for Custom Validation Rules
			isUserProfileEntityValid: ko.observable(true),
			userProfileEntityErrorMessage: ko.observable(null),
			errorSummary: ko.observableArray(),
			lastEditedTime: ko.observable(new Date().getTime())
		};

		// Overall validity
		this.ko_computed.push(this.StatusData.isValid = ko.pureComputed(statusDataValidationComputed, this));

		/**********************************/
		/****** ADDITIONNAL FIELDS ********/
		/**********************************/

		// Dataset
		//this.datasetClone = null;
        this.ObjectsDataSet = null;
        this.contextIds = [];
		
		// Dependencies		
        this.isInUpdateDependentCustomValues = false;
        this.DirtyHandlerOn = true;
        this.notifyChangesOn = true;
		this.onPropertyChangedHandlers = [];

		this.initialize();
	};

 
	// DateTime handling
	Solid.Web.Model.DataObjects.UserProfileObject.prototype.setDateTimeFromJSON = function(prop, date) {

		if (!date || !date.Date)
			return;

		if (!this.Data[prop])
			return;
 
		this.Data[prop](date.Date);
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.addOnPropertyChangedHandler = function( handler ) {
		this.onPropertyChangedHandlers.push(handler);
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.removeOnPropertyChangedHandler = function( handler ) {
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			if (this.onPropertyChangedHandlers[i] === handler) {
				this.onPropertyChangedHandlers.splice(i,1);
				i--;
			}
		}
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.onPropertyChanged = function (propertyName, callers) {
		if (this.notifyChangesOn === false)
			return;

		var localPropertyName = propertyName;
			
		// This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
        if (!callers) {
			callers = [];
		}
			
        var callerIndex = callers.indexOf(this);
		if (callerIndex !== -1)
        {
			return;
        }
			
		callers.push(this);
			
		
		// Push the notification to related objects			
		var gOUserItem = this.Data.GOUser();
			
		if (gOUserItem !== null && gOUserItem) {
			gOUserItem.onPropertyChanged("UserProfile." + localPropertyName, callers);
		}		
	
		var visitedPlaceItemsItems = this.Data.VisitedPlaceItems();

		if (visitedPlaceItemsItems !== null && visitedPlaceItemsItems) {
			for (var i=0; i < visitedPlaceItemsItems.length; i++) {
				visitedPlaceItemsItems[i].onPropertyChanged("UserProfile." + localPropertyName, callers);
			}
		}

		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			this.onPropertyChangedHandlers[i](localPropertyName);
		}
	};

		
    /*************************/
    /****** RELATIONS ********/
    /*************************/

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.getGOUser = function () {
		if (!this.ObjectsDataSet)
            return null;

		var _relatedObjectsResult = this.ObjectsDataSet.GetRelatedObjects(this, "GOUser");
		if (_relatedObjectsResult.length > 0) {
			return _relatedObjectsResult[0];
		} else {
			return null;
		}
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.setGOUser = function (valueToSet, notifyChanges, dirtyHandlerOn) {
		var _relatedObjects = this.ObjectsDataSet.GetRelatedObjects(this, "GOUser");
		var existing_gOUser = _relatedObjects && _relatedObjects.length > 0 ? _relatedObjects[0] : null;
				
		if (valueToSet !== null) {
            this.ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
            if (this.Data.IsNew()) {
                valueToSet.Data._userProfile_NewObjectId(this.Data.InternalObjectId());
			} else {
				valueToSet.Data.UserName(this.Data.Uri());
			}			
		} else  if (existing_gOUser !== null) {
            this.ObjectsDataSet.RemoveObject(existing_gOUser);
        }
	};
	Solid.Web.Model.DataObjects.UserProfileObject.prototype.getVisitedPlaceItems = function () {
		if (!this.ObjectsDataSet)
            return null;

		return this.ObjectsDataSet.GetRelatedObjects(this, "VisitedPlaceItems");							
	};

		
	Solid.Web.Model.DataObjects.UserProfileObject.prototype.onVisitedPlaceItemsChanged = function (change, newitems, olditems, dirtyhandlerOn) {
        if (change === "add") {
            for (var i = 0 ; i < newitems.length ;  i++) {
                if (this.Data.IsNew() === true) {
                    newitems[i].Data._userProfile_NewObjectId(this.Data.InternalObjectId());
                } else {
					newitems[i].Data.UserProfileUri(this.Data.Uri());
              }
            }

			if (newitems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }
        else if (change === "remove") {
            for (var i = 0 ; i < olditems.length ;  i++) {
                if ( olditems[i].Data.IsNew() === true) {
					this.ObjectsDataSet.RemoveObject(olditems[i]);
                }
            }

			if (olditems.length > 0 && dirtyhandlerOn === true)
				this.Data.IsDirty(true);
        }            
    };		

	/*************************/
    /****** VALIDATION *******/
    /*************************/       

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.runValidation = function () {
		Solid.Web.Model.DataObjects.Validation.UserProfileValidator.validate(this);
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.resetValidation = function () {
		Solid.Web.Model.DataObjects.Validation.UserProfileValidator.resetValidation(this);
	};


	/********************/
    /****** MODEL *******/
    /********************/
		
	Solid.Web.Model.DataObjects.UserProfileObject.prototype.Clone = function() {
		var clone = new Solid.Web.Model.DataObjects.UserProfileObject();
        clone.DirtyHandlerOn = false;
		clone.notifyChangesOn = false;
		clone.Data.InternalObjectId(this.Data.InternalObjectId());

		// Copy all fields
		clone.Data.Uri_OldValue(this.Data.Uri_OldValue());
		clone.Data.Uri(this.Data.Uri());
		clone.Data._gOUser_NewObjectId (this.Data._gOUser_NewObjectId());
		clone.Data.Name(this.Data.Name());
		clone.Data.OrganizationName(this.Data.OrganizationName());
		clone.Data.Role(this.Data.Role());
		clone.contextIds = this.contextIds;

		clone.Data.IsDirty(this.Data.IsDirty());
		clone.Data.IsNew(this.Data.IsNew());
		clone.Data.IsMarkedForDeletion(this.Data.IsMarkedForDeletion());

        clone.DirtyHandlerOn = true;
		clone.notifyChangesOn = true;

		clone.updateDependentValues();

		return clone;
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.CopyValuesFrom = function(sourceObject) {
        var oldDirtyHandlerOn = this.DirtyHandlerOn;
        var oldNotifyChangesOn = this.notifyChangesOn;
        this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;

		if (sourceObject) {
			this.Data.InternalObjectId(sourceObject.Data.InternalObjectId());

			// Copy all fields
			this.Data.Uri_OldValue(sourceObject.Data.Uri_OldValue());
			this.Data.Uri(sourceObject.Data.Uri());
			this.Data._gOUser_NewObjectId (sourceObject.Data._gOUser_NewObjectId());
				this.Data.Name(sourceObject.Data.Name());
			this.Data.OrganizationName(sourceObject.Data.OrganizationName());
			this.Data.Role(sourceObject.Data.Role());
			this.contextIds = sourceObject.contextIds;

			this.Data.IsDirty(sourceObject.Data.IsDirty());
			this.Data.IsNew(sourceObject.Data.IsNew());
			this.Data.IsMarkedForDeletion(sourceObject.Data.IsMarkedForDeletion());
		}

        this.DirtyHandlerOn = oldDirtyHandlerOn;
        this.notifyChangesOn = oldNotifyChangesOn;

		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.updateDependentCustomValues = function () {
		if (this.isInUpdateDependentCustomValues === true || !this.notifyChangesOn)
		    return;
			
		this.isInUpdateDependentCustomValues = true;			
		this.isInUpdateDependentCustomValues = false;
	};
		
	Solid.Web.Model.DataObjects.UserProfileObject.prototype.updateDependentValues = function() {
		if (!this.notifyChangesOn)
			return;
	};

	/*****************************/
    /****** INITIALIZATION *******/
    /*****************************/

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.initialize = function() {

		// Subscriptions
		this.subscriptions.push(this.Data.IsDirty.subscribe(isDirtySubscriptionHandler, this));
		this.subscriptions.push(this.Data.IsMarkedForDeletion.subscribe(isMarkedForDeletionSubscriptionHandler, this));
		this.subscriptions.push(this.Data.Name.subscribe(NamePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.OrganizationName.subscribe(OrganizationNamePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Role.subscribe(RolePropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Uri.subscribe(UriPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data._gOUser_NewObjectId.subscribe(gOUserNewObjectSubscriptionHandler, this));

 
		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.UserProfileObject.prototype.release = function() {			
		if (this.IsReleased)
			return;

		this.IsReleased = true;

		var i;
		for (i = 0; i < this.ko_computed.length; i++) {
			this.ko_computed[i].dispose();
		}
		
		for (i = 0; i < this.subscriptions.length; i++) {
			this.subscriptions[i].dispose();
		}

		// Resetting arrays for GC
		this.ko_computed = [];
		this.subscriptions = [];
	};


	/***************************************************************/
    /****** "PRIVATE" methods, FOR SUBSCRIPTIONS / COMPUTED ********/
    /***************************************************************/
		
	/// Computed functions
		
	function ComputedPKForUserProfile() {
		return this.Data.Uri();
	}	 
	
	function statusDataValidationComputed() {
		var isValid = true;
		isValid = isValid && this.StatusData.isNameValid() && this.StatusData.isOrganizationNameValid() && this.StatusData.isRoleValid() && this.StatusData.isUriValid() && this.StatusData.isUserProfileEntityValid();
		return isValid;
	}

	
	/// Subscription handler
	function isDirtySubscriptionHandler(newValue) {
		if (newValue === true && this.ObjectsDataSet) {
			this.ObjectsDataSet.setContextIdsDirty(this.contextIds);
		}		
	}

	function isMarkedForDeletionSubscriptionHandler(newValue) {
		this.Data.IsDirty(true);
	}
			

	function NamePropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Name");
		}
    }

	function OrganizationNamePropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("OrganizationName");
		}
    }

	function RolePropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Role");
		}
    }

	function UriPropertySubscriptionHandler(newValue) {
		// PK Changed => update dataset internalId table (don't do it if new object)
		if (this.Data.IsNew() === false && !this.isDataSetCopy && this.Data.Uri_OldValue() !== newValue) {
			if (this.ObjectsDataSet) {
				this.ObjectsDataSet.getUserProfileObjectsDataSet().userProfileObjectInternalIds[newValue] = this.ObjectsDataSet.getUserProfileObjectsDataSet().userProfileObjectInternalIds[this.Data.Uri_OldValue()];
				delete this.ObjectsDataSet.getUserProfileObjectsDataSet().userProfileObjectInternalIds[this.Data.Uri_OldValue()];
			}
		}
		
		this.Data.Uri_OldValue(newValue);
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Uri");
		}
    }

	function gOUserNewObjectSubscriptionHandler(newValue) {
		if (this.DirtyHandlerOn === true) 			
            this.Data.IsDirty(true);

		if (this.notifyChangesOn === true) {	
			this.onPropertyChanged("UserProfile");
		}
    }
 


 



	/*************************/
    /****** FACTORY **********/
    /*************************/

    Solid.Web.Model.DataObjects.UserProfileObjectFactory = {
        createNew: function (objectsDataSet, contextId) {
            // if there is a custom implementation => call it
			if (Solid.Web.Model.DataObjects.UserProfileObjectFactoryCustom) {
                return Solid.Web.Model.DataObjects.UserProfileObjectFactoryCustom.createNew(objectsDataSet, contextId);
            }
            else {
                var newObject = new Solid.Web.Model.DataObjects.UserProfileObject();

                if (contextId) {
                    newObject.contextIds.push(contextId);
                }

                if (objectsDataSet) {
                    objectsDataSet.AddObject(newObject);

					if (contextId)
						objectsDataSet.setContextIdsDirty(newObject.contextIds);

                }

                return newObject;
            }
        }
    };

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataObjects/UserProfileObject.js");

} ());