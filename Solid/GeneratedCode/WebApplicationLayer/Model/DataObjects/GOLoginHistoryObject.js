////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict';
	
	/// <summary>
	/// DataObject class for the entity 'GOLoginHistory'.
	/// </summary>
	Solid.Web.Model.DataObjects.GOLoginHistoryObject = function(rootobject) {
		var self = this;
		
		this._objectType = "GOLoginHistory";
		
		// Dealing with memory
		this.subscriptions = [];
		this.ko_computed = [];
		this.IsReleased = false;

	
		// GOLoginHistoryObject Data
		this.Data = {
			// PK fields
			Id: ko.observable(0),
			Id_OldValue: ko.observable(0),	
		
			// Other fields
			Info: ko.observable(null),
			Result: ko.observable(),
			Timestamp: ko.observable(),
			User: ko.observable(null),
			// State attributes
			InternalObjectId: ko.observable(null),

			// IsDirty indicates weither the data objects has to be persisted
			IsDirty: ko.observable(true),
			IsNew: ko.observable(true),
			IsMarkedForDeletion: ko.observable(false)
		};

		// Computed
		this.ko_computed.push(this.Data.PrimaryKey = ko.pureComputed(ComputedPKForGOLoginHistory, this));

		this.ko_computed.push(this.Data.Timestamp_DisplayString = ko.pureComputed(formatDateForTimestamp, this));	
		this.ko_computed.push(this.Data.Timestamp_WithTimeDisplayString = ko.pureComputed(formatDateForTimestampWithTime, this));
 
		// timezone adjustment
		// Currently not doing anything useful, left in as a placeholder for future expansion (if e.g. we support showing dates in user-specified timezones)
		this.getTimezoneAdjustedDate = function (fieldName, isAbsolute) {
			return GO.GetDisplayDate(self.Data[fieldName](), 0, isAbsolute);
		};

		// Validation control
		this.StatusData = {
			isIdValid: ko.observable(true),
			idErrorMessage: ko.observable(null), 
			isInfoValid: ko.observable(true),
			infoErrorMessage: ko.observable(null), 
			isResultValid: ko.observable(true),
			resultErrorMessage: ko.observable(null), 
			isTimestampValid: ko.observable(true),
			timestampErrorMessage: ko.observable(null), 
			isUserValid: ko.observable(true),
			userErrorMessage: ko.observable(null), 
			
			// Used for Custom Validation Rules
			isGOLoginHistoryEntityValid: ko.observable(true),
			gOLoginHistoryEntityErrorMessage: ko.observable(null),
			errorSummary: ko.observableArray(),
			lastEditedTime: ko.observable(new Date().getTime())
		};

		// Overall validity
		this.ko_computed.push(this.StatusData.isValid = ko.pureComputed(statusDataValidationComputed, this));

		/**********************************/
		/****** ADDITIONNAL FIELDS ********/
		/**********************************/

		// Dataset
		//this.datasetClone = null;
        this.ObjectsDataSet = null;
        this.contextIds = [];
		
		// Dependencies		
        this.isInUpdateDependentCustomValues = false;
        this.DirtyHandlerOn = true;
        this.notifyChangesOn = true;
		this.onPropertyChangedHandlers = [];

		this.initialize();
	};

 
	// DateTime handling
	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.setDateTimeFromJSON = function(prop, date) {

		if (!date || !date.Date)
			return;

		if (!this.Data[prop])
			return;
 
		// Timestamp is received from server as UTC (timezone offset information is 'lost' currently)
		// So offset from UTC using the local timezone offset had the offset been applied 'at the time' the date was set
		if (prop === "Timestamp") {
			date.Date = date.Date.addMinutes(-date.Date.getTimezoneOffset());
		}
 
		this.Data[prop](date.Date);
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.addOnPropertyChangedHandler = function( handler ) {
		this.onPropertyChangedHandlers.push(handler);
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.removeOnPropertyChangedHandler = function( handler ) {
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			if (this.onPropertyChangedHandlers[i] === handler) {
				this.onPropertyChangedHandlers.splice(i,1);
				i--;
			}
		}
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.onPropertyChanged = function (propertyName, callers) {
		if (this.notifyChangesOn === false)
			return;

		var localPropertyName = propertyName;
			
		// This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
        if (!callers) {
			callers = [];
		}
			
        var callerIndex = callers.indexOf(this);
		if (callerIndex !== -1)
        {
			return;
        }
			
		callers.push(this);
			
		for (var i = 0; i < this.onPropertyChangedHandlers.length; i++) {
			this.onPropertyChangedHandlers[i](localPropertyName);
		}
	};


	/*************************/
    /****** VALIDATION *******/
    /*************************/       

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.runValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOLoginHistoryValidator.validate(this);
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.resetValidation = function () {
		Solid.Web.Model.DataObjects.Validation.GOLoginHistoryValidator.resetValidation(this);
	};


	/********************/
    /****** MODEL *******/
    /********************/
		
	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.Clone = function() {
		var clone = new Solid.Web.Model.DataObjects.GOLoginHistoryObject();
        clone.DirtyHandlerOn = false;
		clone.notifyChangesOn = false;
		clone.Data.InternalObjectId(this.Data.InternalObjectId());

		// Copy all fields
		clone.Data.Id_OldValue(this.Data.Id_OldValue());
		clone.Data.Id(this.Data.Id());
		clone.Data.Info(this.Data.Info());
		clone.Data.Result(this.Data.Result());
		clone.Data.Timestamp(this.Data.Timestamp());
		clone.Data.User(this.Data.User());
		clone.contextIds = this.contextIds;

		clone.Data.IsDirty(this.Data.IsDirty());
		clone.Data.IsNew(this.Data.IsNew());
		clone.Data.IsMarkedForDeletion(this.Data.IsMarkedForDeletion());

        clone.DirtyHandlerOn = true;
		clone.notifyChangesOn = true;

		clone.updateDependentValues();

		return clone;
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.CopyValuesFrom = function(sourceObject) {
        var oldDirtyHandlerOn = this.DirtyHandlerOn;
        var oldNotifyChangesOn = this.notifyChangesOn;
        this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;

		if (sourceObject) {
			this.Data.InternalObjectId(sourceObject.Data.InternalObjectId());

			// Copy all fields
			this.Data.Id_OldValue(sourceObject.Data.Id_OldValue());
			this.Data.Id(sourceObject.Data.Id());
			this.Data.Info(sourceObject.Data.Info());
			this.Data.Result(sourceObject.Data.Result());
			this.Data.Timestamp(sourceObject.Data.Timestamp());
			this.Data.User(sourceObject.Data.User());
			this.contextIds = sourceObject.contextIds;

			this.Data.IsDirty(sourceObject.Data.IsDirty());
			this.Data.IsNew(sourceObject.Data.IsNew());
			this.Data.IsMarkedForDeletion(sourceObject.Data.IsMarkedForDeletion());
		}

        this.DirtyHandlerOn = oldDirtyHandlerOn;
        this.notifyChangesOn = oldNotifyChangesOn;

		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.updateDependentCustomValues = function () {
		if (this.isInUpdateDependentCustomValues === true || !this.notifyChangesOn)
		    return;
			
		this.isInUpdateDependentCustomValues = true;			
		this.isInUpdateDependentCustomValues = false;
	};
		
	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.updateDependentValues = function() {
		if (!this.notifyChangesOn)
			return;
	};

	/*****************************/
    /****** INITIALIZATION *******/
    /*****************************/

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.initialize = function() {

		// Subscriptions
		this.subscriptions.push(this.Data.IsDirty.subscribe(isDirtySubscriptionHandler, this));
		this.subscriptions.push(this.Data.IsMarkedForDeletion.subscribe(isMarkedForDeletionSubscriptionHandler, this));
		this.subscriptions.push(this.Data.Id.subscribe(IdPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Info.subscribe(InfoPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Result.subscribe(ResultPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.Timestamp.subscribe(TimestampPropertySubscriptionHandler, this));
		this.subscriptions.push(this.Data.User.subscribe(UserPropertySubscriptionHandler, this));

		this.DirtyHandlerOn = false;
		this.notifyChangesOn = false;
		
		// Setting default values
		this.Data.Result(false);
		
		this.DirtyHandlerOn = true;
		this.notifyChangesOn = true;
 
		this.updateDependentValues();
	};

	Solid.Web.Model.DataObjects.GOLoginHistoryObject.prototype.release = function() {			
		if (this.IsReleased)
			return;

		this.IsReleased = true;

		var i;
		for (i = 0; i < this.ko_computed.length; i++) {
			this.ko_computed[i].dispose();
		}
		
		for (i = 0; i < this.subscriptions.length; i++) {
			this.subscriptions[i].dispose();
		}

		// Resetting arrays for GC
		this.ko_computed = [];
		this.subscriptions = [];
	};


	/***************************************************************/
    /****** "PRIVATE" methods, FOR SUBSCRIPTIONS / COMPUTED ********/
    /***************************************************************/
		
	/// Computed functions
		
	function ComputedPKForGOLoginHistory() {
		return this.Data.Id();
	}	 
	
	function statusDataValidationComputed() {
		var isValid = true;
		isValid = isValid && this.StatusData.isIdValid() && this.StatusData.isInfoValid() && this.StatusData.isResultValid() && this.StatusData.isTimestampValid() && this.StatusData.isUserValid() && this.StatusData.isGOLoginHistoryEntityValid();
		return isValid;
	}

	function formatDateForTimestamp() { return GO.DateToString(this.getTimezoneAdjustedDate("Timestamp", false), false); }	
	function formatDateForTimestampWithTime() { return GO.DateToString(this.getTimezoneAdjustedDate("Timestamp", false), true); }
	
	/// Subscription handler
	function isDirtySubscriptionHandler(newValue) {
		if (newValue === true && this.ObjectsDataSet) {
			this.ObjectsDataSet.setContextIdsDirty(this.contextIds);
		}		
	}

	function isMarkedForDeletionSubscriptionHandler(newValue) {
		this.Data.IsDirty(true);
	}
			

	function IdPropertySubscriptionHandler(newValue) {
		// PK Changed => update dataset internalId table (don't do it if new object)
		if (this.Data.IsNew() === false && !this.isDataSetCopy && this.Data.Id_OldValue() !== newValue) {
			if (this.ObjectsDataSet) {
				this.ObjectsDataSet.getGOLoginHistoryObjectsDataSet().gOLoginHistoryObjectInternalIds[newValue] = this.ObjectsDataSet.getGOLoginHistoryObjectsDataSet().gOLoginHistoryObjectInternalIds[this.Data.Id_OldValue()];
				delete this.ObjectsDataSet.getGOLoginHistoryObjectsDataSet().gOLoginHistoryObjectInternalIds[this.Data.Id_OldValue()];
			}
		}
		
		this.Data.Id_OldValue(newValue);
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Id");
		}
    }

	function InfoPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Info");
		}
    }

	function ResultPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Result");
		}
    }

	function TimestampPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("Timestamp");
		}
    }

	function UserPropertySubscriptionHandler(newValue) {
		
		if (this.DirtyHandlerOn) {			
            this.Data.IsDirty(true);
		}
 
		if (this.notifyChangesOn) {		
			this.updateDependentCustomValues();
			this.onPropertyChanged("User");
		}
    }


	/*************************/
    /****** FACTORY **********/
    /*************************/

    Solid.Web.Model.DataObjects.GOLoginHistoryObjectFactory = {
        createNew: function (objectsDataSet, contextId) {
            // if there is a custom implementation => call it
			if (Solid.Web.Model.DataObjects.GOLoginHistoryObjectFactoryCustom) {
                return Solid.Web.Model.DataObjects.GOLoginHistoryObjectFactoryCustom.createNew(objectsDataSet, contextId);
            }
            else {
                var newObject = new Solid.Web.Model.DataObjects.GOLoginHistoryObject();

                if (contextId) {
                    newObject.contextIds.push(contextId);
                }

                if (objectsDataSet) {
                    objectsDataSet.AddObject(newObject);

					if (contextId)
						objectsDataSet.setContextIdsDirty(newObject.contextIds);

                }

                return newObject;
            }
        }
    };

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataObjects/GOLoginHistoryObject.js");

} ());