////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	// GOSecurityProvider server Component proxy
	Solid.Web.Model.Components.GOSecurityProviderProxy = function(rootObjectsDataSet) {
		var self = this;
		this.serviceUrl = Solid.Web.Application.BaseURL + "dataset/api/gosecurityprovider/";
		
		this.ObjectsDataSet = rootObjectsDataSet;


		/// ApproveUser Method
		/// Parameter email : 		 
		this.ApproveUserRequest = null;
		
		this.isApproveUserBusy = function() {
			return self.ApproveUserRequest != null && self.ApproveUserRequest.readyState != 4;
		};

		this.ApproveUser = function (configuration) {
            if (self.isApproveUserBusy())
                ApproveUserRequest.abort();
		
			ApproveUserRequest = $.ajax({
				url: self.serviceUrl + "approveuser",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					email: configuration.email 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.ApproveUser"));
				}
			});
		};		
		/// Authenticate Method
		/// Parameter username : 		/// Parameter password : 		/// Parameter useCookies : 		 
		this.AuthenticateRequest = null;
		
		this.isAuthenticateBusy = function() {
			return self.AuthenticateRequest != null && self.AuthenticateRequest.readyState != 4;
		};

		this.Authenticate = function (configuration) {
            if (self.isAuthenticateBusy())
                AuthenticateRequest.abort();
		
			AuthenticateRequest = $.ajax({
				url: self.serviceUrl + "authenticate",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					username: configuration.username, 
					password: configuration.password, 
					useCookies: configuration.useCookies 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.Authenticate"));
				}
			});
		};		
		/// AuthorizeNavigationTo Method
		/// Parameter nodeName : 		 
		this.AuthorizeNavigationToRequest = null;
		
		this.isAuthorizeNavigationToBusy = function() {
			return self.AuthorizeNavigationToRequest != null && self.AuthorizeNavigationToRequest.readyState != 4;
		};

		this.AuthorizeNavigationTo = function (configuration) {
            if (self.isAuthorizeNavigationToBusy())
                AuthorizeNavigationToRequest.abort();
		
			AuthorizeNavigationToRequest = $.ajax({
				url: self.serviceUrl + "authorizenavigationto",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					nodeName: configuration.nodeName 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.AuthorizeNavigationTo"));
				}
			});
		};		
		/// BlockUser Method
		/// Parameter email : 		/// Parameter block : 		 
		this.BlockUserRequest = null;
		
		this.isBlockUserBusy = function() {
			return self.BlockUserRequest != null && self.BlockUserRequest.readyState != 4;
		};

		this.BlockUser = function (configuration) {
            if (self.isBlockUserBusy())
                BlockUserRequest.abort();
		
			BlockUserRequest = $.ajax({
				url: self.serviceUrl + "blockuser",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					email: configuration.email, 
					block: configuration.block 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.BlockUser"));
				}
			});
		};		
		/// ChangePassword Method
		/// Parameter userId : 		/// Parameter oldPassword : 		/// Parameter newPassword : 		/// Parameter useCookies : 		 
		this.ChangePasswordRequest = null;
		
		this.isChangePasswordBusy = function() {
			return self.ChangePasswordRequest != null && self.ChangePasswordRequest.readyState != 4;
		};

		this.ChangePassword = function (configuration) {
            if (self.isChangePasswordBusy())
                ChangePasswordRequest.abort();
		
			ChangePasswordRequest = $.ajax({
				url: self.serviceUrl + "changepassword",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					userId: configuration.userId, 
					oldPassword: configuration.oldPassword, 
					newPassword: configuration.newPassword, 
					useCookies: configuration.useCookies 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.ChangePassword"));
				}
			});
		};		
		/// KeepAlive Method
		/// A void operation just used to renew the token and keep alive the client's session. 
		 
		this.KeepAliveRequest = null;
		
		this.isKeepAliveBusy = function() {
			return self.KeepAliveRequest != null && self.KeepAliveRequest.readyState != 4;
		};

		this.KeepAlive = function (configuration) {
            if (self.isKeepAliveBusy())
                KeepAliveRequest.abort();
		
			KeepAliveRequest = $.ajax({
				url: self.serviceUrl + "keepalive",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601" 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler();
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.KeepAlive"));
				}
			});
		};		
		/// LogOut Method
		/// Parameter useCookies : 		 
		this.LogOutRequest = null;
		
		this.isLogOutBusy = function() {
			return self.LogOutRequest != null && self.LogOutRequest.readyState != 4;
		};

		this.LogOut = function (configuration) {
            if (self.isLogOutBusy())
                LogOutRequest.abort();
		
			LogOutRequest = $.ajax({
				url: self.serviceUrl + "logout",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					useCookies: configuration.useCookies 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.LogOut"));
				}
			});
		};		
		/// LostPassword Method
		/// Parameter email : 		 
		this.LostPasswordRequest = null;
		
		this.isLostPasswordBusy = function() {
			return self.LostPasswordRequest != null && self.LostPasswordRequest.readyState != 4;
		};

		this.LostPassword = function (configuration) {
            if (self.isLostPasswordBusy())
                LostPasswordRequest.abort();
		
			LostPasswordRequest = $.ajax({
				url: self.serviceUrl + "lostpassword",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					email: configuration.email 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.LostPassword"));
				}
			});
		};		
		/// Register Method
		/// Parameter username : 		/// Parameter email : 		/// Parameter password : 		 
		this.RegisterRequest = null;
		
		this.isRegisterBusy = function() {
			return self.RegisterRequest != null && self.RegisterRequest.readyState != 4;
		};

		this.Register = function (configuration) {
            if (self.isRegisterBusy())
                RegisterRequest.abort();
		
			RegisterRequest = $.ajax({
				url: self.serviceUrl + "register",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					username: configuration.username, 
					email: configuration.email, 
					password: configuration.password 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.Register"));
				}
			});
		};		
		/// RegisterByEmail Method
		/// Parameter email : 		/// Parameter password : 		 
		this.RegisterByEmailRequest = null;
		
		this.isRegisterByEmailBusy = function() {
			return self.RegisterByEmailRequest != null && self.RegisterByEmailRequest.readyState != 4;
		};

		this.RegisterByEmail = function (configuration) {
            if (self.isRegisterByEmailBusy())
                RegisterByEmailRequest.abort();
		
			RegisterByEmailRequest = $.ajax({
				url: self.serviceUrl + "registerbyemail",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					email: configuration.email, 
					password: configuration.password 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.RegisterByEmail"));
				}
			});
		};		
		/// RegisterFull Method
		/// Parameter firstname : 		/// Parameter lastname : 		/// Parameter email : 		/// Parameter password : 		 
		this.RegisterFullRequest = null;
		
		this.isRegisterFullBusy = function() {
			return self.RegisterFullRequest != null && self.RegisterFullRequest.readyState != 4;
		};

		this.RegisterFull = function (configuration) {
            if (self.isRegisterFullBusy())
                RegisterFullRequest.abort();
		
			RegisterFullRequest = $.ajax({
				url: self.serviceUrl + "registerfull",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					firstname: configuration.firstname, 
					lastname: configuration.lastname, 
					email: configuration.email, 
					password: configuration.password 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.RegisterFull"));
				}
			});
		};		
		/// ResetPassword Method
		/// Parameter password : 		/// Parameter token : 		 
		this.ResetPasswordRequest = null;
		
		this.isResetPasswordBusy = function() {
			return self.ResetPasswordRequest != null && self.ResetPasswordRequest.readyState != 4;
		};

		this.ResetPassword = function (configuration) {
            if (self.isResetPasswordBusy())
                ResetPasswordRequest.abort();
		
			ResetPasswordRequest = $.ajax({
				url: self.serviceUrl + "resetpassword",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					password: configuration.password, 
					token: configuration.token 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.ResetPassword"));
				}
			});
		};		
		/// Unregister Method
		/// Parameter email : 		 
		this.UnregisterRequest = null;
		
		this.isUnregisterBusy = function() {
			return self.UnregisterRequest != null && self.UnregisterRequest.readyState != 4;
		};

		this.Unregister = function (configuration) {
            if (self.isUnregisterBusy())
                UnregisterRequest.abort();
		
			UnregisterRequest = $.ajax({
				url: self.serviceUrl + "unregister",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					email: configuration.email 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.Unregister"));
				}
			});
		};		
		/// ValidateRegistration Method
		/// Parameter token : 		 
		this.ValidateRegistrationRequest = null;
		
		this.isValidateRegistrationBusy = function() {
			return self.ValidateRegistrationRequest != null && self.ValidateRegistrationRequest.readyState != 4;
		};

		this.ValidateRegistration = function (configuration) {
            if (self.isValidateRegistrationBusy())
                ValidateRegistrationRequest.abort();
		
			ValidateRegistrationRequest = $.ajax({
				url: self.serviceUrl + "validateregistration",
				dataType: "json",
				type: "POST",
				data : {
					dateformat : "ISO8601", 
					token: configuration.token 
				},
				success: function (result) {
                    if (configuration.successHandler) {
						configuration.successHandler(result);
					}
				},
                error: function (jqXHR, textStatus, errorThrown) {
                  ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.componentError.replace(/%OPERATION%/g, "GOSecurityProvider.ValidateRegistration"));
				}
			});
		};		

	};		

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/Components/GOSecurityProviderProxy.js");
} ());
