////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	// Generic DataStore class.
	Solid.Web.Model.DataStores.DataStore = function(dataSet, entity) {		
		this.serviceUrl = Solid.Web.Application.BaseURL + "dataset/api/";
		this.entity = entity;
		
		this.loadRequest = null;
		this.countRequest = null;
		this.loadObjectCollectionRequest = null;

        this.dataSet = dataSet;
	};
		
    Solid.Web.Model.DataStores.DataStore.prototype.DeleteObject = function(configuration) {
		var self = this;

		// Don't bother doing a round-trip if we know in advance we're going to get denied
		if(!this.CheckAuthorizationForEntityAndMethod('delete')) {
		    if (console.warn)
				console.warn('Permission denied to delete object - call ignored');
		    return;
		}
		var pkUrl = "";
        for(var prop in configuration.pks)
		{
			pkUrl += "/";
			pkUrl += encodeURIComponent(GenerativeObjects.Web.DataToJSON(configuration.pks[prop]));
		}

        $.ajax({
            url: this.serviceUrl + this.entity + pkUrl,
            contentType: 'application/x-www-form-urlencoded',
            dataType: 'json',
			cache:  false, // prevent the queries being cached. 	
			type: 'DELETE',
            success: function (data) {
                if (configuration.successHandler)
                    configuration.successHandler();
            },
            error:  function (jqXHR, textStatus, errorThrown) {
                ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.deleteError.replace(/%ENTITY%/g, self.entity));
            }
        });
    };
	
    Solid.Web.Model.DataStores.DataStore.prototype.LoadObject = function(configuration) {
		var self = this;

		// Don't bother doing a round-trip if we know in advance we're going to get denied
		if(!this.CheckAuthorizationForEntityAndMethod('byid')){
		    if (console.warn)
				console.warn('Permission denied to load object - call ignored');
		    return;
		}
			
      if (this.loadRequest != null && this.loadRequest.readyState != 4)
            this.loadRequest.abort();

		var queryString = "?dateformat=ISO8601";
		queryString += configuration.include !== undefined ? ("&include=" + encodeURIComponent(configuration.include) ) : "";
		var pkUrl = "";

        for(var prop in configuration.pks)
		{
			pkUrl += "/";
			pkUrl += encodeURIComponent(GenerativeObjects.Web.DataToJSON(configuration.pks[prop]));
		}

        this.loadRequest = $.ajax({
            url: this.serviceUrl + this.entity + "/byid" + pkUrl + queryString,
            contentType: 'application/x-www-form-urlencoded',
            dataType: 'json',
			cache:  false, // prevent the queries being cached. TODO : rather manage the expiration date on the server side, to not bloat the user hard drive
            type: 'GET',
            success: function (data) {
				var result = Solid.Web.Model.DataStores.MapJSONDataToDataSet(self.dataSet, data, configuration.contextId, self.entity);
				if (configuration.successHandler)
					configuration.successHandler(result[0]);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.getError.replace(/%ENTITY%/g, self.entity));
            }
        });
    };

    Solid.Web.Model.DataStores.DataStore.prototype.CountObjects = function (configuration) {
		var self = this;

		// Don't bother doing a round-trip if we know in advance we're going to get denied
		if(!this.CheckAuthorizationForEntityAndMethod('count')){
		    if (console.warn)
				console.warn('Permission denied to count objects - call ignored');
		    return;
		}

		var queryStringParts = [];
			
		if (configuration.filterPredicate !== undefined) 
			queryStringParts.push("filter=" + encodeURIComponent(configuration.filterPredicate));
			
		if (configuration.filterParameters !== undefined)
			queryStringParts.push("filterParameters=" + encodeURIComponent(configuration.filterParameters));

		var queryString = "";

		if (queryStringParts.length > 0)
			queryString = "?" + queryStringParts.join("&");
				
		this.countRequest = $.ajax({
            url: self.serviceUrl + self.entity + "/count" + queryString,
			contentType: 'application/x-www-form-urlencoded',
	        dataType: 'json',
			cache:  false, // prevent the queries being cached. TODO : rather manage the expiration date on the server side, to not bloat the user hard drive
            type: 'GET',
            success: function (data) {
                if (configuration.successHandler)
                    configuration.successHandler(data);

            },
            error: function (jqXHR, textStatus, errorThrown) {
                ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.countError.replace(/%ENTITY%/g, self.entity));
            }
        });
    };

	Solid.Web.Model.DataStores.DataStore.prototype.SaveObject = function(configuration) {
		var self = this;

		// Don't bother doing a round-trip if we know in advance we're going to get denied
		if(!this.CheckAuthorizationForEntityAndMethod('save')){
		    if (console.warn)
				console.warn('Permission denied to save object - call ignored');
		    return;
		}

      $.ajax({
            url: this.serviceUrl + this.entity,
            data: {
				entity : JSON.stringify(Solid.Web.Model.DataStores.MapDataSetToJSON(configuration.objectToSave, configuration.contextId)),
				include : configuration.include,
				dateformat : "ISO8601"	
			},
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded',
			cache:  false, // prevent the queries being cached. TODO : rather manage the expiration date on the server side, to not bloat the user hard drive
            type: 'POST',
            success: function (data) {
				self.dataSet.RemoveObjectsMarkedForDeletion();
				var result = Solid.Web.Model.DataStores.MapJSONDataToDataSet(self.dataSet, data, configuration.contextId, self.entity);
				if (configuration.successHandler)
					configuration.successHandler(result[0]);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.saveError.replace(/%ENTITY%/g, self.entity));
            }
        });
    };

    Solid.Web.Model.DataStores.DataStore.prototype.LoadObjectCollection = function(configuration) {
		var self = this;

		// Don't bother doing a round-trip if we know in advance we're going to get denied
		if(!this.CheckAuthorizationForEntityAndMethod('list')){
		    if (console.warn)
				console.warn('Permission denied to load objects - call ignored');
		    return;
		}

		var queryStringParts = [];
		queryStringParts.push("dateformat=ISO8601");
			
		if (configuration.include !== undefined) 
			queryStringParts.push("include=" + encodeURIComponent(configuration.include));

		if (configuration.filterPredicate !== undefined) 
			queryStringParts.push("filter=" + encodeURIComponent(configuration.filterPredicate));

		if (configuration.filterParameters !== undefined) 
			queryStringParts.push("filterParameters=" + encodeURIComponent(configuration.filterParameters));

		if (configuration.pageSize !== undefined) 
			queryStringParts.push("pageSize=" + configuration.pageSize);

		if (configuration.pageNumber !== undefined) 
			queryStringParts.push("pageNumber=" + configuration.pageNumber);
			
		if (configuration.sortOrder !== undefined) 
			queryStringParts.push("sortOrder=" + configuration.sortOrder);
			
		if (configuration.sortColumn !== undefined) 
			queryStringParts.push("sortColumn=" + encodeURIComponent(configuration.sortColumn));
			
		var queryString = "";

		if (queryStringParts.length > 0)
			queryString = "?" + queryStringParts.join("&");

        this.loadObjectCollectionRequest = $.ajax({
            url: this.serviceUrl + this.entity + "/list" + queryString,
			contentType: 'application/x-www-form-urlencoded',
            dataType: 'json',
			cache:  false, // prevent the queries being cached. TODO : rather manage the expiration date on the server side, to not bloat the user hard drive
            type: 'GET',
            success: function (data) {
				var result = Solid.Web.Model.DataStores.MapJSONDataToDataSet(self.dataSet, data, configuration.contextId, self.entity);
				if (configuration.successHandler)
					configuration.successHandler(result);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                ApplicationController.errorHandler(jqXHR, errorThrown, configuration.errorHandler, Solid.Web.Messages.getCollectionError.replace(/%ENTITY%/g, self.entity));
            }
        });
    };	



	// This is to check if some operations are blocked
    // If we know so, we don't bother running them (and get a 401)
    Solid.Web.Model.DataStores.DataStore.prototype.CheckAuthorizationForEntityAndMethod = function (method) {
        // if happens before initialization of view model => skip the call
		if (!ApplicationController.viewModel)
            return true;

        var currentClaims = ApplicationController.viewModel.security.currentUserClaims() == null ? null : ApplicationController.viewModel.security.currentUserClaims();
            
         if (currentClaims !== null) {
            var currentRoles = currentClaims.role.split(',');
            switch (method) {
                case 'list':
                case 'byid':
                case 'count':
                    {
                        switch (this.entity) {
							case 'gorole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'visitedplace':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gogrouprole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'place':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'userprofile':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'location':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'placetolocation':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gouser':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gogroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gouserrole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'country':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gousergroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							case 'gologinhistory':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								} 
								break;
							default:
								return false;
                        }
                    }
                    break;
                case 'delete':
                    {
                        switch (this.entity) {
							case 'gorole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'visitedplace':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gogrouprole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'place':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'userprofile':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'location':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'placetolocation':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gouser':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gogroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gouserrole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'country':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gousergroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gologinhistory':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
                          default:
	                          return false;
                        }
                    }
                    break;
                case 'save':
                    {
                        switch (this.entity) {
							case 'gorole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'visitedplace':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gogrouprole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'place':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'userprofile':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'location':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'placetolocation':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gouser':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gogroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gouserrole':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'country':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gousergroup':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
							case 'gologinhistory':
								if(currentRoles.indexOf('User') > -1 || currentRoles.indexOf('Administrator') > -1) {
									return true;
								}
								break;
                          default:
								return false;
                        }
                    }
                    break;
                default:
                    return false;
            }
        }
        return false;
    };
 
} ());