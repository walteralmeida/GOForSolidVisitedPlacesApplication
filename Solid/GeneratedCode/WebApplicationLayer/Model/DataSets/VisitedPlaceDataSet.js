
////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {	
	'use strict';

	// VisitedPlace data set. Container for all VisitedPlace objects
	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet = function (rootDataSet) {
		var self = this;

        this._rootObjectDataSet = rootDataSet;
		// Collection holding all VisitedPlace objects for current dataset - key : internal object id - value : object
		this.visitedPlaceObjects = {};
	
		// Mapping between entity primary key and objects internal id  - key : primary key(s) - value : internal object id
		this.visitedPlaceObjectInternalIds = {};
		
		this.fkIndexes = {};
		
		// Index to quickly find all VisitedPlace with a given country foreign key
		this.fkIndexes.country = {};

		
		// Index to quickly find all VisitedPlace with a given userProfile foreign key
		this.fkIndexes.userProfile = {};

		
	};

	/***************************
	******** METHODS ***********
	***************************/

    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetRootObjectDataSet = function () {
        return this._rootObjectDataSet;
    };
		
    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.SetRootObjectDataSet = function (dataSet) {
        this._rootObjectDataSet = dataSet;
    };

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.Clone = function (rootDataSet) {
		var clone = new Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet(rootDataSet);
		if (!this.visitedPlaceObjects)
			return clone;

		for (var key in this.visitedPlaceObjects) {
			var objectClone = this.visitedPlaceObjects[key].Clone();
			clone.visitedPlaceObjects = objectClone;
		}
				
		clone.visitedPlaceObjectInternalIds = {};

		for (var key0 in this.visitedPlaceObjectInternalIds) {
			clone.visitedPlaceObjectInternalIds[key0] = this.visitedPlaceObjectInternalIds[key0];
		}
		for (var fk0 in this.fkIndexes.country) {
			clone.fkIndexes.country[fk0] = this.fkIndexes.country[fk0];	
		}
		for (var fk0 in this.fkIndexes.userProfile) {
			clone.fkIndexes.userProfile[fk0] = this.fkIndexes.userProfile[fk0];	
		}
			
		return clone;
	};

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.AddOrReplaceObject = function (objectToAdd) {
		this.AddObject(objectToAdd, true);	
	};

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.AddObject = function (objectToAdd, replaceIfExists) {
		var existingObject = this.GetObject(objectToAdd);

        if (!replaceIfExists && existingObject)
            throw new Error("Object already exists");

		var newInternalId = 0;
			
		if (existingObject) {
			// We copy values instead of just replacing the object to make sure we don't loose existing ko notifications
			newInternalId = existingObject.Data.InternalObjectId();
			objectToAdd.Data.InternalObjectId(newInternalId);
			// we merge the contextIds because the objects may be associated to several context Ids
			for (var i = 0; i < existingObject.contextIds.length; i++) {
				var exist = false;
				for (var j = 0; j < objectToAdd.contextIds.length; j++) {
					if (existingObject.contextIds[i].join() === objectToAdd.contextIds[j].join()) {
						exist = true;
						break;
					}
				}

				if (exist === false)
					objectToAdd.contextIds.push(existingObject.contextIds[i]);
			}

			existingObject.CopyValuesFrom(objectToAdd);
		}
		else {
			newInternalId = this._rootObjectDataSet.getNextNewObjectId();
			objectToAdd.Data.InternalObjectId(newInternalId);
			this.visitedPlaceObjects[newInternalId] = objectToAdd;
		}
			
		if (objectToAdd.Data.IsNew() === false && !existingObject) {
			this.visitedPlaceObjectInternalIds[objectToAdd.Data.Id()] = newInternalId;
		}
		// Update the Country FK Index 
		if (objectToAdd.Data.CountryURI()) {			
			this.fkIndexes.country[objectToAdd.Data.CountryURI()] = this.fkIndexes.country[objectToAdd.Data.CountryURI()] || {};
			this.fkIndexes.country[objectToAdd.Data.CountryURI()][newInternalId] = true;
		}
		// Update the UserProfile FK Index 
		if (objectToAdd.Data.UserProfileUri()) {			
			this.fkIndexes.userProfile[objectToAdd.Data.UserProfileUri()] = this.fkIndexes.userProfile[objectToAdd.Data.UserProfileUri()] || {};
			this.fkIndexes.userProfile[objectToAdd.Data.UserProfileUri()][newInternalId] = true;
		}
	};
	// Update the Country FK Index 
	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.UpdateCountryFKIndex = function (old_CountryURI, new_CountryURI, parentEntity) {
		if (old_CountryURI !== undefined && old_CountryURI !== null && old_CountryURI !== "" && this.fkIndexes.country[old_CountryURI] && this.fkIndexes.country[old_CountryURI][parentEntity.Data.InternalObjectId()]) {
			delete this.fkIndexes.country[old_CountryURI][parentEntity.Data.InternalObjectId()];
		}

        if (new_CountryURI !== undefined && new_CountryURI !== null && new_CountryURI !== "") {
			this.fkIndexes.country[new_CountryURI] = this.fkIndexes.country[new_CountryURI] || {};
			this.fkIndexes.country[new_CountryURI][parentEntity.Data.InternalObjectId()] = true;
        }                
    };                        
	// Update the UserProfile FK Index 
	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.UpdateUserProfileFKIndex = function (old_UserProfileUri, new_UserProfileUri, parentEntity) {
		if (old_UserProfileUri !== undefined && old_UserProfileUri !== null && old_UserProfileUri !== "" && this.fkIndexes.userProfile[old_UserProfileUri] && this.fkIndexes.userProfile[old_UserProfileUri][parentEntity.Data.InternalObjectId()]) {
			delete this.fkIndexes.userProfile[old_UserProfileUri][parentEntity.Data.InternalObjectId()];
		}

        if (new_UserProfileUri !== undefined && new_UserProfileUri !== null && new_UserProfileUri !== "") {
			this.fkIndexes.userProfile[new_UserProfileUri] = this.fkIndexes.userProfile[new_UserProfileUri] || {};
			this.fkIndexes.userProfile[new_UserProfileUri][parentEntity.Data.InternalObjectId()] = true;
        }                
    };                        
		
    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.RemoveObject = function (objectToRemove) {
        if (!this.visitedPlaceObjects)
            return;

		var objectToRemoveInternalId = null;
			
		if (objectToRemove.Data.IsNew() === true) {
			objectToRemoveInternalId = objectToRemove.Data.InternalObjectId();
		}
		else {
			if (!this.visitedPlaceObjectInternalIds[objectToRemove.Data.Id()]) 			
				return;

			objectToRemoveInternalId = this.visitedPlaceObjectInternalIds[objectToRemove.Data.Id()];
		}
			
		if (!objectToRemoveInternalId || !this.visitedPlaceObjects[objectToRemoveInternalId])			
			return; //object not in dataset => return
			
		this.visitedPlaceObjects[objectToRemoveInternalId].release();
		delete this.visitedPlaceObjects[objectToRemoveInternalId];
		
		if (objectToRemove.Data.IsNew() === false) {
			delete this.visitedPlaceObjectInternalIds[objectToRemove.Data.Id()];
		}

			// Delete the Country FK Index 
		if (objectToRemove.Data.CountryURI() && this.fkIndexes.country[objectToRemove.Data.CountryURI()] && this.fkIndexes.country[objectToRemove.Data.CountryURI()][objectToRemoveInternalId])
			delete this.fkIndexes.country[objectToRemove.Data.CountryURI()][objectToRemoveInternalId];
			// Delete the UserProfile FK Index 
		if (objectToRemove.Data.UserProfileUri() && this.fkIndexes.userProfile[objectToRemove.Data.UserProfileUri()] && this.fkIndexes.userProfile[objectToRemove.Data.UserProfileUri()][objectToRemoveInternalId])
			delete this.fkIndexes.userProfile[objectToRemove.Data.UserProfileUri()][objectToRemoveInternalId];
	};

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetObjectByInternalId = function (internalObjectId, includeHierarchy) {
        if (this.visitedPlaceObjects[internalObjectId])
			return this.visitedPlaceObjects[internalObjectId];		
		
		if(includeHierarchy) {
			// No hierarchy, nothing has been generated, unused bit of code
		}

		return null;
	};

 	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetObjectByPK = function(id) {
		if (this.visitedPlaceObjects[this.visitedPlaceObjectInternalIds[id]]) {			
			return this.visitedPlaceObjects[this.visitedPlaceObjectInternalIds[id]];
		}

		return null;
	};

    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetObject = function (objectToGet) {
	    if (!this.visitedPlaceObjects)
            return null;

		var objectToGetInternalId = null;

		if (objectToGet.Data.IsNew() === true) {
			objectToGetInternalId = objectToGet.Data.InternalObjectId();
		} else {
			if (!this.visitedPlaceObjectInternalIds[objectToGet.Data.Id()]) 			
				return null;
			objectToGetInternalId = this.visitedPlaceObjectInternalIds[objectToGet.Data.Id()];
		}

		return objectToGetInternalId === null ? null : this.visitedPlaceObjects[objectToGetInternalId];
    };

    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetObjectsMarkedForDeletion = function () {
        if (!this.visitedPlaceObjects)
            return [];

		var toReturn = [];
			
		for (var prop in this.visitedPlaceObjects) {
			if (this.visitedPlaceObjects[prop].Data.IsMarkedForDeletion()) {
				toReturn.push(this.visitedPlaceObjects[prop]);
			}
		}

		return toReturn;
    };

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetVisitedPlaceItemsForCountry = function (country) {
		var result = [];

		if (country.Data.IsNew()) {
            for (var prop in this.visitedPlaceObjects) {
                if (this.visitedPlaceObjects[prop].Data._country_NewObjectId() === country.Data.InternalObjectId())
                    result.push(this.visitedPlaceObjects[prop]);
            }
        } else {
			if (this.fkIndexes.country[country.Data.URI()]){
				for (var internalId in this.fkIndexes.country[country.Data.URI()])
					result.push(this.visitedPlaceObjects[internalId]);
			}
		}

		return result;
	};

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetVisitedPlaceItemsForUserProfile = function (userProfile) {
		var result = [];

		if (userProfile.Data.IsNew()) {
            for (var prop in this.visitedPlaceObjects) {
                if (this.visitedPlaceObjects[prop].Data._userProfile_NewObjectId() === userProfile.Data.InternalObjectId())
                    result.push(this.visitedPlaceObjects[prop]);
            }
        } else {
			if (this.fkIndexes.userProfile[userProfile.Data.Uri()]){
				for (var internalId in this.fkIndexes.userProfile[userProfile.Data.Uri()])
					result.push(this.visitedPlaceObjects[internalId]);
			}
		}

		return result;
	};

	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.GetRelatedObjects = function (rootObject, relationName) {
		return null;
	};
		
	Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.cleanContext = function (thecontextId) {
		for (var prop in this.visitedPlaceObjects) {
			var shouldDelete = true;

			if (this.visitedPlaceObjects[prop].contextIds.length !== 0) {
				var contextIdsToKeep = [],
					len = this.visitedPlaceObjects[prop].contextIds.length;
				for (var i = 0; i < len; i++) {
					var contextId = this.visitedPlaceObjects[prop].contextIds[i];

					if (contextId.length < thecontextId.length) {
						contextIdsToKeep.push(contextId);
 					} else {										
						for (var j=0; j < thecontextId.length; j++) {
							if (contextId[j] !== thecontextId[j]) {
								contextIdsToKeep.push(contextId);
								break;
							}
						}
					}
				}
					
				this.visitedPlaceObjects[prop].contextIds	= contextIdsToKeep;
					
				shouldDelete = (contextIdsToKeep.length === 0);
			}
				 				
			if (shouldDelete === true) {
				this.RemoveObject(this.visitedPlaceObjects[prop]);				
			}
		}
	};
		
    Solid.Web.Model.DataSets.visitedPlaceObjectsDataSet.prototype.Merge = function (dataSetToMerge) {
		if (!dataSetToMerge.visitedPlaceObjects)
			return;
            					
		for (prop in dataSetToMerge.visitedPlaceObjects) {
			if (dataSetToMerge.visitedPlaceObjects[prop].Data.IsNew() === true)
                throw Error("Can't merge data sets with new objects");
				
			var objectToMerge = dataSetToMerge.visitedPlaceObjects[prop].Clone();
			objectToMerge.Data.InternalObjectId(null);
			objectToMerge.ObjectsDataSet = this._rootObjectDataSet;
            this._rootObjectDataSet.AddOrReplaceObject(objectToMerge);
        }
    };
		

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataSets/VisitedPlaceDataSet.js");
} ());