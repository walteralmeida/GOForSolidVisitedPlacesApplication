////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict';

	// Global model data set - aggregate all business objects
	Solid.Web.Model.DataSets.ObjectsDataSet = function () {
		var self = this;
		
		this.IsInitialized = false;
		this.currentNewObjectId = 0;

		// Dealing with contexts 
		this.dirtyContextIds = {};
		this.contextIdsStatusChangeHandlers = [];
	};


	/*******************************************
	******** DATASET GETTERS/SETTERS ***********
	********************************************/

	// All entities datasets getters
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getCountryObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.countryObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.countryObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.countryObjectsDataSet !== undefined) {
			this.countryObjectsDataSet = new Solid.Web.Model.DataSets.countryObjectsDataSet(this);
		}

		return this.countryObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOGroupObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOGroupObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOGroupObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOGroupObjectsDataSet !== undefined) {
			this.gOGroupObjectsDataSet = new Solid.Web.Model.DataSets.gOGroupObjectsDataSet(this);
		}

		return this.gOGroupObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOGroupRoleObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOGroupRoleObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOGroupRoleObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOGroupRoleObjectsDataSet !== undefined) {
			this.gOGroupRoleObjectsDataSet = new Solid.Web.Model.DataSets.gOGroupRoleObjectsDataSet(this);
		}

		return this.gOGroupRoleObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOLoginHistoryObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOLoginHistoryObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOLoginHistoryObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOLoginHistoryObjectsDataSet !== undefined) {
			this.gOLoginHistoryObjectsDataSet = new Solid.Web.Model.DataSets.gOLoginHistoryObjectsDataSet(this);
		}

		return this.gOLoginHistoryObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGORoleObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gORoleObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gORoleObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gORoleObjectsDataSet !== undefined) {
			this.gORoleObjectsDataSet = new Solid.Web.Model.DataSets.gORoleObjectsDataSet(this);
		}

		return this.gORoleObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOUserObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOUserObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOUserObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOUserObjectsDataSet !== undefined) {
			this.gOUserObjectsDataSet = new Solid.Web.Model.DataSets.gOUserObjectsDataSet(this);
		}

		return this.gOUserObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOUserGroupObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOUserGroupObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOUserGroupObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOUserGroupObjectsDataSet !== undefined) {
			this.gOUserGroupObjectsDataSet = new Solid.Web.Model.DataSets.gOUserGroupObjectsDataSet(this);
		}

		return this.gOUserGroupObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getGOUserRoleObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.gOUserRoleObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.gOUserRoleObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.gOUserRoleObjectsDataSet !== undefined) {
			this.gOUserRoleObjectsDataSet = new Solid.Web.Model.DataSets.gOUserRoleObjectsDataSet(this);
		}

		return this.gOUserRoleObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getLocationObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.locationObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.locationObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.locationObjectsDataSet !== undefined) {
			this.locationObjectsDataSet = new Solid.Web.Model.DataSets.locationObjectsDataSet(this);
		}

		return this.locationObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getPlaceObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.placeObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.placeObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.placeObjectsDataSet !== undefined) {
			this.placeObjectsDataSet = new Solid.Web.Model.DataSets.placeObjectsDataSet(this);
		}

		return this.placeObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getPlaceToLocationObjectsDataSet = function () {
		// Solid.Web.Model.DataSets.placeToLocationObjectsDataSet can be undefined if script file not already loaded
		if (typeof this.placeToLocationObjectsDataSet === "undefined" && Solid.Web.Model.DataSets.placeToLocationObjectsDataSet !== undefined) {
			this.placeToLocationObjectsDataSet = new Solid.Web.Model.DataSets.placeToLocationObjectsDataSet(this);
		}

		return this.placeToLocationObjectsDataSet;			
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetAllObjectsDataSets = function () {
		var toReturn = [];
			
		if (this.countryObjectsDataSet) {
			toReturn.push(this.countryObjectsDataSet);			
		}	

		if (this.gOGroupObjectsDataSet) {
			toReturn.push(this.gOGroupObjectsDataSet);			
		}	

		if (this.gOGroupRoleObjectsDataSet) {
			toReturn.push(this.gOGroupRoleObjectsDataSet);			
		}	

		if (this.gOLoginHistoryObjectsDataSet) {
			toReturn.push(this.gOLoginHistoryObjectsDataSet);			
		}	

		if (this.gORoleObjectsDataSet) {
			toReturn.push(this.gORoleObjectsDataSet);			
		}	

		if (this.gOUserObjectsDataSet) {
			toReturn.push(this.gOUserObjectsDataSet);			
		}	

		if (this.gOUserGroupObjectsDataSet) {
			toReturn.push(this.gOUserGroupObjectsDataSet);			
		}	

		if (this.gOUserRoleObjectsDataSet) {
			toReturn.push(this.gOUserRoleObjectsDataSet);			
		}	

		if (this.locationObjectsDataSet) {
			toReturn.push(this.locationObjectsDataSet);			
		}	

		if (this.placeObjectsDataSet) {
			toReturn.push(this.placeObjectsDataSet);			
		}	

		if (this.placeToLocationObjectsDataSet) {
			toReturn.push(this.placeToLocationObjectsDataSet);			
		}	

		return toReturn;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetObjectsDataSetsInHierarchy = function (entityType) {
		var toReturn = [];
			
		if (entityType === "Country") {
			if (this.countryObjectsDataSet) {
				toReturn.push(this.countryObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOGroup") {
			if (this.gOGroupObjectsDataSet) {
				toReturn.push(this.gOGroupObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOGroupRole") {
			if (this.gOGroupRoleObjectsDataSet) {
				toReturn.push(this.gOGroupRoleObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOLoginHistory") {
			if (this.gOLoginHistoryObjectsDataSet) {
				toReturn.push(this.gOLoginHistoryObjectsDataSet);			
			}	
		}       
		else if (entityType === "GORole") {
			if (this.gORoleObjectsDataSet) {
				toReturn.push(this.gORoleObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOUser") {
			if (this.gOUserObjectsDataSet) {
				toReturn.push(this.gOUserObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOUserGroup") {
			if (this.gOUserGroupObjectsDataSet) {
				toReturn.push(this.gOUserGroupObjectsDataSet);			
			}	
		}       
		else if (entityType === "GOUserRole") {
			if (this.gOUserRoleObjectsDataSet) {
				toReturn.push(this.gOUserRoleObjectsDataSet);			
			}	
		}       
		else if (entityType === "Location") {
			if (this.locationObjectsDataSet) {
				toReturn.push(this.locationObjectsDataSet);			
			}	
		}       
		else if (entityType === "Place") {
			if (this.placeObjectsDataSet) {
				toReturn.push(this.placeObjectsDataSet);			
			}	
		}       
		else if (entityType === "PlaceToLocation") {
			if (this.placeToLocationObjectsDataSet) {
				toReturn.push(this.placeToLocationObjectsDataSet);			
			}	
		}       
		return toReturn;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetEntityObjectsDataSet = function(entityType) {
		if (entityType === "Country") {		
			return this.getCountryObjectsDataSet();
		}
		else if (entityType === "GOGroup") {		
			return this.getGOGroupObjectsDataSet();
		}
		else if (entityType === "GOGroupRole") {		
			return this.getGOGroupRoleObjectsDataSet();
		}
		else if (entityType === "GOLoginHistory") {		
			return this.getGOLoginHistoryObjectsDataSet();
		}
		else if (entityType === "GORole") {		
			return this.getGORoleObjectsDataSet();
		}
		else if (entityType === "GOUser") {		
			return this.getGOUserObjectsDataSet();
		}
		else if (entityType === "GOUserGroup") {		
			return this.getGOUserGroupObjectsDataSet();
		}
		else if (entityType === "GOUserRole") {		
			return this.getGOUserRoleObjectsDataSet();
		}
		else if (entityType === "Location") {		
			return this.getLocationObjectsDataSet();
		}
		else if (entityType === "Place") {		
			return this.getPlaceObjectsDataSet();
		}
		else if (entityType === "PlaceToLocation") {		
			return this.getPlaceToLocationObjectsDataSet();
		}
		return null;
	};


	/*******************************************
	******** OBJECTS GETTERS/SETTERS ***********
	********************************************/
	
	// Accessors for objects collections inside entities data set
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.countryObjects = function () {
		return this.getCountryObjectsDataSet().countryObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOGroupObjects = function () {
		return this.getGOGroupObjectsDataSet().gOGroupObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOGroupRoleObjects = function () {
		return this.getGOGroupRoleObjectsDataSet().gOGroupRoleObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOLoginHistoryObjects = function () {
		return this.getGOLoginHistoryObjectsDataSet().gOLoginHistoryObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gORoleObjects = function () {
		return this.getGORoleObjectsDataSet().gORoleObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOUserObjects = function () {
		return this.getGOUserObjectsDataSet().gOUserObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOUserGroupObjects = function () {
		return this.getGOUserGroupObjectsDataSet().gOUserGroupObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.gOUserRoleObjects = function () {
		return this.getGOUserRoleObjectsDataSet().gOUserRoleObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.locationObjects = function () {
		return this.getLocationObjectsDataSet().locationObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.placeObjects = function () {
		return this.getPlaceObjectsDataSet().placeObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.placeToLocationObjects = function () {
		return this.getPlaceToLocationObjectsDataSet().placeToLocationObjects;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.getNextNewObjectId = function() {		
		this.currentNewObjectId++;
        return this.currentNewObjectId;
	}
			
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.AddObjectIfDoesNotExist = function (objectToAdd) {
		if (this.GetObject(objectToAdd) === null)
			this.AddObject(objectToAdd);
    }

    Solid.Web.Model.DataSets.ObjectsDataSet.prototype.AddOrReplaceObject = function (objectToAdd) {
        this.AddObject(objectToAdd, true);
    }

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.AddObject = function(objectToAdd, replaceIfExists) {
		this.EnsureInitialized();			
		this.GetEntityObjectsDataSet(objectToAdd._objectType).AddObject(objectToAdd, replaceIfExists);
			
        if (this != objectToAdd.ObjectsDataSet && objectToAdd.ObjectsDataSet)
            throw Error("this object is already part of another dataset");
            
        objectToAdd.ObjectsDataSet = this;

        if (objectToAdd.Data.IsDirty() === true) {
            this.setContextIdsDirty(objectToAdd.contextIds);
		}
    };

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.RemoveObject = function (objectToRemove) {
		this.EnsureInitialized();
		this.GetEntityObjectsDataSet(objectToRemove._objectType).RemoveObject(objectToRemove);
	};

    Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetObjectByInternalId = function (objectBaseType, internalObjectId) {
		this.EnsureInitialized();
		var toReturn = null;
			
		var dataSets = this.GetObjectsDataSetsInHierarchy(objectBaseType);
			
		for (var i=0; i < dataSets.length; i++) {
			toReturn = dataSets[i].GetObjectByInternalId(internalObjectId);
			if (toReturn)
				return toReturn;
		}
			
		return toReturn;
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetObject = function (objectToGet) {
		this.EnsureInitialized();
		var toReturn = null;		
		var dataSets = this.GetObjectsDataSetsInHierarchy(objectToGet._objectType);
			
		for (var i=0; i < dataSets.length; i++) {
			toReturn = dataSets[i].GetObject(objectToGet);
			if (toReturn)
				return toReturn;
		}
			
		return toReturn;
    };

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetRelatedObjects = function (rootObject, relationName) {
		this.EnsureInitialized();		
		return this.GetEntityObjectsDataSet(rootObject._objectType).GetRelatedObjects(rootObject, relationName);
    };

	// Returns all the objects of a given type, including those in the hierarchy
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetObjectsInHierarchyWithType = function (entityType) {
		var toReturn = {};
			
		if (entityType === "Country") {
			if (this.countryObjectsDataSet) {
				toReturn = $.extend(toReturn, this.countryObjectsDataSet.countryObjects);			
			}	
		}       
		else if (entityType === "GOGroup") {
			if (this.gOGroupObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOGroupObjectsDataSet.gOGroupObjects);			
			}	
		}       
		else if (entityType === "GOGroupRole") {
			if (this.gOGroupRoleObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOGroupRoleObjectsDataSet.gOGroupRoleObjects);			
			}	
		}       
		else if (entityType === "GOLoginHistory") {
			if (this.gOLoginHistoryObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOLoginHistoryObjectsDataSet.gOLoginHistoryObjects);			
			}	
		}       
		else if (entityType === "GORole") {
			if (this.gORoleObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gORoleObjectsDataSet.gORoleObjects);			
			}	
		}       
		else if (entityType === "GOUser") {
			if (this.gOUserObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOUserObjectsDataSet.gOUserObjects);			
			}	
		}       
		else if (entityType === "GOUserGroup") {
			if (this.gOUserGroupObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOUserGroupObjectsDataSet.gOUserGroupObjects);			
			}	
		}       
		else if (entityType === "GOUserRole") {
			if (this.gOUserRoleObjectsDataSet) {
				toReturn = $.extend(toReturn, this.gOUserRoleObjectsDataSet.gOUserRoleObjects);			
			}	
		}       
		else if (entityType === "Location") {
			if (this.locationObjectsDataSet) {
				toReturn = $.extend(toReturn, this.locationObjectsDataSet.locationObjects);			
			}	
		}       
		else if (entityType === "Place") {
			if (this.placeObjectsDataSet) {
				toReturn = $.extend(toReturn, this.placeObjectsDataSet.placeObjects);			
			}	
		}       
		else if (entityType === "PlaceToLocation") {
			if (this.placeToLocationObjectsDataSet) {
				toReturn = $.extend(toReturn, this.placeToLocationObjectsDataSet.placeToLocationObjects);			
			}	
		}       
			
		return toReturn;
	};

    Solid.Web.Model.DataSets.ObjectsDataSet.prototype.GetObjectsMarkedForDeletion = function() {
		this.EnsureInitialized();			
		var result = [];
		var dataSets = this.GetAllObjectsDataSets();
			
		for (var i=0; i < dataSets.length; i++) {
			var objects = dataSets[i].GetObjectsMarkedForDeletion();
				
			for (var j=0; j < objects.length; j++) {
				result.push(objects[j]);
			}
		}
			
		return result;
    };

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.RemoveObjectsMarkedForDeletion = function () {
		var toDelete = this.GetObjectsMarkedForDeletion();
		for (var i = 0; i < toDelete.length; i++) {
			this.RemoveObject(toDelete[i]);
		}
	};

	/************************************
	******** CONTEXT HANDLING ***********
	*************************************/

	
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.AddContextIdsStatusChangeHandler = function (handler) {
		this.contextIdsStatusChangeHandlers.push(handler);
	};
		
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.RemoveContextIdsStatusChangeHandler = function (handler) {
		for (var i = 0; i < this.contextIdsStatusChangeHandlers.length; i++) {
			if (this.contextIdsStatusChangeHandlers[i] === handler) {
				this.contextIdsStatusChangeHandlers.splice(i,1);
				i--;
			}
		}
	};
		
	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.fireContextIdsStatusChangeEvent = function() {
		for (var i = 0; i < this.contextIdsStatusChangeHandlers.length; i++) {
			this.contextIdsStatusChangeHandlers[i]();
		}
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.cleanContext = function (contextId) {
		if (this.countryObjectsDataSet) {
			this.countryObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOGroupObjectsDataSet) {
			this.gOGroupObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOGroupRoleObjectsDataSet) {
			this.gOGroupRoleObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOLoginHistoryObjectsDataSet) {
			this.gOLoginHistoryObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gORoleObjectsDataSet) {
			this.gORoleObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOUserObjectsDataSet) {
			this.gOUserObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOUserGroupObjectsDataSet) {
			this.gOUserGroupObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.gOUserRoleObjectsDataSet) {
			this.gOUserRoleObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.locationObjectsDataSet) {
			this.locationObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.placeObjectsDataSet) {
			this.placeObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
		if (this.placeToLocationObjectsDataSet) {
			this.placeToLocationObjectsDataSet.cleanContext(contextId);
		}

		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
   };

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.setContextIdsDirty = function (contextIds) {
		var hasChanges = false;

		for (var i = 0; i < contextIds.length; i++) {
			if (!this.dirtyContextIds[contextIds[i]]) {
				this.dirtyContextIds[contextIds[i]] = true;
				hasChanges = true;
			}
		}

		if (hasChanges)
			this.fireContextIdsStatusChangeEvent();
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.resetContextIdDirty = function (contextId) {
		if (this.dirtyContextIds[contextId]) {
			delete this.dirtyContextIds[contextId];
			this.fireContextIdsStatusChangeEvent();
		}
	};

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.isContextIdDirty = function (contextId) {
		return this.dirtyContextIds[contextId] ? true : false;
	};


	/***************************
	******** METHODS ***********
	***************************/


	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.Clone = function() {
		var clone = new Solid.Web.Model.DataSets.ObjectsDataSet();
		clone.currentNewObjectId = this.currentNewObjectId;
			
		if (this.countryObjectsDataSet) {
			clone.countryObjectsDataSet = this.countryObjectsDataSet.Clone(this);
		}
		if (this.gOGroupObjectsDataSet) {
			clone.gOGroupObjectsDataSet = this.gOGroupObjectsDataSet.Clone(this);
		}
		if (this.gOGroupRoleObjectsDataSet) {
			clone.gOGroupRoleObjectsDataSet = this.gOGroupRoleObjectsDataSet.Clone(this);
		}
		if (this.gOLoginHistoryObjectsDataSet) {
			clone.gOLoginHistoryObjectsDataSet = this.gOLoginHistoryObjectsDataSet.Clone(this);
		}
		if (this.gORoleObjectsDataSet) {
			clone.gORoleObjectsDataSet = this.gORoleObjectsDataSet.Clone(this);
		}
		if (this.gOUserObjectsDataSet) {
			clone.gOUserObjectsDataSet = this.gOUserObjectsDataSet.Clone(this);
		}
		if (this.gOUserGroupObjectsDataSet) {
			clone.gOUserGroupObjectsDataSet = this.gOUserGroupObjectsDataSet.Clone(this);
		}
		if (this.gOUserRoleObjectsDataSet) {
			clone.gOUserRoleObjectsDataSet = this.gOUserRoleObjectsDataSet.Clone(this);
		}
		if (this.locationObjectsDataSet) {
			clone.locationObjectsDataSet = this.locationObjectsDataSet.Clone(this);
		}
		if (this.placeObjectsDataSet) {
			clone.placeObjectsDataSet = this.placeObjectsDataSet.Clone(this);
		}
		if (this.placeToLocationObjectsDataSet) {
			clone.placeToLocationObjectsDataSet = this.placeToLocationObjectsDataSet.Clone(this);
		}
        // Will reset the objects links to the root ObjectsDataSet to the new dataset
        clone.EnsureInitialized();
		return clone;
    };

	Solid.Web.Model.DataSets.ObjectsDataSet.prototype.Merge = function (dataSetToMerge) {
		this.EnsureInitialized();
			
        // Can't merge a dataset with itself
        if (this == dataSetToMerge || (!dataSetToMerge))
            return;
	
		var currentObjects = null;
		if (dataSetToMerge.countryObjectsDataSet) {
			this.getCountryObjectsDataSet().Merge(dataSetToMerge.countryObjectsDataSet);
		}
		if (dataSetToMerge.gOGroupObjectsDataSet) {
			this.getGOGroupObjectsDataSet().Merge(dataSetToMerge.gOGroupObjectsDataSet);
		}
		if (dataSetToMerge.gOGroupRoleObjectsDataSet) {
			this.getGOGroupRoleObjectsDataSet().Merge(dataSetToMerge.gOGroupRoleObjectsDataSet);
		}
		if (dataSetToMerge.gOLoginHistoryObjectsDataSet) {
			this.getGOLoginHistoryObjectsDataSet().Merge(dataSetToMerge.gOLoginHistoryObjectsDataSet);
		}
		if (dataSetToMerge.gORoleObjectsDataSet) {
			this.getGORoleObjectsDataSet().Merge(dataSetToMerge.gORoleObjectsDataSet);
		}
		if (dataSetToMerge.gOUserObjectsDataSet) {
			this.getGOUserObjectsDataSet().Merge(dataSetToMerge.gOUserObjectsDataSet);
		}
		if (dataSetToMerge.gOUserGroupObjectsDataSet) {
			this.getGOUserGroupObjectsDataSet().Merge(dataSetToMerge.gOUserGroupObjectsDataSet);
		}
		if (dataSetToMerge.gOUserRoleObjectsDataSet) {
			this.getGOUserRoleObjectsDataSet().Merge(dataSetToMerge.gOUserRoleObjectsDataSet);
		}
		if (dataSetToMerge.locationObjectsDataSet) {
			this.getLocationObjectsDataSet().Merge(dataSetToMerge.locationObjectsDataSet);
		}
		if (dataSetToMerge.placeObjectsDataSet) {
			this.getPlaceObjectsDataSet().Merge(dataSetToMerge.placeObjectsDataSet);
		}
		if (dataSetToMerge.placeToLocationObjectsDataSet) {
			this.getPlaceToLocationObjectsDataSet().Merge(dataSetToMerge.placeToLocationObjectsDataSet);
		}
  };

    Solid.Web.Model.DataSets.ObjectsDataSet.prototype.EnsureInitialized = function () {
		if (this.IsInitialized)
			return;
				
		if (this.countryObjectsDataSet) {
			var allObjects = this.countryObjectsDataSet.countryObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOGroupObjectsDataSet) {
			var allObjects = this.gOGroupObjectsDataSet.gOGroupObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOGroupRoleObjectsDataSet) {
			var allObjects = this.gOGroupRoleObjectsDataSet.gOGroupRoleObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOLoginHistoryObjectsDataSet) {
			var allObjects = this.gOLoginHistoryObjectsDataSet.gOLoginHistoryObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gORoleObjectsDataSet) {
			var allObjects = this.gORoleObjectsDataSet.gORoleObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOUserObjectsDataSet) {
			var allObjects = this.gOUserObjectsDataSet.gOUserObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOUserGroupObjectsDataSet) {
			var allObjects = this.gOUserGroupObjectsDataSet.gOUserGroupObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.gOUserRoleObjectsDataSet) {
			var allObjects = this.gOUserRoleObjectsDataSet.gOUserRoleObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.locationObjectsDataSet) {
			var allObjects = this.locationObjectsDataSet.locationObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.placeObjectsDataSet) {
			var allObjects = this.placeObjectsDataSet.placeObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		if (this.placeToLocationObjectsDataSet) {
			var allObjects = this.placeToLocationObjectsDataSet.placeToLocationObjects;
				
			if (allObjects) {
				for (var i; i < allObjects.length; i++) {
					allObjects[i].ObjectsDataSet = this;
				}
			}
		}
		
		this.IsInitialized = true;
	};
} ());
