
////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {	
	'use strict';

	// GOGroup data set. Container for all GOGroup objects
	Solid.Web.Model.DataSets.gOGroupObjectsDataSet = function (rootDataSet) {
		var self = this;

        this._rootObjectDataSet = rootDataSet;
		// Collection holding all GOGroup objects for current dataset - key : internal object id - value : object
		this.gOGroupObjects = {};
	
		// Mapping between entity primary key and objects internal id  - key : primary key(s) - value : internal object id
		this.gOGroupObjectInternalIds = {};
		
		this.fkIndexes = {};


		
	};

	/***************************
	******** METHODS ***********
	***************************/

    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetRootObjectDataSet = function () {
        return this._rootObjectDataSet;
    };
		
    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.SetRootObjectDataSet = function (dataSet) {
        this._rootObjectDataSet = dataSet;
    };

	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.Clone = function (rootDataSet) {
		var clone = new Solid.Web.Model.DataSets.gOGroupObjectsDataSet(rootDataSet);
		if (!this.gOGroupObjects)
			return clone;

		for (var key in this.gOGroupObjects) {
			var objectClone = this.gOGroupObjects[key].Clone();
			clone.gOGroupObjects = objectClone;
		}
				
		clone.gOGroupObjectInternalIds = {};

		for (var key0 in this.gOGroupObjectInternalIds) {
			clone.gOGroupObjectInternalIds[key0] = this.gOGroupObjectInternalIds[key0];
		}
			
		return clone;
	};

	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.AddOrReplaceObject = function (objectToAdd) {
		this.AddObject(objectToAdd, true);	
	};

	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.AddObject = function (objectToAdd, replaceIfExists) {
		var existingObject = this.GetObject(objectToAdd);

        if (!replaceIfExists && existingObject)
            throw new Error("Object already exists");

		var newInternalId = 0;
			
		if (existingObject) {
			// We copy values instead of just replacing the object to make sure we don't loose existing ko notifications
			newInternalId = existingObject.Data.InternalObjectId();
			objectToAdd.Data.InternalObjectId(newInternalId);
			// we merge the contextIds because the objects may be associated to several context Ids
			for (var i = 0; i < existingObject.contextIds.length; i++) {
				var exist = false;
				for (var j = 0; j < objectToAdd.contextIds.length; j++) {
					if (existingObject.contextIds[i].join() === objectToAdd.contextIds[j].join()) {
						exist = true;
						break;
					}
				}

				if (exist === false)
					objectToAdd.contextIds.push(existingObject.contextIds[i]);
			}

			existingObject.CopyValuesFrom(objectToAdd);
		}
		else {
			newInternalId = this._rootObjectDataSet.getNextNewObjectId();
			objectToAdd.Data.InternalObjectId(newInternalId);
			this.gOGroupObjects[newInternalId] = objectToAdd;
		}
			
		if (objectToAdd.Data.IsNew() === false && !existingObject) {
			this.gOGroupObjectInternalIds[objectToAdd.Data.Name()] = newInternalId;
		}
	};
		
    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.RemoveObject = function (objectToRemove) {
        if (!this.gOGroupObjects)
            return;

		var objectToRemoveInternalId = null;
			
		if (objectToRemove.Data.IsNew() === true) {
			objectToRemoveInternalId = objectToRemove.Data.InternalObjectId();
		}
		else {
			if (!this.gOGroupObjectInternalIds[objectToRemove.Data.Name()]) 			
				return;

			objectToRemoveInternalId = this.gOGroupObjectInternalIds[objectToRemove.Data.Name()];
		}
			
		if (!objectToRemoveInternalId || !this.gOGroupObjects[objectToRemoveInternalId])			
			return; //object not in dataset => return
			
		this.gOGroupObjects[objectToRemoveInternalId].release();
		delete this.gOGroupObjects[objectToRemoveInternalId];
		
		if (objectToRemove.Data.IsNew() === false) {
			delete this.gOGroupObjectInternalIds[objectToRemove.Data.Name()];
		}

	};

	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetObjectByInternalId = function (internalObjectId, includeHierarchy) {
        if (this.gOGroupObjects[internalObjectId])
			return this.gOGroupObjects[internalObjectId];		
		
		if(includeHierarchy) {
			// No hierarchy, nothing has been generated, unused bit of code
		}

		return null;
	};

 	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetObjectByPK = function(name) {
		if (this.gOGroupObjects[this.gOGroupObjectInternalIds[name]]) {			
			return this.gOGroupObjects[this.gOGroupObjectInternalIds[name]];
		}

		return null;
	};

    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetObject = function (objectToGet) {
	    if (!this.gOGroupObjects)
            return null;

		var objectToGetInternalId = null;

		if (objectToGet.Data.IsNew() === true) {
			objectToGetInternalId = objectToGet.Data.InternalObjectId();
		} else {
			if (!this.gOGroupObjectInternalIds[objectToGet.Data.Name()]) 			
				return null;
			objectToGetInternalId = this.gOGroupObjectInternalIds[objectToGet.Data.Name()];
		}

		return objectToGetInternalId === null ? null : this.gOGroupObjects[objectToGetInternalId];
    };

    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetObjectsMarkedForDeletion = function () {
        if (!this.gOGroupObjects)
            return [];

		var toReturn = [];
			
		for (var prop in this.gOGroupObjects) {
			if (this.gOGroupObjects[prop].Data.IsMarkedForDeletion()) {
				toReturn.push(this.gOGroupObjects[prop]);
			}
		}

		return toReturn;
    };

	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.GetRelatedObjects = function (rootObject, relationName) {
		if (relationName == "GroupRoleItems") {
            var result = [];
			var relatedDataSet = this._rootObjectDataSet.getGOGroupRoleObjectsDataSet();
			if (relatedDataSet !== undefined) 
				result = relatedDataSet.GetGroupRoleItemsForGroup(rootObject);

			return result;
		}		
		if (relationName == "UserGroupItems") {
            var result = [];
			var relatedDataSet = this._rootObjectDataSet.getGOUserGroupObjectsDataSet();
			if (relatedDataSet !== undefined) 
				result = relatedDataSet.GetUserGroupItemsForGroup(rootObject);

			return result;
		}		
		return null;
	};
		
	Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.cleanContext = function (thecontextId) {
		for (var prop in this.gOGroupObjects) {
			var shouldDelete = true;

			if (this.gOGroupObjects[prop].contextIds.length !== 0) {
				var contextIdsToKeep = [],
					len = this.gOGroupObjects[prop].contextIds.length;
				for (var i = 0; i < len; i++) {
					var contextId = this.gOGroupObjects[prop].contextIds[i];

					if (contextId.length < thecontextId.length) {
						contextIdsToKeep.push(contextId);
 					} else {										
						for (var j=0; j < thecontextId.length; j++) {
							if (contextId[j] !== thecontextId[j]) {
								contextIdsToKeep.push(contextId);
								break;
							}
						}
					}
				}
					
				this.gOGroupObjects[prop].contextIds	= contextIdsToKeep;
					
				shouldDelete = (contextIdsToKeep.length === 0);
			}
				 				
			if (shouldDelete === true) {
				this.RemoveObject(this.gOGroupObjects[prop]);				
			}
		}
	};
		
    Solid.Web.Model.DataSets.gOGroupObjectsDataSet.prototype.Merge = function (dataSetToMerge) {
		if (!dataSetToMerge.gOGroupObjects)
			return;
            					
		for (prop in dataSetToMerge.gOGroupObjects) {
			if (dataSetToMerge.gOGroupObjects[prop].Data.IsNew() === true)
                throw Error("Can't merge data sets with new objects");
				
			var objectToMerge = dataSetToMerge.gOGroupObjects[prop].Clone();
			objectToMerge.Data.InternalObjectId(null);
			objectToMerge.ObjectsDataSet = this._rootObjectDataSet;
            this._rootObjectDataSet.AddOrReplaceObject(objectToMerge);
        }
    };
		

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataSets/GOGroupDataSet.js");
} ());