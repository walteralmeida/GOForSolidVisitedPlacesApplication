////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	'use strict'
	/// <summary>
	/// DataObject Validator object for 'Country'.
	/// Contains a set of method to validate the given object
	/// </summary>	
	Solid.Web.Model.DataObjects.Validation.CountryValidator = {};

	if(Solid.Web.Model.DataObjects.Validation.CountryValidatorCustom !== undefined) {
		Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator = new Solid.Web.Model.DataObjects.Validation.CountryValidatorCustom(self);
	}

	/***********************************/
    /****** VALIDATORS FOR FIELDS ******/
    /***********************************/    


	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateAbstract = function (dataobject) {
		// Max Length
		if(dataobject.Data.Abstract() != null && dataobject.Data.Abstract().length > 2000)
		{
			dataobject.StatusData.isAbstractValid(false);
			dataobject.StatusData.abstractErrorMessage(Solid.Web.Messages.validationRuleMaxLengthMessage.replace(/%FIELDNAME%/g, "Abstract").replace(/%LENGTH%/g, "2000"));
		}
		else {
			dataobject.StatusData.isAbstractValid(true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateFlag = function (dataobject) {
		// Max Length
		if(dataobject.Data.Flag() != null && dataobject.Data.Flag().length > 200)
		{
			dataobject.StatusData.isFlagValid(false);
			dataobject.StatusData.flagErrorMessage(Solid.Web.Messages.validationRuleMaxLengthMessage.replace(/%FIELDNAME%/g, "Flag").replace(/%LENGTH%/g, "200"));
		}
		else {
			dataobject.StatusData.isFlagValid(true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateLocationItems = function (dataobject) {
      if(dataobject.Data.LocationItems() == undefined || dataobject.Data.LocationItems() == null || dataobject.Data.LocationItems() === "")
		{
			dataobject.StatusData.isLocationItemsValid(false);
			dataobject.StatusData.locationItemsErrorMessage(Solid.Web.Messages.validationRuleRequiredMessage.replace(/%FIELDNAME%/g, "Location Items"));
		}
		else {
			dataobject.StatusData.isLocationItemsValid(true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateLongName = function (dataobject) {
		// Max Length
		if(dataobject.Data.LongName() != null && dataobject.Data.LongName().length > 200)
		{
			dataobject.StatusData.isLongNameValid(false);
			dataobject.StatusData.longNameErrorMessage(Solid.Web.Messages.validationRuleMaxLengthMessage.replace(/%FIELDNAME%/g, "Long Name").replace(/%LENGTH%/g, "200"));
		}
		else {
			dataobject.StatusData.isLongNameValid(true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateName = function (dataobject) {
		var isValid = true;
      if(dataobject.Data.Name() == undefined || dataobject.Data.Name() == null || dataobject.Data.Name() === "")
		{
			dataobject.StatusData.isNameValid(false);
			dataobject.StatusData.nameErrorMessage(Solid.Web.Messages.validationRuleRequiredMessage.replace(/%FIELDNAME%/g, "Name"));
			isValid = false;
		}
		else {
			dataobject.StatusData.isNameValid(isValid && true);
		}
		// Max Length
		if(dataobject.Data.Name() != null && dataobject.Data.Name().length > 100)
		{
			dataobject.StatusData.isNameValid(false);
			dataobject.StatusData.nameErrorMessage(Solid.Web.Messages.validationRuleMaxLengthMessage.replace(/%FIELDNAME%/g, "Name").replace(/%LENGTH%/g, "100"));
				isValid = false;
		}
		else {
			dataobject.StatusData.isNameValid(isValid && true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePlaceItems = function (dataobject) {
      if(dataobject.Data.PlaceItems() == undefined || dataobject.Data.PlaceItems() == null || dataobject.Data.PlaceItems() === "")
		{
			dataobject.StatusData.isPlaceItemsValid(false);
			dataobject.StatusData.placeItemsErrorMessage(Solid.Web.Messages.validationRuleRequiredMessage.replace(/%FIELDNAME%/g, "Place Items"));
		}
		else {
			dataobject.StatusData.isPlaceItemsValid(true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePopulationDensity = function (dataobject) {
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePopulationTotal = function (dataobject) {
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateURI = function (dataobject) {
		var isValid = true;
      if(dataobject.Data.URI() == undefined || dataobject.Data.URI() == null || dataobject.Data.URI() === "")
		{
			dataobject.StatusData.isURIValid(false);
			dataobject.StatusData.uRIErrorMessage(Solid.Web.Messages.validationRuleRequiredMessage.replace(/%FIELDNAME%/g, "URI"));
			isValid = false;
		}
		else {
			dataobject.StatusData.isURIValid(isValid && true);
		}
		// Max Length
		if(dataobject.Data.URI() != null && dataobject.Data.URI().length > 300)
		{
			dataobject.StatusData.isURIValid(false);
			dataobject.StatusData.uRIErrorMessage(Solid.Web.Messages.validationRuleMaxLengthMessage.replace(/%FIELDNAME%/g, "URI").replace(/%LENGTH%/g, "300"));
				isValid = false;
		}
		else {
			dataobject.StatusData.isURIValid(isValid && true);
		}
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validateVisitedPlaceItems = function (dataobject) {
      if(dataobject.Data.VisitedPlaceItems() == undefined || dataobject.Data.VisitedPlaceItems() == null || dataobject.Data.VisitedPlaceItems() === "")
		{
			dataobject.StatusData.isVisitedPlaceItemsValid(false);
			dataobject.StatusData.visitedPlaceItemsErrorMessage(Solid.Web.Messages.validationRuleRequiredMessage.replace(/%FIELDNAME%/g, "VisitedPlace Items"));
		}
		else {
			dataobject.StatusData.isVisitedPlaceItemsValid(true);
		}
	};


	/***************************************/
    /****** VALIDATORS FOR RELATIONS ******/
    /**************************************/

 	
	/******************************/
    /****** GLOBAL VALIDATOR ******/
    /******************************/

	Solid.Web.Model.DataObjects.Validation.CountryValidator.validate = function(dataobject) {

		var doContinue = true;
		var isValid = true;
		var errorMessage = "";

		if(Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator && Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.validate !== undefined) {
			// A Custom Validator to override / add some validations.
			doContinue = Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.validate(dataobject);
		}
		if(!doContinue)
			return;

		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateAbstract (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateFlag (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateLocationItems (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateLongName (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateName (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePlaceItems (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePopulationDensity (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validatePopulationTotal (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateURI (dataobject);
		Solid.Web.Model.DataObjects.Validation.CountryValidator.validateVisitedPlaceItems (dataobject);
		doContinue = true;
		if(Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator && Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.CustomValidation !== undefined){
			Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.CustomValidation(dataobject);
		}

		if(dataobject.Data.PopulationDensity() && dataobject.Data.PopulationDensity() != "" ? (parseFloat(dataobject.Data.PopulationDensity()) != dataobject.Data.PopulationDensity() || isNaN(parseFloat(dataobject.Data.PopulationDensity()))) : false)
		{
			dataobject.StatusData.isCountryEntityValid(false);
			errorMessage += "\r\n" + "Value must be a number for the field Population Density";
			isValid = false;
		} else {
			dataobject.StatusData.isCountryEntityValid(!!isValid);
		}
		if(dataobject.Data.PopulationTotal() && dataobject.Data.PopulationTotal() != "" ? ((parseInt(dataobject.Data.PopulationTotal()) != dataobject.Data.PopulationTotal() || isNaN(parseInt(dataobject.Data.PopulationTotal()))) || dataobject.Data.PopulationTotal() > 9223372036854775807 || dataobject.Data.PopulationTotal() < -9223372036854775807) : false)
		{
			dataobject.StatusData.isCountryEntityValid(false);
			errorMessage += "\r\n" + "Value must be a number for the field Population Total";
			isValid = false;
		} else {
			dataobject.StatusData.isCountryEntityValid(!!isValid);
		}

		if(errorMessage)
			dataobject.StatusData.countryEntityErrorMessage(errorMessage);
		dataobject.StatusData.errorSummary.removeAll();
	    if (dataobject.StatusData.isAbstractValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.abstractErrorMessage());
		}
	    if (dataobject.StatusData.isFlagValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.flagErrorMessage());
		}
	    if (dataobject.StatusData.isLocationItemsValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.locationItemsErrorMessage());
		}
	    if (dataobject.StatusData.isLongNameValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.longNameErrorMessage());
		}
	    if (dataobject.StatusData.isNameValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.nameErrorMessage());
		}
	    if (dataobject.StatusData.isPlaceItemsValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.placeItemsErrorMessage());
		}
	    if (dataobject.StatusData.isPopulationDensityValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.populationDensityErrorMessage());
		}
	    if (dataobject.StatusData.isPopulationTotalValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.populationTotalErrorMessage());
		}
	    if (dataobject.StatusData.isURIValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.uRIErrorMessage());
		}
	    if (dataobject.StatusData.isVisitedPlaceItemsValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.visitedPlaceItemsErrorMessage());
		}
		
		if(dataobject.StatusData.isCountryEntityValid() === false) {
			dataobject.StatusData.errorSummary.push(dataobject.StatusData.countryEntityErrorMessage());
		}

		if(Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator && Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.OnAfterValidate !== undefined){
			Solid.Web.Model.DataObjects.Validation.CountryValidator.CustomValidator.OnAfterValidate();
		}	
	};

	Solid.Web.Model.DataObjects.Validation.CountryValidator.resetValidation = function(dataobject) {

		dataobject.StatusData.isAbstractValid(true);
		dataobject.StatusData.abstractErrorMessage(null);
		dataobject.StatusData.isFlagValid(true);
		dataobject.StatusData.flagErrorMessage(null);
		dataobject.StatusData.isLongNameValid(true);
		dataobject.StatusData.longNameErrorMessage(null);
		dataobject.StatusData.isNameValid(true);
		dataobject.StatusData.nameErrorMessage(null);
		dataobject.StatusData.isPopulationDensityValid(true);
		dataobject.StatusData.populationDensityErrorMessage(null);
		dataobject.StatusData.isPopulationTotalValid(true);
		dataobject.StatusData.populationTotalErrorMessage(null);
		dataobject.StatusData.isURIValid(true);
		dataobject.StatusData.uRIErrorMessage(null);
		
		dataobject.StatusData.isCountryEntityValid(true);
		dataobject.StatusData.countryEntityErrorMessage(null);
		dataobject.StatusData.errorSummary.removeAll();
	};

	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Model/DataObjectValidators/CountryObjectValidator.js");

} ());