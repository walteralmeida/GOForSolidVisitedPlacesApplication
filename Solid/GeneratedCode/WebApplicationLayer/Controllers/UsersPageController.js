////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

(function () {
	// 
	Solid.Web.Controllers.UsersPageController = function(applicationController) {
		var self = this;
		this.subscriptions = [];
		// store all subscriptions in this array, to unsubscribe on release.
		
		this._objectType = "UsersPage";

		this.applicationController = applicationController;
		this.ObjectsDataSet = applicationController.ObjectsDataSet;
		this.contextId = [this.applicationController.getNextContextId()];
		this.customController = undefined;

		// Integrate custom code if any
		if (Solid.Web.Controllers.UsersPageControllerCustom !== undefined) {
		    this.customController = new Solid.Web.Controllers.UsersPageControllerCustom(self);
		};

		this.pageTitle = ko.observable("Users");

		// Initialize View Models and Data Stores
		
			this.GOUserFormViewModel = new Solid.Web.ViewModels.GOUserFormViewModel(this, $("#GOUserFormControl"), null, null, this.contextId);		
			
			this.UserProfileGridViewModel = new Solid.Web.ViewModels.UserProfileGridViewModel(this, $("#UserProfileGrid"), null, null, this.contextId);		
	
		// Attach to view models events
		this.subscriptions.push(this.GOUserFormViewModel.StatusData.IsBusy.subscribe( function (newValue) { self.OnGOUserFormViewModelIsBusyChanged(newValue); }));
		this.subscriptions.push(this.UserProfileGridViewModel.StatusData.IsBusy.subscribe( function (newValue) { self.OnUserProfileGridViewModelIsBusyChanged(newValue); }));
		
		this.IsInEditMode = function() {

			return  (self.GOUserFormViewModel.StatusData.DisplayMode && self.GOUserFormViewModel.StatusData.DisplayMode() == 'edit') ||  (self.UserProfileGridViewModel.StatusData.DisplayMode && self.UserProfileGridViewModel.StatusData.DisplayMode() == 'edit');
		};


		// Events Handlers
      this.OnUserProfileGridGOUserCollectionLoaded = function() {
            // If form is a active, try to find relevand object in grid and select it
            if (self.UserProfileGridViewModel.GOUserObjectCollection().length > 0 && self.GOUserFormViewModel.StatusData.IsEmpty() === false) {
                var found = null;
                for (var i = 0; i < self.UserProfileGridViewModel.GOUserObjectCollection().length; i++) {
                    if (self.UserProfileGridViewModel.GOUserObjectCollection()[i].Data.Id() === self.GOUserFormViewModel.GOUserObject().Data.Id()) {
                        found = self.UserProfileGridViewModel.GOUserObjectCollection()[i].Data.InternalObjectId();
                        break;
                    }
                }

                if (found) {
                    self.UserProfileGridViewModel.selectedObjectId(found);
                }
                else {
                    self.UserProfileGridViewModel.selectedObjectId(self.UserProfileGridViewModel.GOUserObjectCollection()[0].Data.InternalObjectId());
                }
            }
            else if (self.UserProfileGridViewModel.GOUserObjectCollection().length > 0 && self.GOUserFormViewModel.StatusData.IsEmpty() === true) {
				if (GenerativeObjects.Web.GetEnvironment().isMobile === false) {
					self.UserProfileGridViewModel.selectedObjectId(self.UserProfileGridViewModel.GOUserObjectCollection()[0].Data.InternalObjectId()); 
				}
            }
			
		};

		this.OnUserProfileGridViewModelSelectionChanged = function (selectedUserProfileGrid) {
         	// If currently busy: ignore the selection changes, until the underlying command completes
			if (self.UserProfileGridViewModel.StatusData.IsBusy() === true)
                return;

				var selectedObject = self.UserProfileGridViewModel.selectedObject();
				if (selectedObject && (self.GOUserFormViewModel.StatusData.IsEmpty() || (self.GOUserFormViewModel.GOUserObject === null || selectedObject.Data.Id() !== self.GOUserFormViewModel.GOUserObject().Data.Id()))) {
					self.GOUserFormViewModel.LoadGOUser(selectedObject);
			}
			// If count > 0 and no selection, means the collection is just being reloaded
			// So wait until new selection is made
			else if (self.UserProfileGridViewModel.GOUserObjectCollection().length == 0) {
				self.GOUserFormViewModel.SetGOUserObject(null);
			}
			
		};
        this.OnGOUserFormViewModelStartEdit = function () {
 			self.UserProfileGridViewModel.StatusData.IsEnabled(false);				
		};

		this.OnGOUserFormViewModelEndEdit = function () {
			self.UserProfileGridViewModel.LoadGOUserObjectCollection();
 			self.UserProfileGridViewModel.StatusData.IsEnabled(true);				
		};

		this.OnGOUserFormViewModelCancelEdit = function () {
 			self.UserProfileGridViewModel.StatusData.IsEnabled(true);
		};
			
		this.OnGOUserFormViewModelIsBusyChanged = function (newValue) {
		};

		this.OnUserProfileGridViewModelIsBusyChanged = function (newValue) {
			if (newValue === true) {
				self.GOUserFormViewModel.StatusData.IsEnabled(false);
			}
			else {
				self.GOUserFormViewModel.StatusData.IsEnabled(true);
			}
		};

		this.initialize = function() {
			self.subscriptions.push(this.UserProfileGridViewModel.selectedObject.subscribe(function (newValue) { self.OnUserProfileGridViewModelSelectionChanged(); }));
			self.subscriptions.push(this.UserProfileGridViewModel.Events.GOUserCollectionLoaded.subscribe(function (newValue) { self.OnUserProfileGridGOUserCollectionLoaded(); }));
			self.subscriptions.push(this.GOUserFormViewModel.Events.StartEdit.subscribe(function (newValue) { self.OnGOUserFormViewModelStartEdit(); }));				
			self.subscriptions.push(this.GOUserFormViewModel.Events.CancelEdit.subscribe(function (newValue) { self.OnGOUserFormViewModelCancelEdit(); }));			
			self.subscriptions.push(this.GOUserFormViewModel.Events.EndEdit.subscribe(function (newValue) { self.OnGOUserFormViewModelEndEdit(); }));				
			self.subscriptions.push(this.GOUserFormViewModel.Events.CancelEdit.subscribe(function (newValue) { self.OnGOUserFormViewModelCancelEdit(); }));			
			self.subscriptions.push(this.GOUserFormViewModel.Events.GOUserSaved.subscribe(function (newValue) { self.OnGOUserFormViewModelEndEdit(); }));				
			self.subscriptions.push(this.GOUserFormViewModel.Events.GOUserDeleted.subscribe(function (newValue) { self.OnGOUserFormViewModelEndEdit(); }));

			if (Solid.Web.Controllers.Custom && Solid.Web.Controllers.Custom.getPageTitle) {
				self.pageTitle(Solid.Web.Controllers.Custom.getPageTitle(self));
			}

	
			// Call custom initialize if defined
			if (self.customController !== undefined && self.customController.initialize !== undefined) {
			    self.customController.initialize();
			}
		// Initial data load for all source elements (no dependencies)
			if (!GO.Filter.hasUrlFilter(self.UserProfileGridViewModel.FILTER_NAME, self.UserProfileGridViewModel)) {
				self.UserProfileGridViewModel.LoadGOUserObjectCollection();
			}
		};
		this.initialize();



		this.release = function() {
			// unsubscribe
			for(var i = 0;i <  self.subscriptions.length;i++) {
				self.subscriptions[i].dispose();
			}
			self.subscriptions = [];
			self.ObjectsDataSet.cleanContext(self.contextId);
			
			self.GOUserFormViewModel.release();
			self.GOUserFormViewModel = null;
			self.UserProfileGridViewModel.release();
			self.UserProfileGridViewModel = null;
		};


		return self;
	};		
	
	if (window.ApplicationSourceHandler)
		window.ApplicationSourceHandler.onSourceLoaded("/Controllers/UsersPageController.js");
} ());
