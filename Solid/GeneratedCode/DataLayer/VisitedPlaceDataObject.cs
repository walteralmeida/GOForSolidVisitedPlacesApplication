////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'VisitedPlace'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class VisitedPlaceDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("CountryURI")]
		protected System.String _countryURI;
		[JsonProperty ("Date")]
		protected System.DateTime _date;
		[JsonProperty("Date_WithTimezoneOffset")]
		protected System.DateTimeOffset? _date_WithTimezoneOffset;
		[JsonProperty ("Description")]
		protected System.String _description;
		[JsonProperty ("Id")]
		protected System.Guid _id = Guid.NewGuid();
		[JsonProperty ("UserProfileUri")]
		protected System.String _userProfileUri;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)
		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _country_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_country_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _userProfile_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_userProfile_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public VisitedPlaceDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public VisitedPlaceDataObject(System.Guid id)
			: base()
		{
			this._id = id;
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public VisitedPlaceDataObject(VisitedPlaceDataObject template, bool deepCopy)
		{
			this.SetDateValue(template.Date, false, false);
			this._date_WithTimezoneOffset = template._date_WithTimezoneOffset;
			this.SetCountryURIValue(template.CountryURI, false, false);
			this.SetDescriptionValue(template.Description, false, false);
			this.SetIdValue(template.Id, false, false);
			this.SetUserProfileUriValue(template.UserProfileUri, false, false);
 
			this._country_NewObjectId = template._country_NewObjectId;
 
			this._userProfile_NewObjectId = template._userProfile_NewObjectId;
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual VisitedPlaceDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual VisitedPlaceDataObject Copy(bool deepCopy)
		{
			return new VisitedPlaceDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var visitedPlaceSource = sourceObject as VisitedPlaceDataObject;

			if (ReferenceEquals(null, visitedPlaceSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetCountryURIValue(visitedPlaceSource.CountryURI, false, false);
			this.SetDateValue(visitedPlaceSource.Date, false, false);
			this.SetDescriptionValue(visitedPlaceSource.Description, false, false);
			this.SetIdValue(visitedPlaceSource.Id, false, false);
			this.SetUserProfileUriValue(visitedPlaceSource.UserProfileUri, false, false);
			this._country_NewObjectId = (sourceObject as VisitedPlaceDataObject)._country_NewObjectId;

			this._userProfile_NewObjectId = (sourceObject as VisitedPlaceDataObject)._userProfile_NewObjectId;

			if (deepCopy)
			{
				this.ObjectsDataSet = visitedPlaceSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(visitedPlaceSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as VisitedPlaceDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._id == this._id;
        }


        public override int GetHashCode()
        {		
			
			return _id == null ? -1 : _id.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {
			if (this._country_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._country_NewObjectId))
				{
                    this._country_NewObjectId = null;
				}
                else
				{
					this._country_NewObjectId = datasetMergingInternalIdMapping[(int) this._country_NewObjectId];
				}
			}

			if (this._userProfile_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._userProfile_NewObjectId))
				{
                    this._userProfile_NewObjectId = null;
				}
                else
				{
					this._userProfile_NewObjectId = datasetMergingInternalIdMapping[(int) this._userProfile_NewObjectId];
				}
			}

		}

		#endregion
        
		#region Relation properties		
		
      public virtual void SetCountryValue(CountryDataObject valueToSet)
		{
			SetCountryValue(valueToSet, true, true);
		}

        public virtual void SetCountryValue(CountryDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			CountryDataObject existing_country = null ;

			if ( !(this.CountryURI == null || ObjectsDataSet == null))
			{
				var key = this._country_NewObjectId == null ? new CountryDataObject(this.CountryURI) { IsNew = false } : new CountryDataObject() { IsNew = true, InternalObjectId = this._country_NewObjectId };			
				existing_country = (CountryDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_country ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("Country", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "VisitedPlaceDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_country_NewObjectId != valueToSet.InternalObjectId)
					{
						_country_NewObjectId = valueToSet.InternalObjectId;
						_countryURI = valueToSet.URI;
						OnPropertyChanged("CountryURI",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_countryURI != valueToSet.URI)
					{
						_country_NewObjectId = null;

						_countryURI = valueToSet.URI;
						OnPropertyChanged("CountryURI",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_countryURI = null;
				OnPropertyChanged("CountryURI",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_country ,valueToSet))
				OnPropertyChanged("Country", notifyChanges, dirtyHandlerOn);
		}

		private bool __countryCurrentLoading = false;
		public virtual CountryDataObject LoadCountry(bool skipSecurity = false)
		{
			return LoadCountry(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual CountryDataObject LoadCountry(Parameters parameters, bool skipSecurity = false)
		{
			var country = GetCountry(allowLazyLoading: false); 
			if (country != null)
				return country;

			
			country = (CountryDataObject)ObjectsDataSet.GetObject(new CountryDataObject(this.CountryURI) { IsNew = false });

            if (country == null && !__countryCurrentLoading)
            {
				__countryCurrentLoading = true;
                country = ApplicationSettings.Container.Resolve<IDataProvider<CountryDataObject>>().Get(new CountryDataObject(this.CountryURI), parameters : parameters, skipSecurity: skipSecurity);
                SetCountryValue(country, false, false);
				__countryCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return country == null ? null : ObjectsDataSet.GetObject(country);
		}
		
		[JsonProperty]
		public virtual CountryDataObject Country 
		{
			get
			{			
				return GetCountry(true);
			}
			set
			{
				SetCountryValue(value);
			}
		}
		
		public virtual bool ShouldSerializeCountry()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("VisitedPlaceDataObject") && ObjectsDataSet.RelationsToInclude["VisitedPlaceDataObject"].Contains("Country");
		}

		public virtual CountryDataObject GetCountry(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			CountryDataObject country;

				
			if (_country_NewObjectId != null)
			{
				country = (CountryDataObject)ObjectsDataSet.GetObject(new CountryDataObject() { IsNew = true, InternalObjectId = _country_NewObjectId });
			}
			else
			{
				if (CountryURI == null)
					country = null;
				else
				country = (CountryDataObject)ObjectsDataSet.GetObject(new CountryDataObject(this.CountryURI) { IsNew = false });
				
				if (allowLazyLoading && country == null && LazyLoadingEnabled)
				{
					country = LoadCountry();
				}
			}
				
			return country;
		}

		public virtual System.String CountryForeignKey
		{
			get { return CountryURI; }
			set 
			{	
				CountryURI = value;
			}
			
		}
		

      public virtual void SetUserProfileValue(UserProfileDataObject valueToSet)
		{
			SetUserProfileValue(valueToSet, true, true);
		}

        public virtual void SetUserProfileValue(UserProfileDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			UserProfileDataObject existing_userProfile = null ;

			if ( !(this.UserProfileUri == null || ObjectsDataSet == null))
			{
				var key = this._userProfile_NewObjectId == null ? new UserProfileDataObject(this.UserProfileUri) { IsNew = false } : new UserProfileDataObject() { IsNew = true, InternalObjectId = this._userProfile_NewObjectId };			
				existing_userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_userProfile ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("UserProfile", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "VisitedPlaceDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_userProfile_NewObjectId != valueToSet.InternalObjectId)
					{
						_userProfile_NewObjectId = valueToSet.InternalObjectId;
						_userProfileUri = valueToSet.Uri;
						OnPropertyChanged("UserProfileUri",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_userProfileUri != valueToSet.Uri)
					{
						_userProfile_NewObjectId = null;

						_userProfileUri = valueToSet.Uri;
						OnPropertyChanged("UserProfileUri",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_userProfileUri = null;
				OnPropertyChanged("UserProfileUri",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_userProfile ,valueToSet))
				OnPropertyChanged("UserProfile", notifyChanges, dirtyHandlerOn);
		}

		private bool __userProfileCurrentLoading = false;
		public virtual UserProfileDataObject LoadUserProfile(bool skipSecurity = false)
		{
			return LoadUserProfile(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual UserProfileDataObject LoadUserProfile(Parameters parameters, bool skipSecurity = false)
		{
			var userProfile = GetUserProfile(allowLazyLoading: false); 
			if (userProfile != null)
				return userProfile;

			
			userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject(this.UserProfileUri) { IsNew = false });

            if (userProfile == null && !__userProfileCurrentLoading)
            {
				__userProfileCurrentLoading = true;
                userProfile = ApplicationSettings.Container.Resolve<IDataProvider<UserProfileDataObject>>().Get(new UserProfileDataObject(this.UserProfileUri), parameters : parameters, skipSecurity: skipSecurity);
                SetUserProfileValue(userProfile, false, false);
				__userProfileCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return userProfile == null ? null : ObjectsDataSet.GetObject(userProfile);
		}
		
		[JsonProperty]
		public virtual UserProfileDataObject UserProfile 
		{
			get
			{			
				return GetUserProfile(true);
			}
			set
			{
				SetUserProfileValue(value);
			}
		}
		
		public virtual bool ShouldSerializeUserProfile()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("VisitedPlaceDataObject") && ObjectsDataSet.RelationsToInclude["VisitedPlaceDataObject"].Contains("UserProfile");
		}

		public virtual UserProfileDataObject GetUserProfile(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			UserProfileDataObject userProfile;

				
			if (_userProfile_NewObjectId != null)
			{
				userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject() { IsNew = true, InternalObjectId = _userProfile_NewObjectId });
			}
			else
			{
				if (UserProfileUri == null)
					userProfile = null;
				else
				userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject(this.UserProfileUri) { IsNew = false });
				
				if (allowLazyLoading && userProfile == null && LazyLoadingEnabled)
				{
					userProfile = LoadUserProfile();
				}
			}
				
			return userProfile;
		}

		public virtual System.String UserProfileForeignKey
		{
			get { return UserProfileUri; }
			set 
			{	
				UserProfileUri = value;
			}
			
		}
		

		public override void ClearLazyLoadFlags()
		{
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			if (LoadCountry() != null)
				result.Add(Country);
			if (LoadUserProfile() != null)
				result.Add(UserProfile);
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return
				UserProfile == other ||
				(other is UserProfileDataObject && (UserProfileUri != default(System.String)) && (UserProfileUri == (other as UserProfileDataObject).Uri)) || 
				Country == other ||
				(other is CountryDataObject && (CountryURI != default(System.String)) && (CountryURI == (other as CountryDataObject).URI)); 
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.Guid PrimaryKey
		{
			get { return Id; }
		}

		public virtual void SetPrimaryKeyValue(System.Guid valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetIdValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetCountryURIValue(System.String valueToSet)
		{
			SetCountryURIValue(valueToSet, true, true);
		}

		public virtual void SetCountryURIValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_countryURI != valueToSet)
			{
				_countryURI = valueToSet;

				// CountryURI is a FK. Setting its value should result in a event
				OnPropertyChanged("Country", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("CountryURI", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The CountryURI property of the VisitedPlace DataObject</summary>
        public virtual System.String CountryURI 
		{
			get	{ return _countryURI; }
			
			
			set
			{
				SetCountryURIValue(value);
			}
		}		
			
			
		public virtual void SetDateValue(System.DateTime valueToSet)
		{
			SetDateValue(valueToSet, true, true);
		}

		public virtual void SetDateValue(System.DateTime valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (valueToSet == null || valueToSet == DateTime.MinValue) 
			{
				if (_date != DateTime.MinValue.ToUniversalTime())
				{
					_date = DateTime.MinValue.ToUniversalTime();
					OnPropertyChanged("Date", notifyChanges, dirtyHandlerOn);
				}	
			}
			else if (valueToSet == DateTime.MaxValue)
			{
				if (_date != DateTime.MaxValue.ToUniversalTime())
				{
					_date = DateTime.MaxValue.ToUniversalTime();
					OnPropertyChanged("Date", notifyChanges, dirtyHandlerOn);
				}
			} 
			else if (_date != valueToSet ||
                (_date != null && ((DateTime)_date).Kind == DateTimeKind.Unspecified))
			{
				_date = DateTime.SpecifyKind(valueToSet, DateTimeKind.Local);
				OnPropertyChanged("Date", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Date property of the VisitedPlace DataObject</summary>
        public virtual System.DateTime Date 
		{
			get	{ return _date;}
			
			
			set
			{
				SetDateValue(value);
			}
		}		
			
			
		public virtual void SetDescriptionValue(System.String valueToSet)
		{
			SetDescriptionValue(valueToSet, true, true);
		}

		public virtual void SetDescriptionValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_description != valueToSet)
			{
				_description = valueToSet;

				OnPropertyChanged("Description", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Description property of the VisitedPlace DataObject</summary>
        public virtual System.String Description 
		{
			get	{ return String.IsNullOrEmpty(_description) ? null : _description; }
			
			
			set
			{
				SetDescriptionValue(value);
			}
		}		
			
			
		public virtual void SetIdValue(System.Guid valueToSet)
		{
			SetIdValue(valueToSet, true, true);
		}

		public virtual void SetIdValue(System.Guid valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_id != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_id = valueToSet;

				OnPropertyChanged("Id", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Id property of the VisitedPlace DataObject</summary>
        public virtual System.Guid Id 
		{
			get	{ return _id;}
			
			
			set
			{
				SetIdValue(value);
			}
		}		
			
			
		public virtual void SetUserProfileUriValue(System.String valueToSet)
		{
			SetUserProfileUriValue(valueToSet, true, true);
		}

		public virtual void SetUserProfileUriValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_userProfileUri != valueToSet)
			{
				_userProfileUri = valueToSet;

				OnPropertyChanged("UserProfileUri", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The UserProfileUri property of the VisitedPlace DataObject</summary>
        public virtual System.String UserProfileUri 
		{
			get	{ return _userProfileUri; }
			
			
			set
			{
				SetUserProfileUriValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects


        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new VisitedPlaceDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is VisitedPlaceDataObject))
				return false;

			var p = (VisitedPlaceDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.Id == p.Id;
			fieldsComparison &= this.UserProfileUri == p.UserProfileUri;
			fieldsComparison &= this.Description == p.Description;
			fieldsComparison &= this.CountryURI == p.CountryURI;
			fieldsComparison &= this.Date == p.Date;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Id}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Id = (System.Guid)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
			// Date is a local datetime: Convert to UTC for server-side handling and storing
			if (this._date_WithTimezoneOffset != null)
			{
				this.Date = ((DateTimeOffset)this._date_WithTimezoneOffset).UtcDateTime;
			}
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class VisitedPlaceCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.Guid> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public VisitedPlaceCollectionContainer()
		{
		}
		
        public VisitedPlaceCollectionContainer(DataObjectCollection<VisitedPlaceDataObject> visitedPlaceItems)
        {
			Construct(visitedPlaceItems);
		}

		public void Construct(DataObjectCollection<VisitedPlaceDataObject> visitedPlaceItems)
        {
            if (visitedPlaceItems == null)
                return;
				
			this.PrimaryKeys = visitedPlaceItems.Select(c => c.PrimaryKey).ToList();
            if (visitedPlaceItems.ObjectsDataSet == null)
            {
                visitedPlaceItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = visitedPlaceItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = visitedPlaceItems.ObjectsDataSet;
		}

		public DataObjectCollection<VisitedPlaceDataObject> ExtractVisitedPlaceItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<VisitedPlaceDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<VisitedPlaceDataObject>(typeof(VisitedPlaceDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class VisitedPlaceContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.Guid PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public VisitedPlaceContainer() 
		{
		}

        public VisitedPlaceContainer(VisitedPlaceDataObject visitedPlace) 
		{
			Construct(visitedPlace, false);
		}

        public VisitedPlaceContainer(VisitedPlaceDataObject visitedPlace, bool includeDirtyObjectsOnly) 
		{
			Construct(visitedPlace, includeDirtyObjectsOnly);
		}

		public virtual void Construct(VisitedPlaceDataObject visitedPlace, bool includeDirtyObjectsOnly)
		{
            if (visitedPlace == null)
                return;

			this.PrimaryKey = visitedPlace.PrimaryKey;
			
            if (visitedPlace.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(visitedPlace);
            }

			if(visitedPlace.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity VisitedPlace", "Unable to set a dataset to the entity. Container may not be initialized", "VisitedPlaceDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : VisitedPlace");
			}

			if(visitedPlace.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in VisitedPlaceDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "VisitedPlaceDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in VisitedPlaceDataObject");
			}
			this.InternalObjectId = (int) visitedPlace.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? visitedPlace.ObjectsDataSet.CloneDirtyObjects() : visitedPlace.ObjectsDataSet;
		}
		
		public VisitedPlaceDataObject ExtractVisitedPlace()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<VisitedPlaceDataObject>(typeof(VisitedPlaceDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}