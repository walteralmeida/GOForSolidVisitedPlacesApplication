////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'GOGroupRole'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class GOGroupRoleDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("GOGroupName")]
		protected System.String _gOGroupName;
		[JsonProperty ("GORoleName")]
		protected System.String _gORoleName;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)
		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _group_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_group_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _role_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_role_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public GOGroupRoleDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GOGroupRoleDataObject(System.String gOGroupName, System.String gORoleName)
			: base()
		{
			this._gOGroupName = gOGroupName;
			this._gORoleName = gORoleName;
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GOGroupRoleDataObject(IdentifyingFieldsCollection<System.String,System.String> primaryKey)
			: base()
		{
			this._gOGroupName = primaryKey.IdentifyingField1;
			this._gORoleName = primaryKey.IdentifyingField2;
		}
		/// <summary>
		/// Copy Constructor
		/// </summary>
		public GOGroupRoleDataObject(GOGroupRoleDataObject template, bool deepCopy)
		{
			this.SetGOGroupNameValue(template.GOGroupName, false, false);
			this.SetGORoleNameValue(template.GORoleName, false, false);
 
			this._group_NewObjectId = template._group_NewObjectId;
 
			this._role_NewObjectId = template._role_NewObjectId;
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual GOGroupRoleDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual GOGroupRoleDataObject Copy(bool deepCopy)
		{
			return new GOGroupRoleDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var gOGroupRoleSource = sourceObject as GOGroupRoleDataObject;

			if (ReferenceEquals(null, gOGroupRoleSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetGOGroupNameValue(gOGroupRoleSource.GOGroupName, false, false);
			this.SetGORoleNameValue(gOGroupRoleSource.GORoleName, false, false);
			this._group_NewObjectId = (sourceObject as GOGroupRoleDataObject)._group_NewObjectId;

			this._role_NewObjectId = (sourceObject as GOGroupRoleDataObject)._role_NewObjectId;

			if (deepCopy)
			{
				this.ObjectsDataSet = gOGroupRoleSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(gOGroupRoleSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as GOGroupRoleDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._gOGroupName == this._gOGroupName && p._gORoleName == this._gORoleName;
        }


        public override int GetHashCode()
        {		
			return HashHelper.RSHash(_gOGroupName,_gORoleName);
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {
			if (this._group_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._group_NewObjectId))
				{
                    this._group_NewObjectId = null;
				}
                else
				{
					this._group_NewObjectId = datasetMergingInternalIdMapping[(int) this._group_NewObjectId];
				}
			}

			if (this._role_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._role_NewObjectId))
				{
                    this._role_NewObjectId = null;
				}
                else
				{
					this._role_NewObjectId = datasetMergingInternalIdMapping[(int) this._role_NewObjectId];
				}
			}

		}

		#endregion
        
		#region Relation properties		
		
      public virtual void SetGroupValue(GOGroupDataObject valueToSet)
		{
			SetGroupValue(valueToSet, true, true);
		}

        public virtual void SetGroupValue(GOGroupDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			GOGroupDataObject existing_group = null ;

			if ( !(this.GOGroupName == null || ObjectsDataSet == null))
			{
				var key = this._group_NewObjectId == null ? new GOGroupDataObject(this.GOGroupName) { IsNew = false } : new GOGroupDataObject() { IsNew = true, InternalObjectId = this._group_NewObjectId };			
				existing_group = (GOGroupDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_group ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("Group", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "GOGroupRoleDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_group_NewObjectId != valueToSet.InternalObjectId)
					{
						_group_NewObjectId = valueToSet.InternalObjectId;
						_gOGroupName = valueToSet.Name;
						OnPropertyChanged("GOGroupName",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_gOGroupName != valueToSet.Name)
					{
						_group_NewObjectId = null;

						_gOGroupName = valueToSet.Name;
						OnPropertyChanged("GOGroupName",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_gOGroupName = null;
				OnPropertyChanged("GOGroupName",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_group ,valueToSet))
				OnPropertyChanged("Group", notifyChanges, dirtyHandlerOn);
		}

		private bool __groupCurrentLoading = false;
		public virtual GOGroupDataObject LoadGroup(bool skipSecurity = false)
		{
			return LoadGroup(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual GOGroupDataObject LoadGroup(Parameters parameters, bool skipSecurity = false)
		{
			var group = GetGroup(allowLazyLoading: false); 
			if (group != null)
				return group;

			
			group = (GOGroupDataObject)ObjectsDataSet.GetObject(new GOGroupDataObject(this.GOGroupName) { IsNew = false });

            if (group == null && !__groupCurrentLoading)
            {
				__groupCurrentLoading = true;
                group = ApplicationSettings.Container.Resolve<IDataProvider<GOGroupDataObject>>().Get(new GOGroupDataObject(this.GOGroupName), parameters : parameters, skipSecurity: skipSecurity);
                SetGroupValue(group, false, false);
				__groupCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return group == null ? null : ObjectsDataSet.GetObject(group);
		}
		
		[JsonProperty]
		public virtual GOGroupDataObject Group 
		{
			get
			{			
				return GetGroup(true);
			}
			set
			{
				SetGroupValue(value);
			}
		}
		
		public virtual bool ShouldSerializeGroup()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOGroupRoleDataObject") && ObjectsDataSet.RelationsToInclude["GOGroupRoleDataObject"].Contains("Group");
		}

		public virtual GOGroupDataObject GetGroup(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			GOGroupDataObject group;

				
			if (_group_NewObjectId != null)
			{
				group = (GOGroupDataObject)ObjectsDataSet.GetObject(new GOGroupDataObject() { IsNew = true, InternalObjectId = _group_NewObjectId });
			}
			else
			{
				if (GOGroupName == null)
					group = null;
				else
				group = (GOGroupDataObject)ObjectsDataSet.GetObject(new GOGroupDataObject(this.GOGroupName) { IsNew = false });
				
				if (allowLazyLoading && group == null && LazyLoadingEnabled)
				{
					group = LoadGroup();
				}
			}
				
			return group;
		}

		public virtual System.String GroupForeignKey
		{
			get { return GOGroupName; }
			set 
			{	
				GOGroupName = value;
			}
			
		}
		

      public virtual void SetRoleValue(GORoleDataObject valueToSet)
		{
			SetRoleValue(valueToSet, true, true);
		}

        public virtual void SetRoleValue(GORoleDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			GORoleDataObject existing_role = null ;

			if ( !(this.GORoleName == null || ObjectsDataSet == null))
			{
				var key = this._role_NewObjectId == null ? new GORoleDataObject(this.GORoleName) { IsNew = false } : new GORoleDataObject() { IsNew = true, InternalObjectId = this._role_NewObjectId };			
				existing_role = (GORoleDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_role ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("Role", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "GOGroupRoleDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_role_NewObjectId != valueToSet.InternalObjectId)
					{
						_role_NewObjectId = valueToSet.InternalObjectId;
						_gORoleName = valueToSet.Name;
						OnPropertyChanged("GORoleName",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_gORoleName != valueToSet.Name)
					{
						_role_NewObjectId = null;

						_gORoleName = valueToSet.Name;
						OnPropertyChanged("GORoleName",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_gORoleName = null;
				OnPropertyChanged("GORoleName",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_role ,valueToSet))
				OnPropertyChanged("Role", notifyChanges, dirtyHandlerOn);
		}

		private bool __roleCurrentLoading = false;
		public virtual GORoleDataObject LoadRole(bool skipSecurity = false)
		{
			return LoadRole(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual GORoleDataObject LoadRole(Parameters parameters, bool skipSecurity = false)
		{
			var role = GetRole(allowLazyLoading: false); 
			if (role != null)
				return role;

			
			role = (GORoleDataObject)ObjectsDataSet.GetObject(new GORoleDataObject(this.GORoleName) { IsNew = false });

            if (role == null && !__roleCurrentLoading)
            {
				__roleCurrentLoading = true;
                role = ApplicationSettings.Container.Resolve<IDataProvider<GORoleDataObject>>().Get(new GORoleDataObject(this.GORoleName), parameters : parameters, skipSecurity: skipSecurity);
                SetRoleValue(role, false, false);
				__roleCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return role == null ? null : ObjectsDataSet.GetObject(role);
		}
		
		[JsonProperty]
		public virtual GORoleDataObject Role 
		{
			get
			{			
				return GetRole(true);
			}
			set
			{
				SetRoleValue(value);
			}
		}
		
		public virtual bool ShouldSerializeRole()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOGroupRoleDataObject") && ObjectsDataSet.RelationsToInclude["GOGroupRoleDataObject"].Contains("Role");
		}

		public virtual GORoleDataObject GetRole(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			GORoleDataObject role;

				
			if (_role_NewObjectId != null)
			{
				role = (GORoleDataObject)ObjectsDataSet.GetObject(new GORoleDataObject() { IsNew = true, InternalObjectId = _role_NewObjectId });
			}
			else
			{
				if (GORoleName == null)
					role = null;
				else
				role = (GORoleDataObject)ObjectsDataSet.GetObject(new GORoleDataObject(this.GORoleName) { IsNew = false });
				
				if (allowLazyLoading && role == null && LazyLoadingEnabled)
				{
					role = LoadRole();
				}
			}
				
			return role;
		}

		public virtual System.String RoleForeignKey
		{
			get { return GORoleName; }
			set 
			{	
				GORoleName = value;
			}
			
		}
		

		public override void ClearLazyLoadFlags()
		{
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			if (LoadGroup() != null)
				result.Add(Group);
			if (LoadRole() != null)
				result.Add(Role);
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return
				Role == other ||
				(other is GORoleDataObject && (GORoleName != default(System.String)) && (GORoleName == (other as GORoleDataObject).Name)) || 
				Group == other ||
				(other is GOGroupDataObject && (GOGroupName != default(System.String)) && (GOGroupName == (other as GOGroupDataObject).Name)); 
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual IdentifyingFieldsCollection<System.String,System.String> PrimaryKeysCollection
		{
			get { return new IdentifyingFieldsCollection<System.String,System.String>(GOGroupName,GORoleName); }	
		}		
	
			
			
		public virtual void SetGOGroupNameValue(System.String valueToSet)
		{
			SetGOGroupNameValue(valueToSet, true, true);
		}

		public virtual void SetGOGroupNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_gOGroupName != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_gOGroupName = valueToSet;

				OnPropertyChanged("GOGroupName", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKeysCollection", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The GO Group Name property of the GOGroupRole DataObject</summary>
        public virtual System.String GOGroupName 
		{
			get	{ return _gOGroupName; }
			
			
			set
			{
				SetGOGroupNameValue(value);
			}
		}		
			
			
		public virtual void SetGORoleNameValue(System.String valueToSet)
		{
			SetGORoleNameValue(valueToSet, true, true);
		}

		public virtual void SetGORoleNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_gORoleName != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_gORoleName = valueToSet;

				OnPropertyChanged("GORoleName", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKeysCollection", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The GORoleName property of the GOGroupRole DataObject</summary>
        public virtual System.String GORoleName 
		{
			get	{ return _gORoleName; }
			
			
			set
			{
				SetGORoleNameValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects


        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new GOGroupRoleDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is GOGroupRoleDataObject))
				return false;

			var p = (GOGroupRoleDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.GOGroupName == p.GOGroupName;
			fieldsComparison &= this.GORoleName == p.GORoleName;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{GOGroupName}/{GORoleName}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			// Only supported for single PKs, all other PKs should be user-assigned
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class GOGroupRoleCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<IdentifyingFieldsCollection<System.String,System.String>> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public GOGroupRoleCollectionContainer()
		{
		}
		
        public GOGroupRoleCollectionContainer(DataObjectCollection<GOGroupRoleDataObject> gOGroupRoleItems)
        {
			Construct(gOGroupRoleItems);
		}

		public void Construct(DataObjectCollection<GOGroupRoleDataObject> gOGroupRoleItems)
        {
            if (gOGroupRoleItems == null)
                return;
				
			this.PrimaryKeys = gOGroupRoleItems.Select(c => c.PrimaryKeysCollection).ToList();			
            if (gOGroupRoleItems.ObjectsDataSet == null)
            {
                gOGroupRoleItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = gOGroupRoleItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = gOGroupRoleItems.ObjectsDataSet;
		}

		public DataObjectCollection<GOGroupRoleDataObject> ExtractGOGroupRoleItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<GOGroupRoleDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<GOGroupRoleDataObject>(typeof(GOGroupRoleDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class GOGroupRoleContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public IdentifyingFieldsCollection<System.String,System.String> PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public GOGroupRoleContainer() 
		{
		}

        public GOGroupRoleContainer(GOGroupRoleDataObject gOGroupRole) 
		{
			Construct(gOGroupRole, false);
		}

        public GOGroupRoleContainer(GOGroupRoleDataObject gOGroupRole, bool includeDirtyObjectsOnly) 
		{
			Construct(gOGroupRole, includeDirtyObjectsOnly);
		}

		public virtual void Construct(GOGroupRoleDataObject gOGroupRole, bool includeDirtyObjectsOnly)
		{
            if (gOGroupRole == null)
                return;

			this.PrimaryKey = gOGroupRole.PrimaryKeysCollection;		
			
            if (gOGroupRole.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(gOGroupRole);
            }

			if(gOGroupRole.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity GOGroupRole", "Unable to set a dataset to the entity. Container may not be initialized", "GOGroupRoleDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : GOGroupRole");
			}

			if(gOGroupRole.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in GOGroupRoleDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "GOGroupRoleDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in GOGroupRoleDataObject");
			}
			this.InternalObjectId = (int) gOGroupRole.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? gOGroupRole.ObjectsDataSet.CloneDirtyObjects() : gOGroupRole.ObjectsDataSet;
		}
		
		public GOGroupRoleDataObject ExtractGOGroupRole()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<GOGroupRoleDataObject>(typeof(GOGroupRoleDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}