////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.ExceptionHandling;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;

namespace Solid.Data.DataObjects
{
	/// <summary>
	/// ObjectsDataSet ObjectsDataSet class 
	/// </summary>
	[JsonObject(MemberSerialization.OptIn)]
    public class ObjectsDataSet : ObjectsDataSetBase
    {
		#region fields
		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		private int _currentNewObjectId = 0;
        private ConcurrentDictionary<int, int> _datasetMergingInternalIdMapping;

		[JsonProperty("CountryObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private CountryObjectsDataSet _countryObjectsDataSet = null;
		[JsonProperty("GOGroupObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOGroupObjectsDataSet _gOGroupObjectsDataSet = null;
		[JsonProperty("GOGroupRoleObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOGroupRoleObjectsDataSet _gOGroupRoleObjectsDataSet = null;
		[JsonProperty("GOLoginHistoryObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOLoginHistoryObjectsDataSet _gOLoginHistoryObjectsDataSet = null;
		[JsonProperty("GORoleObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GORoleObjectsDataSet _gORoleObjectsDataSet = null;
		[JsonProperty("GOUserObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOUserObjectsDataSet _gOUserObjectsDataSet = null;
		[JsonProperty("GOUserGroupObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOUserGroupObjectsDataSet _gOUserGroupObjectsDataSet = null;
		[JsonProperty("GOUserRoleObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private GOUserRoleObjectsDataSet _gOUserRoleObjectsDataSet = null;
		[JsonProperty("LocationObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private LocationObjectsDataSet _locationObjectsDataSet = null;
		[JsonProperty("PlaceObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private PlaceObjectsDataSet _placeObjectsDataSet = null;
		[JsonProperty("PlaceToLocationObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private PlaceToLocationObjectsDataSet _placeToLocationObjectsDataSet = null;
		[JsonProperty("UserProfileObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private UserProfileObjectsDataSet _userProfileObjectsDataSet = null;
		[JsonProperty("VisitedPlaceObjectsDataSet", DefaultValueHandling  = DefaultValueHandling.Ignore)]
		private VisitedPlaceObjectsDataSet _visitedPlaceObjectsDataSet = null;

		#endregion
		
		#region properties
		
		public int CurrentNewObjectId
		{
			get { return _currentNewObjectId; }
			set { _currentNewObjectId = value; }
		}

		// temp mapping used when merging dataset with relations between data objects marked as new
        public ConcurrentDictionary<int, int> DatasetMergingInternalIdMapping 
        { 
            get
            {
				if (_datasetMergingInternalIdMapping == null)
					 _datasetMergingInternalIdMapping = new ConcurrentDictionary<int, int>();
                
				return _datasetMergingInternalIdMapping;
            }
            set
            {
                _datasetMergingInternalIdMapping = value;
            }
        }

		public CountryObjectsDataSet CountryObjectsDataSet 
		{ 
			get 
			{ 
				if (_countryObjectsDataSet == null)
					return _countryObjectsDataSet = new CountryObjectsDataSet(this);
					
				return _countryObjectsDataSet; 
			}
			set { _countryObjectsDataSet = value; }
		}
		public GOGroupObjectsDataSet GOGroupObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOGroupObjectsDataSet == null)
					return _gOGroupObjectsDataSet = new GOGroupObjectsDataSet(this);
					
				return _gOGroupObjectsDataSet; 
			}
			set { _gOGroupObjectsDataSet = value; }
		}
		public GOGroupRoleObjectsDataSet GOGroupRoleObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOGroupRoleObjectsDataSet == null)
					return _gOGroupRoleObjectsDataSet = new GOGroupRoleObjectsDataSet(this);
					
				return _gOGroupRoleObjectsDataSet; 
			}
			set { _gOGroupRoleObjectsDataSet = value; }
		}
		public GOLoginHistoryObjectsDataSet GOLoginHistoryObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOLoginHistoryObjectsDataSet == null)
					return _gOLoginHistoryObjectsDataSet = new GOLoginHistoryObjectsDataSet(this);
					
				return _gOLoginHistoryObjectsDataSet; 
			}
			set { _gOLoginHistoryObjectsDataSet = value; }
		}
		public GORoleObjectsDataSet GORoleObjectsDataSet 
		{ 
			get 
			{ 
				if (_gORoleObjectsDataSet == null)
					return _gORoleObjectsDataSet = new GORoleObjectsDataSet(this);
					
				return _gORoleObjectsDataSet; 
			}
			set { _gORoleObjectsDataSet = value; }
		}
		public GOUserObjectsDataSet GOUserObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOUserObjectsDataSet == null)
					return _gOUserObjectsDataSet = new GOUserObjectsDataSet(this);
					
				return _gOUserObjectsDataSet; 
			}
			set { _gOUserObjectsDataSet = value; }
		}
		public GOUserGroupObjectsDataSet GOUserGroupObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOUserGroupObjectsDataSet == null)
					return _gOUserGroupObjectsDataSet = new GOUserGroupObjectsDataSet(this);
					
				return _gOUserGroupObjectsDataSet; 
			}
			set { _gOUserGroupObjectsDataSet = value; }
		}
		public GOUserRoleObjectsDataSet GOUserRoleObjectsDataSet 
		{ 
			get 
			{ 
				if (_gOUserRoleObjectsDataSet == null)
					return _gOUserRoleObjectsDataSet = new GOUserRoleObjectsDataSet(this);
					
				return _gOUserRoleObjectsDataSet; 
			}
			set { _gOUserRoleObjectsDataSet = value; }
		}
		public LocationObjectsDataSet LocationObjectsDataSet 
		{ 
			get 
			{ 
				if (_locationObjectsDataSet == null)
					return _locationObjectsDataSet = new LocationObjectsDataSet(this);
					
				return _locationObjectsDataSet; 
			}
			set { _locationObjectsDataSet = value; }
		}
		public PlaceObjectsDataSet PlaceObjectsDataSet 
		{ 
			get 
			{ 
				if (_placeObjectsDataSet == null)
					return _placeObjectsDataSet = new PlaceObjectsDataSet(this);
					
				return _placeObjectsDataSet; 
			}
			set { _placeObjectsDataSet = value; }
		}
		public PlaceToLocationObjectsDataSet PlaceToLocationObjectsDataSet 
		{ 
			get 
			{ 
				if (_placeToLocationObjectsDataSet == null)
					return _placeToLocationObjectsDataSet = new PlaceToLocationObjectsDataSet(this);
					
				return _placeToLocationObjectsDataSet; 
			}
			set { _placeToLocationObjectsDataSet = value; }
		}
		public UserProfileObjectsDataSet UserProfileObjectsDataSet 
		{ 
			get 
			{ 
				if (_userProfileObjectsDataSet == null)
					return _userProfileObjectsDataSet = new UserProfileObjectsDataSet(this);
					
				return _userProfileObjectsDataSet; 
			}
			set { _userProfileObjectsDataSet = value; }
		}
		public VisitedPlaceObjectsDataSet VisitedPlaceObjectsDataSet 
		{ 
			get 
			{ 
				if (_visitedPlaceObjectsDataSet == null)
					return _visitedPlaceObjectsDataSet = new VisitedPlaceObjectsDataSet(this);
					
				return _visitedPlaceObjectsDataSet; 
			}
			set { _visitedPlaceObjectsDataSet = value; }
		}
		
		public ConcurrentDictionary< int, CountryDataObject> CountryObjects 
		{ 
			get
			{				
				return CountryObjectsDataSet.CountryObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOGroupDataObject> GOGroupObjects 
		{ 
			get
			{				
				return GOGroupObjectsDataSet.GOGroupObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOGroupRoleDataObject> GOGroupRoleObjects 
		{ 
			get
			{				
				return GOGroupRoleObjectsDataSet.GOGroupRoleObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOLoginHistoryDataObject> GOLoginHistoryObjects 
		{ 
			get
			{				
				return GOLoginHistoryObjectsDataSet.GOLoginHistoryObjects;
			}
		}
		
		public ConcurrentDictionary< int, GORoleDataObject> GORoleObjects 
		{ 
			get
			{				
				return GORoleObjectsDataSet.GORoleObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOUserDataObject> GOUserObjects 
		{ 
			get
			{				
				return GOUserObjectsDataSet.GOUserObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOUserGroupDataObject> GOUserGroupObjects 
		{ 
			get
			{				
				return GOUserGroupObjectsDataSet.GOUserGroupObjects;
			}
		}
		
		public ConcurrentDictionary< int, GOUserRoleDataObject> GOUserRoleObjects 
		{ 
			get
			{				
				return GOUserRoleObjectsDataSet.GOUserRoleObjects;
			}
		}
		
		public ConcurrentDictionary< int, LocationDataObject> LocationObjects 
		{ 
			get
			{				
				return LocationObjectsDataSet.LocationObjects;
			}
		}
		
		public ConcurrentDictionary< int, PlaceDataObject> PlaceObjects 
		{ 
			get
			{				
				return PlaceObjectsDataSet.PlaceObjects;
			}
		}
		
		public ConcurrentDictionary< int, PlaceToLocationDataObject> PlaceToLocationObjects 
		{ 
			get
			{				
				return PlaceToLocationObjectsDataSet.PlaceToLocationObjects;
			}
		}
		
		public ConcurrentDictionary< int, UserProfileDataObject> UserProfileObjects 
		{ 
			get
			{				
				return UserProfileObjectsDataSet.UserProfileObjects;
			}
		}
		
		public ConcurrentDictionary< int, VisitedPlaceDataObject> VisitedPlaceObjects 
		{ 
			get
			{				
				return VisitedPlaceObjectsDataSet.VisitedPlaceObjects;
			}
		}

		#endregion
		
		#region initialization
		
		public ObjectsDataSet()
		{
		}

        private static Dictionary<string, Dictionary<string, PathNode>> _pathNodes;

        protected override Dictionary<string, Dictionary<string, PathNode>> PathNodes
        {
            get
            {
                if (_pathNodes == null)
                {
                    _pathNodes = new Dictionary<string,Dictionary<string,PathNode>>();
					_pathNodes.Add ( "GORoleDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GORoleDataObject"].Add( "grouproleitems", new PathNode { EntityName = "GOGroupRoleDataObject", PathName = "GroupRoleItems" });
					_pathNodes["GORoleDataObject"].Add( "userroleitems", new PathNode { EntityName = "GOUserRoleDataObject", PathName = "UserRoleItems" });
					_pathNodes.Add ( "VisitedPlaceDataObject", new Dictionary<string,PathNode>());

					_pathNodes["VisitedPlaceDataObject"].Add( "userprofile", new PathNode { EntityName = "UserProfileDataObject", PathName = "UserProfile" });
					_pathNodes["VisitedPlaceDataObject"].Add( "country", new PathNode { EntityName = "CountryDataObject", PathName = "Country" });
					_pathNodes.Add ( "GOGroupRoleDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GOGroupRoleDataObject"].Add( "group", new PathNode { EntityName = "GOGroupDataObject", PathName = "Group" });
					_pathNodes["GOGroupRoleDataObject"].Add( "role", new PathNode { EntityName = "GORoleDataObject", PathName = "Role" });
					_pathNodes.Add ( "PlaceDataObject", new Dictionary<string,PathNode>());

					_pathNodes["PlaceDataObject"].Add( "country", new PathNode { EntityName = "CountryDataObject", PathName = "Country" });
					_pathNodes["PlaceDataObject"].Add( "placetolocationitems", new PathNode { EntityName = "PlaceToLocationDataObject", PathName = "PlaceToLocationItems" });
					_pathNodes.Add ( "UserProfileDataObject", new Dictionary<string,PathNode>());

					_pathNodes["UserProfileDataObject"].Add( "gouser", new PathNode { EntityName = "GOUserDataObject", PathName = "GOUser" });
					_pathNodes["UserProfileDataObject"].Add( "visitedplaceitems", new PathNode { EntityName = "VisitedPlaceDataObject", PathName = "VisitedPlaceItems" });
					_pathNodes.Add ( "LocationDataObject", new Dictionary<string,PathNode>());

					_pathNodes["LocationDataObject"].Add( "country", new PathNode { EntityName = "CountryDataObject", PathName = "Country" });
					_pathNodes["LocationDataObject"].Add( "placetolocationitems", new PathNode { EntityName = "PlaceToLocationDataObject", PathName = "PlaceToLocationItems" });
					_pathNodes.Add ( "PlaceToLocationDataObject", new Dictionary<string,PathNode>());

					_pathNodes["PlaceToLocationDataObject"].Add( "location", new PathNode { EntityName = "LocationDataObject", PathName = "Location" });
					_pathNodes["PlaceToLocationDataObject"].Add( "place", new PathNode { EntityName = "PlaceDataObject", PathName = "Place" });
					_pathNodes.Add ( "GOUserDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GOUserDataObject"].Add( "userroleitems", new PathNode { EntityName = "GOUserRoleDataObject", PathName = "UserRoleItems" });
					_pathNodes["GOUserDataObject"].Add( "userprofile", new PathNode { EntityName = "UserProfileDataObject", PathName = "UserProfile" });
					_pathNodes["GOUserDataObject"].Add( "usergroupitems", new PathNode { EntityName = "GOUserGroupDataObject", PathName = "UserGroupItems" });
					_pathNodes.Add ( "GOGroupDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GOGroupDataObject"].Add( "usergroupitems", new PathNode { EntityName = "GOUserGroupDataObject", PathName = "UserGroupItems" });
					_pathNodes["GOGroupDataObject"].Add( "grouproleitems", new PathNode { EntityName = "GOGroupRoleDataObject", PathName = "GroupRoleItems" });
					_pathNodes.Add ( "GOUserRoleDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GOUserRoleDataObject"].Add( "role", new PathNode { EntityName = "GORoleDataObject", PathName = "Role" });
					_pathNodes["GOUserRoleDataObject"].Add( "user", new PathNode { EntityName = "GOUserDataObject", PathName = "User" });
					_pathNodes.Add ( "CountryDataObject", new Dictionary<string,PathNode>());

					_pathNodes["CountryDataObject"].Add( "visitedplaceitems", new PathNode { EntityName = "VisitedPlaceDataObject", PathName = "VisitedPlaceItems" });
					_pathNodes["CountryDataObject"].Add( "placeitems", new PathNode { EntityName = "PlaceDataObject", PathName = "PlaceItems" });
					_pathNodes["CountryDataObject"].Add( "locationitems", new PathNode { EntityName = "LocationDataObject", PathName = "LocationItems" });
					_pathNodes.Add ( "GOUserGroupDataObject", new Dictionary<string,PathNode>());

					_pathNodes["GOUserGroupDataObject"].Add( "group", new PathNode { EntityName = "GOGroupDataObject", PathName = "Group" });
					_pathNodes["GOUserGroupDataObject"].Add( "user", new PathNode { EntityName = "GOUserDataObject", PathName = "User" });
				}

                return _pathNodes;
            }
        }

		private static Dictionary<string,string> _entityRelations = new Dictionary<string,string>()
        {
          { "GORole", "GroupRoleItems, UserRoleItems" },
          { "VisitedPlace", "UserProfile, Country" },
          { "GOGroupRole", "Group, Role" },
          { "Place", "Country, PlaceToLocationItems" },
          { "UserProfile", "GOUser, VisitedPlaceItems" },
          { "Location", "Country, PlaceToLocationItems" },
          { "PlaceToLocation", "Location, Place" },
          { "GOUser", "UserRoleItems, UserProfile, UserGroupItems" },
          { "GOGroup", "UserGroupItems, GroupRoleItems" },
          { "GOUserRole", "Role, User" },
          { "Country", "VisitedPlaceItems, PlaceItems, LocationItems" },
          { "GOUserGroup", "Group, User" },
      };

        protected override Dictionary<string, string> EntityRelations 
		{
			get
			{
				return _entityRelations;
			}
		}
		
		#endregion
		
		#region methods
		
		public int GetNextNewObjectId()
		{
            return System.Threading.Interlocked.Increment(ref _currentNewObjectId);
		}

		public override IEnumerable<IDataObject> GetAllObjects()
		{
			if (_countryObjectsDataSet != null)
			{
				foreach(var country in _countryObjectsDataSet.CountryObjects.Values)
				{
					yield return country; 
				}				
			}
			if (_gOGroupObjectsDataSet != null)
			{
				foreach(var gOGroup in _gOGroupObjectsDataSet.GOGroupObjects.Values)
				{
					yield return gOGroup; 
				}				
			}
			if (_gOGroupRoleObjectsDataSet != null)
			{
				foreach(var gOGroupRole in _gOGroupRoleObjectsDataSet.GOGroupRoleObjects.Values)
				{
					yield return gOGroupRole; 
				}				
			}
			if (_gOLoginHistoryObjectsDataSet != null)
			{
				foreach(var gOLoginHistory in _gOLoginHistoryObjectsDataSet.GOLoginHistoryObjects.Values)
				{
					yield return gOLoginHistory; 
				}				
			}
			if (_gORoleObjectsDataSet != null)
			{
				foreach(var gORole in _gORoleObjectsDataSet.GORoleObjects.Values)
				{
					yield return gORole; 
				}				
			}
			if (_gOUserObjectsDataSet != null)
			{
				foreach(var gOUser in _gOUserObjectsDataSet.GOUserObjects.Values)
				{
					yield return gOUser; 
				}				
			}
			if (_gOUserGroupObjectsDataSet != null)
			{
				foreach(var gOUserGroup in _gOUserGroupObjectsDataSet.GOUserGroupObjects.Values)
				{
					yield return gOUserGroup; 
				}				
			}
			if (_gOUserRoleObjectsDataSet != null)
			{
				foreach(var gOUserRole in _gOUserRoleObjectsDataSet.GOUserRoleObjects.Values)
				{
					yield return gOUserRole; 
				}				
			}
			if (_locationObjectsDataSet != null)
			{
				foreach(var location in _locationObjectsDataSet.LocationObjects.Values)
				{
					yield return location; 
				}				
			}
			if (_placeObjectsDataSet != null)
			{
				foreach(var place in _placeObjectsDataSet.PlaceObjects.Values)
				{
					yield return place; 
				}				
			}
			if (_placeToLocationObjectsDataSet != null)
			{
				foreach(var placeToLocation in _placeToLocationObjectsDataSet.PlaceToLocationObjects.Values)
				{
					yield return placeToLocation; 
				}				
			}
			if (_userProfileObjectsDataSet != null)
			{
				foreach(var userProfile in _userProfileObjectsDataSet.UserProfileObjects.Values)
				{
					yield return userProfile; 
				}				
			}
			if (_visitedPlaceObjectsDataSet != null)
			{
				foreach(var visitedPlace in _visitedPlaceObjectsDataSet.VisitedPlaceObjects.Values)
				{
					yield return visitedPlace; 
				}				
			}
		}

		public List<IObjectsDataSet> GetAllEntityObjectsDataSets()
		{
			var toReturn = new List<IObjectsDataSet>();
			
			if (_countryObjectsDataSet != null)
				toReturn.Add(_countryObjectsDataSet);				
			if (_gOGroupObjectsDataSet != null)
				toReturn.Add(_gOGroupObjectsDataSet);				
			if (_gOGroupRoleObjectsDataSet != null)
				toReturn.Add(_gOGroupRoleObjectsDataSet);				
			if (_gOLoginHistoryObjectsDataSet != null)
				toReturn.Add(_gOLoginHistoryObjectsDataSet);				
			if (_gORoleObjectsDataSet != null)
				toReturn.Add(_gORoleObjectsDataSet);				
			if (_gOUserObjectsDataSet != null)
				toReturn.Add(_gOUserObjectsDataSet);				
			if (_gOUserGroupObjectsDataSet != null)
				toReturn.Add(_gOUserGroupObjectsDataSet);				
			if (_gOUserRoleObjectsDataSet != null)
				toReturn.Add(_gOUserRoleObjectsDataSet);				
			if (_locationObjectsDataSet != null)
				toReturn.Add(_locationObjectsDataSet);				
			if (_placeObjectsDataSet != null)
				toReturn.Add(_placeObjectsDataSet);				
			if (_placeToLocationObjectsDataSet != null)
				toReturn.Add(_placeToLocationObjectsDataSet);				
			if (_userProfileObjectsDataSet != null)
				toReturn.Add(_userProfileObjectsDataSet);				
			if (_visitedPlaceObjectsDataSet != null)
				toReturn.Add(_visitedPlaceObjectsDataSet);				
			return toReturn;
		}

		public List<IObjectsDataSet> GetEntityObjectsDataSetsInHierarchy(Type entityType)
        {
			var toReturn = new List<IObjectsDataSet>();
			
			if (entityType == typeof(CountryDataObject))
            {
				if (_countryObjectsDataSet != null)
					toReturn.Add(_countryObjectsDataSet);				
			}       
			if (entityType == typeof(GOGroupDataObject))
            {
				if (_gOGroupObjectsDataSet != null)
					toReturn.Add(_gOGroupObjectsDataSet);				
			}       
			if (entityType == typeof(GOGroupRoleDataObject))
            {
				if (_gOGroupRoleObjectsDataSet != null)
					toReturn.Add(_gOGroupRoleObjectsDataSet);				
			}       
			if (entityType == typeof(GOLoginHistoryDataObject))
            {
				if (_gOLoginHistoryObjectsDataSet != null)
					toReturn.Add(_gOLoginHistoryObjectsDataSet);				
			}       
			if (entityType == typeof(GORoleDataObject))
            {
				if (_gORoleObjectsDataSet != null)
					toReturn.Add(_gORoleObjectsDataSet);				
			}       
			if (entityType == typeof(GOUserDataObject))
            {
				if (_gOUserObjectsDataSet != null)
					toReturn.Add(_gOUserObjectsDataSet);				
			}       
			if (entityType == typeof(GOUserGroupDataObject))
            {
				if (_gOUserGroupObjectsDataSet != null)
					toReturn.Add(_gOUserGroupObjectsDataSet);				
			}       
			if (entityType == typeof(GOUserRoleDataObject))
            {
				if (_gOUserRoleObjectsDataSet != null)
					toReturn.Add(_gOUserRoleObjectsDataSet);				
			}       
			if (entityType == typeof(LocationDataObject))
            {
				if (_locationObjectsDataSet != null)
					toReturn.Add(_locationObjectsDataSet);				
			}       
			if (entityType == typeof(PlaceDataObject))
            {
				if (_placeObjectsDataSet != null)
					toReturn.Add(_placeObjectsDataSet);				
			}       
			if (entityType == typeof(PlaceToLocationDataObject))
            {
				if (_placeToLocationObjectsDataSet != null)
					toReturn.Add(_placeToLocationObjectsDataSet);				
			}       
			if (entityType == typeof(UserProfileDataObject))
            {
				if (_userProfileObjectsDataSet != null)
					toReturn.Add(_userProfileObjectsDataSet);				
			}       
			if (entityType == typeof(VisitedPlaceDataObject))
            {
				if (_visitedPlaceObjectsDataSet != null)
					toReturn.Add(_visitedPlaceObjectsDataSet);				
			}       
			return toReturn;
		}

		public IObjectsDataSet GetEntityObjectsDataSet(Type entityType)
        {
			if (entityType == typeof(CountryDataObject))
            {		
				return CountryObjectsDataSet;
			}
			if (entityType == typeof(GOGroupDataObject))
            {		
				return GOGroupObjectsDataSet;
			}
			if (entityType == typeof(GOGroupRoleDataObject))
            {		
				return GOGroupRoleObjectsDataSet;
			}
			if (entityType == typeof(GOLoginHistoryDataObject))
            {		
				return GOLoginHistoryObjectsDataSet;
			}
			if (entityType == typeof(GORoleDataObject))
            {		
				return GORoleObjectsDataSet;
			}
			if (entityType == typeof(GOUserDataObject))
            {		
				return GOUserObjectsDataSet;
			}
			if (entityType == typeof(GOUserGroupDataObject))
            {		
				return GOUserGroupObjectsDataSet;
			}
			if (entityType == typeof(GOUserRoleDataObject))
            {		
				return GOUserRoleObjectsDataSet;
			}
			if (entityType == typeof(LocationDataObject))
            {		
				return LocationObjectsDataSet;
			}
			if (entityType == typeof(PlaceDataObject))
            {		
				return PlaceObjectsDataSet;
			}
			if (entityType == typeof(PlaceToLocationDataObject))
            {		
				return PlaceToLocationObjectsDataSet;
			}
			if (entityType == typeof(UserProfileDataObject))
            {		
				return UserProfileObjectsDataSet;
			}
			if (entityType == typeof(VisitedPlaceDataObject))
            {		
				return VisitedPlaceObjectsDataSet;
			}
			return null;
		}
			
		public override void AddObject(IDataObject objectToAdd, bool replaceIfExists)
        {
			EnsureInitialized();

            // If object to add part of another dataset => merge the data sets
            if (objectToAdd.ObjectsDataSet != null && !ReferenceEquals(objectToAdd.ObjectsDataSet, this))
            {
                this.Merge(objectToAdd.ObjectsDataSet, true);
            }
            else
            {
                GetEntityObjectsDataSet(objectToAdd.GetType()).AddObject(objectToAdd, replaceIfExists);
                objectToAdd.ObjectsDataSet = this;
            }
        }

		public override void RemoveObject(IDataObject objectToRemove)
        {
			EnsureInitialized();
			GetEntityObjectsDataSet(objectToRemove.GetType()).RemoveObject(objectToRemove);
      }

        public override TDataObject GetObject<TDataObject>(Type objectBaseType, int internalObjectId) 
		{
			EnsureInitialized();
			TDataObject toReturn = null;
			
			foreach(var entityDataSet in GetEntityObjectsDataSetsInHierarchy(objectBaseType))
			{
				toReturn = entityDataSet.GetObject<TDataObject>(objectBaseType, internalObjectId);
				if (toReturn != null)
					return toReturn;
			}
			
			return toReturn;
		}

		public override TDataObject GetObject<TDataObject>(TDataObject objectToGet)
        {
			EnsureInitialized();
			TDataObject toReturn = null;
			
			foreach(var entityDataSet in GetEntityObjectsDataSetsInHierarchy(objectToGet.GetType()))
			{
				toReturn = entityDataSet.GetObject(objectToGet);
				if (toReturn != null)
					return toReturn;
			}
			
			return toReturn;
        }

        public override IEnumerable<IDataObject> GetObjectsMarkedForDeletion()
        {
			EnsureInitialized();
			
			IEnumerable<IDataObject> result = new List<IDataObject>();
			
			foreach (var dataSet in GetAllEntityObjectsDataSets())
			{
				result	= result == null ? dataSet.GetObjectsMarkedForDeletion() : result.Union(dataSet.GetObjectsMarkedForDeletion());
			}
			
			return result;
        }

        public override IEnumerable<IDataObject> GetObjectsOutOfGraph()
        {
			EnsureInitialized();
			
			IEnumerable<IDataObject> result = new List<IDataObject>();
			
			foreach (var dataSet in GetAllEntityObjectsDataSets())
			{
				result	= result == null ? dataSet.GetObjectsOutOfGraph() : result.Union(dataSet.GetObjectsOutOfGraph());
			}
			
			return result;
        }

        public override void ReconstructIndexes()
        {
			EnsureInitialized();
			
			foreach (var dataSet in GetAllEntityObjectsDataSets())
			{
				dataSet.ReconstructIndexes();
			}
        }

        public override IObjectsDataSet Clone(IObjectsDataSet root)
        {
			throw new PulpException("Forbidden on root dataset");
		}
				
		public override IObjectsDataSet Clone()
        {
			var clone = new ObjectsDataSet();
	
			clone.CurrentNewObjectId = this.CurrentNewObjectId;
			
			if (_countryObjectsDataSet != null)
				clone.CountryObjectsDataSet = (CountryObjectsDataSet) CountryObjectsDataSet.Clone(this);
			if (_gOGroupObjectsDataSet != null)
				clone.GOGroupObjectsDataSet = (GOGroupObjectsDataSet) GOGroupObjectsDataSet.Clone(this);
			if (_gOGroupRoleObjectsDataSet != null)
				clone.GOGroupRoleObjectsDataSet = (GOGroupRoleObjectsDataSet) GOGroupRoleObjectsDataSet.Clone(this);
			if (_gOLoginHistoryObjectsDataSet != null)
				clone.GOLoginHistoryObjectsDataSet = (GOLoginHistoryObjectsDataSet) GOLoginHistoryObjectsDataSet.Clone(this);
			if (_gORoleObjectsDataSet != null)
				clone.GORoleObjectsDataSet = (GORoleObjectsDataSet) GORoleObjectsDataSet.Clone(this);
			if (_gOUserObjectsDataSet != null)
				clone.GOUserObjectsDataSet = (GOUserObjectsDataSet) GOUserObjectsDataSet.Clone(this);
			if (_gOUserGroupObjectsDataSet != null)
				clone.GOUserGroupObjectsDataSet = (GOUserGroupObjectsDataSet) GOUserGroupObjectsDataSet.Clone(this);
			if (_gOUserRoleObjectsDataSet != null)
				clone.GOUserRoleObjectsDataSet = (GOUserRoleObjectsDataSet) GOUserRoleObjectsDataSet.Clone(this);
			if (_locationObjectsDataSet != null)
				clone.LocationObjectsDataSet = (LocationObjectsDataSet) LocationObjectsDataSet.Clone(this);
			if (_placeObjectsDataSet != null)
				clone.PlaceObjectsDataSet = (PlaceObjectsDataSet) PlaceObjectsDataSet.Clone(this);
			if (_placeToLocationObjectsDataSet != null)
				clone.PlaceToLocationObjectsDataSet = (PlaceToLocationObjectsDataSet) PlaceToLocationObjectsDataSet.Clone(this);
			if (_userProfileObjectsDataSet != null)
				clone.UserProfileObjectsDataSet = (UserProfileObjectsDataSet) UserProfileObjectsDataSet.Clone(this);
			if (_visitedPlaceObjectsDataSet != null)
				clone.VisitedPlaceObjectsDataSet = (VisitedPlaceObjectsDataSet) VisitedPlaceObjectsDataSet.Clone(this);
            // Will reset the objects links to the root ObjectsDataSet to the new dataset
            clone.EnsureInitialized();
			return clone;
        }

        public override IObjectsDataSet CloneDirtyObjects(IObjectsDataSet root)
        {
			throw new PulpException("Forbidden on root dataset");
		}

		public override IObjectsDataSet CloneDirtyObjects()
		{
			var clone = new ObjectsDataSet();
	
			clone.CurrentNewObjectId = this.CurrentNewObjectId;
			
			if (_countryObjectsDataSet != null)	
				clone.CountryObjectsDataSet = (CountryObjectsDataSet) CountryObjectsDataSet.CloneDirtyObjects(this);
			if (_gOGroupObjectsDataSet != null)	
				clone.GOGroupObjectsDataSet = (GOGroupObjectsDataSet) GOGroupObjectsDataSet.CloneDirtyObjects(this);
			if (_gOGroupRoleObjectsDataSet != null)	
				clone.GOGroupRoleObjectsDataSet = (GOGroupRoleObjectsDataSet) GOGroupRoleObjectsDataSet.CloneDirtyObjects(this);
			if (_gOLoginHistoryObjectsDataSet != null)	
				clone.GOLoginHistoryObjectsDataSet = (GOLoginHistoryObjectsDataSet) GOLoginHistoryObjectsDataSet.CloneDirtyObjects(this);
			if (_gORoleObjectsDataSet != null)	
				clone.GORoleObjectsDataSet = (GORoleObjectsDataSet) GORoleObjectsDataSet.CloneDirtyObjects(this);
			if (_gOUserObjectsDataSet != null)	
				clone.GOUserObjectsDataSet = (GOUserObjectsDataSet) GOUserObjectsDataSet.CloneDirtyObjects(this);
			if (_gOUserGroupObjectsDataSet != null)	
				clone.GOUserGroupObjectsDataSet = (GOUserGroupObjectsDataSet) GOUserGroupObjectsDataSet.CloneDirtyObjects(this);
			if (_gOUserRoleObjectsDataSet != null)	
				clone.GOUserRoleObjectsDataSet = (GOUserRoleObjectsDataSet) GOUserRoleObjectsDataSet.CloneDirtyObjects(this);
			if (_locationObjectsDataSet != null)	
				clone.LocationObjectsDataSet = (LocationObjectsDataSet) LocationObjectsDataSet.CloneDirtyObjects(this);
			if (_placeObjectsDataSet != null)	
				clone.PlaceObjectsDataSet = (PlaceObjectsDataSet) PlaceObjectsDataSet.CloneDirtyObjects(this);
			if (_placeToLocationObjectsDataSet != null)	
				clone.PlaceToLocationObjectsDataSet = (PlaceToLocationObjectsDataSet) PlaceToLocationObjectsDataSet.CloneDirtyObjects(this);
			if (_userProfileObjectsDataSet != null)	
				clone.UserProfileObjectsDataSet = (UserProfileObjectsDataSet) UserProfileObjectsDataSet.CloneDirtyObjects(this);
			if (_visitedPlaceObjectsDataSet != null)	
				clone.VisitedPlaceObjectsDataSet = (VisitedPlaceObjectsDataSet) VisitedPlaceObjectsDataSet.CloneDirtyObjects(this);
            // Will reset the objects links to the root ObjectsDataSet to the new dataset
            clone.EnsureInitialized();
			return clone;
		}

		public override void Merge(IObjectsDataSet dataSetToMerge, bool updateOrginalInternalId)
        {
			EnsureInitialized();
			
            //Can't merge a dataset with itself
            if (ReferenceEquals(this, dataSetToMerge))
                return;

            var oldNotifyChanges = this.NotifyChanges;
            var oldDirtyHandlerOn = this.DirtyHandlerOn;
			this.NotifyChanges = false;
			this.DirtyHandlerOn = false;
			if((dataSetToMerge as ObjectsDataSet) == null)
			{
				_logEngine.LogError("Unable to Merge DataSet with null", "Unable to Merge DataSet with null", "ObjectsDataSet", null);
				throw new PulpException("Unable to Merge DataSet with null");
			}

			if ((dataSetToMerge as ObjectsDataSet)._countryObjectsDataSet != null)
				this.CountryObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).CountryObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOGroupObjectsDataSet != null)
				this.GOGroupObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOGroupObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOGroupRoleObjectsDataSet != null)
				this.GOGroupRoleObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOGroupRoleObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOLoginHistoryObjectsDataSet != null)
				this.GOLoginHistoryObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOLoginHistoryObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gORoleObjectsDataSet != null)
				this.GORoleObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GORoleObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOUserObjectsDataSet != null)
				this.GOUserObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOUserObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOUserGroupObjectsDataSet != null)
				this.GOUserGroupObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOUserGroupObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._gOUserRoleObjectsDataSet != null)
				this.GOUserRoleObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).GOUserRoleObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._locationObjectsDataSet != null)
				this.LocationObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).LocationObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._placeObjectsDataSet != null)
				this.PlaceObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).PlaceObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._placeToLocationObjectsDataSet != null)
				this.PlaceToLocationObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).PlaceToLocationObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._userProfileObjectsDataSet != null)
				this.UserProfileObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).UserProfileObjectsDataSet, updateOrginalInternalId);
			if ((dataSetToMerge as ObjectsDataSet)._visitedPlaceObjectsDataSet != null)
				this.VisitedPlaceObjectsDataSet.Merge((dataSetToMerge as ObjectsDataSet).VisitedPlaceObjectsDataSet, updateOrginalInternalId);
	   		
			FinalizeMerge();
			this.NotifyChanges = oldNotifyChanges;
			this.DirtyHandlerOn = oldDirtyHandlerOn;
		}

		public override void FinalizeMerge()
		{
			if (_countryObjectsDataSet != null)
				this.CountryObjectsDataSet.FinalizeMerge();
			if (_gOGroupObjectsDataSet != null)
				this.GOGroupObjectsDataSet.FinalizeMerge();
			if (_gOGroupRoleObjectsDataSet != null)
				this.GOGroupRoleObjectsDataSet.FinalizeMerge();
			if (_gOLoginHistoryObjectsDataSet != null)
				this.GOLoginHistoryObjectsDataSet.FinalizeMerge();
			if (_gORoleObjectsDataSet != null)
				this.GORoleObjectsDataSet.FinalizeMerge();
			if (_gOUserObjectsDataSet != null)
				this.GOUserObjectsDataSet.FinalizeMerge();
			if (_gOUserGroupObjectsDataSet != null)
				this.GOUserGroupObjectsDataSet.FinalizeMerge();
			if (_gOUserRoleObjectsDataSet != null)
				this.GOUserRoleObjectsDataSet.FinalizeMerge();
			if (_locationObjectsDataSet != null)
				this.LocationObjectsDataSet.FinalizeMerge();
			if (_placeObjectsDataSet != null)
				this.PlaceObjectsDataSet.FinalizeMerge();
			if (_placeToLocationObjectsDataSet != null)
				this.PlaceToLocationObjectsDataSet.FinalizeMerge();
			if (_userProfileObjectsDataSet != null)
				this.UserProfileObjectsDataSet.FinalizeMerge();
			if (_visitedPlaceObjectsDataSet != null)
				this.VisitedPlaceObjectsDataSet.FinalizeMerge();
			
			DatasetMergingInternalIdMapping.Clear();
		}

		public override DataObjectCollection<TDataObject> GetRelatedObjects<TDataObject>(IDataObject rootObject, string relationName)
        {
			EnsureInitialized();
			return GetEntityObjectsDataSet(rootObject.GetType()).GetRelatedObjects<TDataObject>(rootObject, relationName);
        }

        public override void EnsureInitialized()
		{
			if (IsInitialized)
				return;
				
			if (_countryObjectsDataSet != null)
			{
				CountryObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in CountryObjectsDataSet.CountryObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					CountryObjectsDataSet.CountryObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_gOGroupObjectsDataSet != null)
			{
				GOGroupObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOGroupObjectsDataSet.GOGroupObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOGroupObjectsDataSet.GOGroupObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_gOGroupRoleObjectsDataSet != null)
			{
				GOGroupRoleObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOGroupRoleObjectsDataSet.GOGroupRoleObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOGroupRoleObjectsDataSet.GOGroupRoleObjectInternalIds.TryAdd(item.PrimaryKeysCollection, key);
				}
			}
			if (_gOLoginHistoryObjectsDataSet != null)
			{
				GOLoginHistoryObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOLoginHistoryObjectsDataSet.GOLoginHistoryObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOLoginHistoryObjectsDataSet.GOLoginHistoryObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_gORoleObjectsDataSet != null)
			{
				GORoleObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GORoleObjectsDataSet.GORoleObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GORoleObjectsDataSet.GORoleObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_gOUserObjectsDataSet != null)
			{
				GOUserObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOUserObjectsDataSet.GOUserObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOUserObjectsDataSet.GOUserObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_gOUserGroupObjectsDataSet != null)
			{
				GOUserGroupObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOUserGroupObjectsDataSet.GOUserGroupObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOUserGroupObjectsDataSet.GOUserGroupObjectInternalIds.TryAdd(item.PrimaryKeysCollection, key);
				}
			}
			if (_gOUserRoleObjectsDataSet != null)
			{
				GOUserRoleObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in GOUserRoleObjectsDataSet.GOUserRoleObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					GOUserRoleObjectsDataSet.GOUserRoleObjectInternalIds.TryAdd(item.PrimaryKeysCollection, key);
				}
			}
			if (_locationObjectsDataSet != null)
			{
				LocationObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in LocationObjectsDataSet.LocationObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					LocationObjectsDataSet.LocationObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_placeObjectsDataSet != null)
			{
				PlaceObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in PlaceObjectsDataSet.PlaceObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					PlaceObjectsDataSet.PlaceObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_placeToLocationObjectsDataSet != null)
			{
				PlaceToLocationObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in PlaceToLocationObjectsDataSet.PlaceToLocationObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					PlaceToLocationObjectsDataSet.PlaceToLocationObjectInternalIds.TryAdd(item.PrimaryKeysCollection, key);
				}
			}
			if (_userProfileObjectsDataSet != null)
			{
				UserProfileObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in UserProfileObjectsDataSet.UserProfileObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					UserProfileObjectsDataSet.UserProfileObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
			if (_visitedPlaceObjectsDataSet != null)
			{
				VisitedPlaceObjectsDataSet.RootObjectDataSet = this;

				foreach (var keyvalue in VisitedPlaceObjectsDataSet.VisitedPlaceObjects)
				{
					var item = keyvalue.Value;
					var key = keyvalue.Key;
					item.ObjectsDataSet = this;
					item.InternalObjectId = key;
					VisitedPlaceObjectsDataSet.VisitedPlaceObjectInternalIds.TryAdd(item.PrimaryKey, key);
				}
			}
		
			base.EnsureInitialized();
		}

	
		#endregion
	}
}