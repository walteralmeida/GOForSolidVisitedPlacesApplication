////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'GORole'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class GORoleDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Description")]
		protected System.String _description;
		[JsonProperty ("DisplayName")]
		protected System.String _displayName;
		[JsonProperty ("Name")]
		protected System.String _name;
		[JsonProperty ("PasswordExpiry")]
		protected Nullable<System.Int32> _passwordExpiry;
		[JsonProperty ("PasswordPolicySummary")]
		protected System.String _passwordPolicySummary;
		[JsonProperty ("PasswordRegEx")]
		protected System.String _passwordRegEx;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public GORoleDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GORoleDataObject(System.String name)
			: base()
		{
			this._name = name;
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public GORoleDataObject(GORoleDataObject template, bool deepCopy)
		{
			this.SetDescriptionValue(template.Description, false, false);
			this.SetDisplayNameValue(template.DisplayName, false, false);
			this.SetNameValue(template.Name, false, false);
			this.SetPasswordExpiryValue(template.PasswordExpiry, false, false);
			this.SetPasswordPolicySummaryValue(template.PasswordPolicySummary, false, false);
			this.SetPasswordRegExValue(template.PasswordRegEx, false, false);
 
 
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual GORoleDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual GORoleDataObject Copy(bool deepCopy)
		{
			return new GORoleDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var gORoleSource = sourceObject as GORoleDataObject;

			if (ReferenceEquals(null, gORoleSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetDescriptionValue(gORoleSource.Description, false, false);
			this.SetDisplayNameValue(gORoleSource.DisplayName, false, false);
			this.SetNameValue(gORoleSource.Name, false, false);
			this.SetPasswordExpiryValue(gORoleSource.PasswordExpiry, false, false);
			this.SetPasswordPolicySummaryValue(gORoleSource.PasswordPolicySummary, false, false);
			this.SetPasswordRegExValue(gORoleSource.PasswordRegEx, false, false);


			if (deepCopy)
			{
				this.ObjectsDataSet = gORoleSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(gORoleSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as GORoleDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._name == this._name;
        }


        public override int GetHashCode()
        {		
			
			return _name == null ? -1 : _name.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {


		}

		#endregion
        
		#region Relation properties		
		

		public virtual DataObjectCollection<GOGroupRoleDataObject> LoadGroupRoleItems(bool skipSecurity = false)
		{
			return LoadGroupRoleItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOGroupRoleDataObject> LoadGroupRoleItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__groupRoleItemsAlreadyLazyLoaded)
            {
				__groupRoleItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GORoleName == @0";
                var filterArguments = new object[] { (System.String)this.Name };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOGroupRoleDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetGroupRoleItems(false);
		}
		
		private bool __groupRoleItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOGroupRoleDataObject> GroupRoleItems 
		{
			get
			{			
				return GetGroupRoleItems(true);
			}
		}
		
		public virtual bool ShouldSerializeGroupRoleItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GORoleDataObject") && ObjectsDataSet.RelationsToInclude["GORoleDataObject"].Contains("GroupRoleItems");
		}

		public virtual DataObjectCollection<GOGroupRoleDataObject> GetGroupRoleItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__groupRoleItemsAlreadyLazyLoaded)
			{
				LoadGroupRoleItems();
			}
			var groupRoleItems = ObjectsDataSet.GetRelatedObjects<GOGroupRoleDataObject>(this, "GroupRoleItems");							
			groupRoleItems.CollectionChanged += new NotifyCollectionChangedEventHandler(GroupRoleItems_CollectionChanged);
				
			return groupRoleItems;
		}

        private void GroupRoleItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOGroupRoleDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOGroupRole", "GORoleDataObject.GroupRoleItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GORoleDataObject throw an exception while trying to add GOGroupRoleDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._role_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GORoleName = this.Name;
						}
 
						if (relatedObj.IsNew && relatedObj.GORoleName == default(System.String))
							relatedObj.GORoleName = this.Name;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOGroupRoleDataObject).Role = null;
                    // }
                    break;
            }            
        }


		public virtual DataObjectCollection<GOUserRoleDataObject> LoadUserRoleItems(bool skipSecurity = false)
		{
			return LoadUserRoleItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOUserRoleDataObject> LoadUserRoleItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__userRoleItemsAlreadyLazyLoaded)
            {
				__userRoleItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GORoleName == @0";
                var filterArguments = new object[] { (System.String)this.Name };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOUserRoleDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetUserRoleItems(false);
		}
		
		private bool __userRoleItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOUserRoleDataObject> UserRoleItems 
		{
			get
			{			
				return GetUserRoleItems(true);
			}
		}
		
		public virtual bool ShouldSerializeUserRoleItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GORoleDataObject") && ObjectsDataSet.RelationsToInclude["GORoleDataObject"].Contains("UserRoleItems");
		}

		public virtual DataObjectCollection<GOUserRoleDataObject> GetUserRoleItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__userRoleItemsAlreadyLazyLoaded)
			{
				LoadUserRoleItems();
			}
			var userRoleItems = ObjectsDataSet.GetRelatedObjects<GOUserRoleDataObject>(this, "UserRoleItems");							
			userRoleItems.CollectionChanged += new NotifyCollectionChangedEventHandler(UserRoleItems_CollectionChanged);
				
			return userRoleItems;
		}

        private void UserRoleItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOUserRoleDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOUserRole", "GORoleDataObject.UserRoleItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GORoleDataObject throw an exception while trying to add GOUserRoleDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._role_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GORoleName = this.Name;
						}
 
						if (relatedObj.IsNew && relatedObj.GORoleName == default(System.String))
							relatedObj.GORoleName = this.Name;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOUserRoleDataObject).Role = null;
                    // }
                    break;
            }            
        }

		public override void ClearLazyLoadFlags()
		{
			__groupRoleItemsAlreadyLazyLoaded = false;
			__userRoleItemsAlreadyLazyLoaded = false;
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			if (LoadGroupRoleItems() != null)
				result.AddRange(GroupRoleItems);
			if (LoadUserRoleItems() != null)
				result.AddRange(UserRoleItems);
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return false;
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.String PrimaryKey
		{
			get { return Name; }
		}

		public virtual void SetPrimaryKeyValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetNameValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetDescriptionValue(System.String valueToSet)
		{
			SetDescriptionValue(valueToSet, true, true);
		}

		public virtual void SetDescriptionValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_description != valueToSet)
			{
				_description = valueToSet;

				OnPropertyChanged("Description", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Description property of the GORole DataObject</summary>
        public virtual System.String Description 
		{
			get	{ return String.IsNullOrEmpty(_description) ? null : _description; }
			
			
			set
			{
				SetDescriptionValue(value);
			}
		}		
			
			
		public virtual void SetDisplayNameValue(System.String valueToSet)
		{
			SetDisplayNameValue(valueToSet, true, true);
		}

		public virtual void SetDisplayNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_displayName != valueToSet)
			{
				_displayName = valueToSet;

				OnPropertyChanged("DisplayName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Display name property of the GORole DataObject</summary>
        public virtual System.String DisplayName 
		{
			get	{ return _displayName; }
			
			
			set
			{
				SetDisplayNameValue(value);
			}
		}		
			
			
		public virtual void SetNameValue(System.String valueToSet)
		{
			SetNameValue(valueToSet, true, true);
		}

		public virtual void SetNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_name != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_name = valueToSet;

				OnPropertyChanged("Name", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Name property of the GORole DataObject</summary>
        public virtual System.String Name 
		{
			get	{ return _name; }
			
			
			set
			{
				SetNameValue(value);
			}
		}		
			
			
		public virtual void SetPasswordExpiryValue(Nullable<System.Int32> valueToSet)
		{
			SetPasswordExpiryValue(valueToSet, true, true);
		}

		public virtual void SetPasswordExpiryValue(Nullable<System.Int32> valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_passwordExpiry != valueToSet)
			{
				_passwordExpiry = valueToSet;

				OnPropertyChanged("PasswordExpiry", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Password Expiry property of the GORole DataObject</summary>
        public virtual Nullable<System.Int32> PasswordExpiry 
		{
			get	{ return _passwordExpiry;}
			
			
			set
			{
				SetPasswordExpiryValue(value);
			}
		}		
			
			
		public virtual void SetPasswordPolicySummaryValue(System.String valueToSet)
		{
			SetPasswordPolicySummaryValue(valueToSet, true, true);
		}

		public virtual void SetPasswordPolicySummaryValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_passwordPolicySummary != valueToSet)
			{
				_passwordPolicySummary = valueToSet;

				OnPropertyChanged("PasswordPolicySummary", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Password Policy Summary property of the GORole DataObject</summary>
        public virtual System.String PasswordPolicySummary 
		{
			get	{ return String.IsNullOrEmpty(_passwordPolicySummary) ? null : _passwordPolicySummary; }
			
			
			set
			{
				SetPasswordPolicySummaryValue(value);
			}
		}		
			
			
		public virtual void SetPasswordRegExValue(System.String valueToSet)
		{
			SetPasswordRegExValue(valueToSet, true, true);
		}

		public virtual void SetPasswordRegExValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_passwordRegEx != valueToSet)
			{
				_passwordRegEx = valueToSet;

				OnPropertyChanged("PasswordRegEx", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Password RegEx property of the GORole DataObject</summary>
        public virtual System.String PasswordRegEx 
		{
			get	{ return String.IsNullOrEmpty(_passwordRegEx) ? null : _passwordRegEx; }
			
			
			set
			{
				SetPasswordRegExValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
			if (GetGroupRoleItems(false) != null)
            {
                foreach (var item in GetGroupRoleItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Role.", propertyName), callers);                    
                }
            }

			if (GetUserRoleItems(false) != null)
            {
                foreach (var item in GetUserRoleItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Role.", propertyName), callers);                    
                }
            }

        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new GORoleDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is GORoleDataObject))
				return false;

			var p = (GORoleDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.PasswordExpiry == p.PasswordExpiry;
			fieldsComparison &= this.Description == p.Description;
			fieldsComparison &= this.PasswordRegEx == p.PasswordRegEx;
			fieldsComparison &= this.DisplayName == p.DisplayName;
			fieldsComparison &= this.PasswordPolicySummary == p.PasswordPolicySummary;
			fieldsComparison &= this.Name == p.Name;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Name}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Name = (System.String)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class GORoleCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.String> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public GORoleCollectionContainer()
		{
		}
		
        public GORoleCollectionContainer(DataObjectCollection<GORoleDataObject> gORoleItems)
        {
			Construct(gORoleItems);
		}

		public void Construct(DataObjectCollection<GORoleDataObject> gORoleItems)
        {
            if (gORoleItems == null)
                return;
				
			this.PrimaryKeys = gORoleItems.Select(c => c.PrimaryKey).ToList();
            if (gORoleItems.ObjectsDataSet == null)
            {
                gORoleItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = gORoleItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = gORoleItems.ObjectsDataSet;
		}

		public DataObjectCollection<GORoleDataObject> ExtractGORoleItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<GORoleDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<GORoleDataObject>(typeof(GORoleDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class GORoleContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.String PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public GORoleContainer() 
		{
		}

        public GORoleContainer(GORoleDataObject gORole) 
		{
			Construct(gORole, false);
		}

        public GORoleContainer(GORoleDataObject gORole, bool includeDirtyObjectsOnly) 
		{
			Construct(gORole, includeDirtyObjectsOnly);
		}

		public virtual void Construct(GORoleDataObject gORole, bool includeDirtyObjectsOnly)
		{
            if (gORole == null)
                return;

			this.PrimaryKey = gORole.PrimaryKey;
			
            if (gORole.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(gORole);
            }

			if(gORole.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity GORole", "Unable to set a dataset to the entity. Container may not be initialized", "GORoleDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : GORole");
			}

			if(gORole.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in GORoleDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "GORoleDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in GORoleDataObject");
			}
			this.InternalObjectId = (int) gORole.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? gORole.ObjectsDataSet.CloneDirtyObjects() : gORole.ObjectsDataSet;
		}
		
		public GORoleDataObject ExtractGORole()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<GORoleDataObject>(typeof(GORoleDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}