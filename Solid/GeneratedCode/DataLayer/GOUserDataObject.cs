////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'GOUser'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class GOUserDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Blocked")]
		protected System.Boolean _blocked;
		[JsonProperty ("EmailAddress")]
		protected System.String _emailAddress;
		[JsonProperty ("EmailValidated")]
		protected System.Boolean _emailValidated;
		[JsonProperty ("FirstName")]
		protected System.String _firstName;
		[JsonProperty ("FullName")]
		protected System.String _fullName;
		[JsonProperty ("Id")]
		protected System.Guid _id = Guid.NewGuid();
		[JsonProperty ("LastName")]
		protected System.String _lastName;
		[JsonProperty ("Password")]
		protected System.String _password;
		[JsonProperty ("PasswordExpiry")]
		protected Nullable<System.DateTime> _passwordExpiry;
		[JsonProperty("PasswordExpiry_WithTimezoneOffset")]
		protected System.DateTimeOffset? _passwordExpiry_WithTimezoneOffset;
		[JsonProperty ("Unregistered")]
		protected System.Boolean _unregistered;
		[JsonProperty ("UserName")]
		protected System.String _userName;
		[JsonProperty ("UserValidated")]
		protected System.Boolean _userValidated;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)

		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _userProfile_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_userProfile_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }



		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public GOUserDataObject() : base ()		
		{
			SetUserValidatedValue(false, false, false);
			SetEmailValidatedValue(false, false, false);
			SetBlockedValue(false, false, false);
			SetUnregisteredValue(false, false, false);
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GOUserDataObject(System.Guid id)
			: base()
		{
			this._id = id;
			SetUserValidatedValue(false, false, false);
			SetEmailValidatedValue(false, false, false);
			SetBlockedValue(false, false, false);
			SetUnregisteredValue(false, false, false);
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public GOUserDataObject(GOUserDataObject template, bool deepCopy)
		{
			this.SetPasswordExpiryValue(template.PasswordExpiry, false, false);
			this._passwordExpiry_WithTimezoneOffset = template._passwordExpiry_WithTimezoneOffset;
			this.SetBlockedValue(template.Blocked, false, false);
			this.SetEmailAddressValue(template.EmailAddress, false, false);
			this.SetEmailValidatedValue(template.EmailValidated, false, false);
			this.SetFirstNameValue(template.FirstName, false, false);
			this.SetFullNameValue(template.FullName, false, false);
			this.SetIdValue(template.Id, false, false);
			this.SetLastNameValue(template.LastName, false, false);
			this.SetPasswordValue(template.Password, false, false);
			this.SetUnregisteredValue(template.Unregistered, false, false);
			this.SetUserNameValue(template.UserName, false, false);
			this.SetUserValidatedValue(template.UserValidated, false, false);
 
 
			this._userProfile_NewObjectId = template._userProfile_NewObjectId;
 
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual GOUserDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual GOUserDataObject Copy(bool deepCopy)
		{
			return new GOUserDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var gOUserSource = sourceObject as GOUserDataObject;

			if (ReferenceEquals(null, gOUserSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetBlockedValue(gOUserSource.Blocked, false, false);
			this.SetEmailAddressValue(gOUserSource.EmailAddress, false, false);
			this.SetEmailValidatedValue(gOUserSource.EmailValidated, false, false);
			this.SetFirstNameValue(gOUserSource.FirstName, false, false);
			this.SetFullNameValue(gOUserSource.FullName, false, false);
			this.SetIdValue(gOUserSource.Id, false, false);
			this.SetLastNameValue(gOUserSource.LastName, false, false);
			this.SetPasswordValue(gOUserSource.Password, false, false);
			this.SetPasswordExpiryValue(gOUserSource.PasswordExpiry, false, false);
			this.SetUnregisteredValue(gOUserSource.Unregistered, false, false);
			this.SetUserNameValue(gOUserSource.UserName, false, false);
			this.SetUserValidatedValue(gOUserSource.UserValidated, false, false);

			this._userProfile_NewObjectId = (sourceObject as GOUserDataObject)._userProfile_NewObjectId;


			if (deepCopy)
			{
				this.ObjectsDataSet = gOUserSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(gOUserSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as GOUserDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._id == this._id;
        }


        public override int GetHashCode()
        {		
			
			return _id == null ? -1 : _id.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {

			if (this._userProfile_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._userProfile_NewObjectId))
				{
                    this._userProfile_NewObjectId = null;
				}
                else
				{
					this._userProfile_NewObjectId = datasetMergingInternalIdMapping[(int) this._userProfile_NewObjectId];
				}
			}


		}

		#endregion
        
		#region Relation properties		
		

		public virtual DataObjectCollection<GOUserGroupDataObject> LoadUserGroupItems(bool skipSecurity = false)
		{
			return LoadUserGroupItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOUserGroupDataObject> LoadUserGroupItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__userGroupItemsAlreadyLazyLoaded)
            {
				__userGroupItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GOUserId == @0";
                var filterArguments = new object[] { (System.Guid)this.Id };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOUserGroupDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetUserGroupItems(false);
		}
		
		private bool __userGroupItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOUserGroupDataObject> UserGroupItems 
		{
			get
			{			
				return GetUserGroupItems(true);
			}
		}
		
		public virtual bool ShouldSerializeUserGroupItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOUserDataObject") && ObjectsDataSet.RelationsToInclude["GOUserDataObject"].Contains("UserGroupItems");
		}

		public virtual DataObjectCollection<GOUserGroupDataObject> GetUserGroupItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__userGroupItemsAlreadyLazyLoaded)
			{
				LoadUserGroupItems();
			}
			var userGroupItems = ObjectsDataSet.GetRelatedObjects<GOUserGroupDataObject>(this, "UserGroupItems");							
			userGroupItems.CollectionChanged += new NotifyCollectionChangedEventHandler(UserGroupItems_CollectionChanged);
				
			return userGroupItems;
		}

        private void UserGroupItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOUserGroupDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOUserGroup", "GOUserDataObject.UserGroupItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GOUserDataObject throw an exception while trying to add GOUserGroupDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._user_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GOUserId = this.Id;
						}
 
						if (relatedObj.IsNew && relatedObj.GOUserId == default(System.Guid))
							relatedObj.GOUserId = this.Id;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOUserGroupDataObject).User = null;
                    // }
                    break;
            }            
        }

      public virtual void SetUserProfileValue(UserProfileDataObject valueToSet)
		{
			SetUserProfileValue(valueToSet, true, true);
		}

        public virtual void SetUserProfileValue(UserProfileDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			UserProfileDataObject existing_userProfile = null ;

			if ( !(this.UserName == null || ObjectsDataSet == null))
			{
				var key = this._userProfile_NewObjectId == null ? new UserProfileDataObject(this.UserName) { IsNew = false } : new UserProfileDataObject() { IsNew = true, InternalObjectId = this._userProfile_NewObjectId };			
				existing_userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_userProfile ,valueToSet))
            {
                if (valueToSet == null)
                {
					_userProfile_NewObjectId = null;
					_userName = null;
				}
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("UserProfile", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "GOUserDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_userProfile_NewObjectId != valueToSet.InternalObjectId)
					{
						_userProfile_NewObjectId = valueToSet.InternalObjectId;
						_userName = valueToSet.Uri;
						OnPropertyChanged("UserName",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_userName != valueToSet.Uri)
					{
						_userProfile_NewObjectId = null;

						_userName = valueToSet.Uri;
						OnPropertyChanged("UserName",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
					_userProfile_NewObjectId = null;
					_userName = null;
					
				OnPropertyChanged("UserName",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_userProfile ,valueToSet))
				OnPropertyChanged("UserProfile", notifyChanges, dirtyHandlerOn);
		}

		private bool __userProfileCurrentLoading = false;
		public virtual UserProfileDataObject LoadUserProfile(bool skipSecurity = false)
		{
			return LoadUserProfile(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual UserProfileDataObject LoadUserProfile(Parameters parameters, bool skipSecurity = false)
		{
			var userProfile = GetUserProfile(allowLazyLoading: false); 
			if (userProfile != null)
				return userProfile;

			
			userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject(this.UserName) { IsNew = false });

            if (userProfile == null && !__userProfileCurrentLoading)
            {
				__userProfileCurrentLoading = true;
                userProfile = ApplicationSettings.Container.Resolve<IDataProvider<UserProfileDataObject>>().Get(new UserProfileDataObject(this.UserName), parameters : parameters, skipSecurity: skipSecurity);
                SetUserProfileValue(userProfile, false, false);
				__userProfileCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return userProfile == null ? null : ObjectsDataSet.GetObject(userProfile);
		}
		
		[JsonProperty]
		public virtual UserProfileDataObject UserProfile 
		{
			get
			{			
				return GetUserProfile(true);
			}
			set
			{
				SetUserProfileValue(value);
			}
		}
		
		public virtual bool ShouldSerializeUserProfile()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOUserDataObject") && ObjectsDataSet.RelationsToInclude["GOUserDataObject"].Contains("UserProfile");
		}

		public virtual UserProfileDataObject GetUserProfile(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			UserProfileDataObject userProfile;

				
			if (_userProfile_NewObjectId != null)
			{
				userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject() { IsNew = true, InternalObjectId = _userProfile_NewObjectId });
			}
			else
			{
				if (UserName == null)
					userProfile = null;
				else
				userProfile = (UserProfileDataObject)ObjectsDataSet.GetObject(new UserProfileDataObject(this.UserName) { IsNew = false });
				
				if (allowLazyLoading && userProfile == null && LazyLoadingEnabled)
				{
					userProfile = LoadUserProfile();
				}
			}
				
			return userProfile;
		}

		public virtual System.String UserProfileForeignKey
		{
			get { return UserName; }
			set 
			{	
				UserName = value;
			}
			
		}
		


		public virtual DataObjectCollection<GOUserRoleDataObject> LoadUserRoleItems(bool skipSecurity = false)
		{
			return LoadUserRoleItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOUserRoleDataObject> LoadUserRoleItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__userRoleItemsAlreadyLazyLoaded)
            {
				__userRoleItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GOUserId == @0";
                var filterArguments = new object[] { (System.Guid)this.Id };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOUserRoleDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetUserRoleItems(false);
		}
		
		private bool __userRoleItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOUserRoleDataObject> UserRoleItems 
		{
			get
			{			
				return GetUserRoleItems(true);
			}
		}
		
		public virtual bool ShouldSerializeUserRoleItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOUserDataObject") && ObjectsDataSet.RelationsToInclude["GOUserDataObject"].Contains("UserRoleItems");
		}

		public virtual DataObjectCollection<GOUserRoleDataObject> GetUserRoleItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__userRoleItemsAlreadyLazyLoaded)
			{
				LoadUserRoleItems();
			}
			var userRoleItems = ObjectsDataSet.GetRelatedObjects<GOUserRoleDataObject>(this, "UserRoleItems");							
			userRoleItems.CollectionChanged += new NotifyCollectionChangedEventHandler(UserRoleItems_CollectionChanged);
				
			return userRoleItems;
		}

        private void UserRoleItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOUserRoleDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOUserRole", "GOUserDataObject.UserRoleItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GOUserDataObject throw an exception while trying to add GOUserRoleDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._user_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GOUserId = this.Id;
						}
 
						if (relatedObj.IsNew && relatedObj.GOUserId == default(System.Guid))
							relatedObj.GOUserId = this.Id;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOUserRoleDataObject).User = null;
                    // }
                    break;
            }            
        }

		public override void ClearLazyLoadFlags()
		{
			__userGroupItemsAlreadyLazyLoaded = false;
			__userRoleItemsAlreadyLazyLoaded = false;
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			if (LoadUserProfile() != null)
				result.Add(UserProfile);
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			if (LoadUserGroupItems() != null)
				result.AddRange(UserGroupItems);
			if (LoadUserRoleItems() != null)
				result.AddRange(UserRoleItems);
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return
				UserProfile == other ||
				(other is UserProfileDataObject && (UserName != default(System.String)) && (UserName == (other as UserProfileDataObject).Uri)); 
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.Guid PrimaryKey
		{
			get { return Id; }
		}

		public virtual void SetPrimaryKeyValue(System.Guid valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetIdValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetBlockedValue(System.Boolean valueToSet)
		{
			SetBlockedValue(valueToSet, true, true);
		}

		public virtual void SetBlockedValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_blocked != valueToSet)
			{
				_blocked = valueToSet;

				OnPropertyChanged("Blocked", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Blocked property of the GOUser DataObject</summary>
        public virtual System.Boolean Blocked 
		{
			get	{ return _blocked;}
			
			
			set
			{
				SetBlockedValue(value);
			}
		}		
			
			
		public virtual void SetEmailAddressValue(System.String valueToSet)
		{
			SetEmailAddressValue(valueToSet, true, true);
		}

		public virtual void SetEmailAddressValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_emailAddress != valueToSet)
			{
				_emailAddress = valueToSet;

				OnPropertyChanged("EmailAddress", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Email property of the GOUser DataObject</summary>
        public virtual System.String EmailAddress 
		{
			get	{ return _emailAddress; }
			
			
			set
			{
				SetEmailAddressValue(value);
			}
		}		
			
			
		public virtual void SetEmailValidatedValue(System.Boolean valueToSet)
		{
			SetEmailValidatedValue(valueToSet, true, true);
		}

		public virtual void SetEmailValidatedValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_emailValidated != valueToSet)
			{
				_emailValidated = valueToSet;

				OnPropertyChanged("EmailValidated", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Email Verified? property of the GOUser DataObject</summary>
        public virtual System.Boolean EmailValidated 
		{
			get	{ return _emailValidated;}
			
			
			set
			{
				SetEmailValidatedValue(value);
			}
		}		
			
			
		public virtual void SetFirstNameValue(System.String valueToSet)
		{
			SetFirstNameValue(valueToSet, true, true);
		}

		public virtual void SetFirstNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_firstName != valueToSet)
			{
				_firstName = valueToSet;

				OnPropertyChanged("FirstName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The First Name property of the GOUser DataObject</summary>
        public virtual System.String FirstName 
		{
			get	{ return String.IsNullOrEmpty(_firstName) ? null : _firstName; }
			
			
			set
			{
				SetFirstNameValue(value);
			}
		}		
			
			
		public virtual void SetFullNameValue(System.String valueToSet)
		{
			SetFullNameValue(valueToSet, true, true);
		}

		public virtual void SetFullNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_fullName != valueToSet)
			{
				_fullName = valueToSet;

				OnPropertyChanged("FullName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Full Name property of the GOUser DataObject</summary>
        public virtual System.String FullName 
		{
			get	{ return _fullName; }
			
			
			set
			{
				SetFullNameValue(value);
			}
		}		
			
			
		public virtual void SetIdValue(System.Guid valueToSet)
		{
			SetIdValue(valueToSet, true, true);
		}

		public virtual void SetIdValue(System.Guid valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_id != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_id = valueToSet;

				OnPropertyChanged("Id", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Id property of the GOUser DataObject</summary>
        public virtual System.Guid Id 
		{
			get	{ return _id;}
			
			
			set
			{
				SetIdValue(value);
			}
		}		
			
			
		public virtual void SetLastNameValue(System.String valueToSet)
		{
			SetLastNameValue(valueToSet, true, true);
		}

		public virtual void SetLastNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_lastName != valueToSet)
			{
				_lastName = valueToSet;

				OnPropertyChanged("LastName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Surname property of the GOUser DataObject</summary>
        public virtual System.String LastName 
		{
			get	{ return String.IsNullOrEmpty(_lastName) ? null : _lastName; }
			
			
			set
			{
				SetLastNameValue(value);
			}
		}		
			
			
		public virtual void SetPasswordValue(System.String valueToSet)
		{
			SetPasswordValue(valueToSet, true, true);
		}

		public virtual void SetPasswordValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_password != valueToSet)
			{
				_password = valueToSet;

				OnPropertyChanged("Password", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Password property of the GOUser DataObject</summary>
        public virtual System.String Password 
		{
			get	{ return _password; }
			
			
			set
			{
				SetPasswordValue(value);
			}
		}		
			
			
		public virtual void SetPasswordExpiryValue(Nullable<System.DateTime> valueToSet)
		{
			SetPasswordExpiryValue(valueToSet, true, true);
		}

		public virtual void SetPasswordExpiryValue(Nullable<System.DateTime> valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (valueToSet == null) 
			{
				if (_passwordExpiry != null)
				{
					_passwordExpiry = null;
					OnPropertyChanged("PasswordExpiry", notifyChanges, dirtyHandlerOn);
				}
			}
			else 
			if (valueToSet == DateTime.MinValue) 
			{
				if (_passwordExpiry != DateTime.MinValue.ToUniversalTime())
				{
					_passwordExpiry = DateTime.MinValue.ToUniversalTime();
					OnPropertyChanged("PasswordExpiry", notifyChanges, dirtyHandlerOn);
				}	
			}
			else if (valueToSet == DateTime.MaxValue)
			{
				if (_passwordExpiry != DateTime.MaxValue.ToUniversalTime())
				{
					_passwordExpiry = DateTime.MaxValue.ToUniversalTime();
					OnPropertyChanged("PasswordExpiry", notifyChanges, dirtyHandlerOn);
				}
			} 
			else if (_passwordExpiry != valueToSet ||
                (_passwordExpiry != null && ((DateTime)_passwordExpiry).Kind == DateTimeKind.Unspecified))
			{
				_passwordExpiry = DateTime.SpecifyKind((DateTime)valueToSet, DateTimeKind.Local);

				OnPropertyChanged("PasswordExpiry", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Password Expiry property of the GOUser DataObject</summary>
        public virtual Nullable<System.DateTime> PasswordExpiry 
		{
			get	{ return _passwordExpiry;}
			
			
			set
			{
				SetPasswordExpiryValue(value);
			}
		}		
			
			
		public virtual void SetUnregisteredValue(System.Boolean valueToSet)
		{
			SetUnregisteredValue(valueToSet, true, true);
		}

		public virtual void SetUnregisteredValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_unregistered != valueToSet)
			{
				_unregistered = valueToSet;

				OnPropertyChanged("Unregistered", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Unregistered property of the GOUser DataObject</summary>
        public virtual System.Boolean Unregistered 
		{
			get	{ return _unregistered;}
			
			
			set
			{
				SetUnregisteredValue(value);
			}
		}		
			
			
		public virtual void SetUserNameValue(System.String valueToSet)
		{
			SetUserNameValue(valueToSet, true, true);
		}

		public virtual void SetUserNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_userName != valueToSet)
			{
				_userName = valueToSet;

				// UserName is a FK. Setting its value should result in a event
				OnPropertyChanged("UserProfile", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("UserName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The User Name property of the GOUser DataObject</summary>
        public virtual System.String UserName 
		{
			get	{ return _userName; }
			
			
			set
			{
				SetUserNameValue(value);
			}
		}		
			
			
		public virtual void SetUserValidatedValue(System.Boolean valueToSet)
		{
			SetUserValidatedValue(valueToSet, true, true);
		}

		public virtual void SetUserValidatedValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_userValidated != valueToSet)
			{
				_userValidated = valueToSet;

				OnPropertyChanged("UserValidated", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Admin Approved? property of the GOUser DataObject</summary>
        public virtual System.Boolean UserValidated 
		{
			get	{ return _userValidated;}
			
			
			set
			{
				SetUserValidatedValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
			if (GetUserGroupItems(false) != null)
            {
                foreach (var item in GetUserGroupItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("User.", propertyName), callers);                    
                }
            }

			var userProfile = GetUserProfile(false);
			if (userProfile != null && this.IsDirty)
            {
				userProfile.NotifyPropertyChanged("GOUser." + propertyName, callers);
			}

			if (GetUserRoleItems(false) != null)
            {
                foreach (var item in GetUserRoleItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("User.", propertyName), callers);                    
                }
            }

        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new GOUserDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is GOUserDataObject))
				return false;

			var p = (GOUserDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.Id == p.Id;
			fieldsComparison &= this.EmailAddress == p.EmailAddress;
			fieldsComparison &= this.UserName == p.UserName;
			fieldsComparison &= this.FullName == p.FullName;
			fieldsComparison &= this.LastName == p.LastName;
			fieldsComparison &= this.Password == p.Password;
			fieldsComparison &= this.FirstName == p.FirstName;
			fieldsComparison &= this.PasswordExpiry == p.PasswordExpiry;
			fieldsComparison &= this.Unregistered == p.Unregistered;
			fieldsComparison &= this.EmailValidated == p.EmailValidated;
			fieldsComparison &= this.Blocked == p.Blocked;
			fieldsComparison &= this.UserValidated == p.UserValidated;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Id}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Id = (System.Guid)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
			// PasswordExpiry is a local datetime: Convert to UTC for server-side handling and storing
			if (this._passwordExpiry_WithTimezoneOffset != null)
			{
				this.PasswordExpiry = ((DateTimeOffset)this._passwordExpiry_WithTimezoneOffset).UtcDateTime;
			}
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class GOUserCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.Guid> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public GOUserCollectionContainer()
		{
		}
		
        public GOUserCollectionContainer(DataObjectCollection<GOUserDataObject> gOUserItems)
        {
			Construct(gOUserItems);
		}

		public void Construct(DataObjectCollection<GOUserDataObject> gOUserItems)
        {
            if (gOUserItems == null)
                return;
				
			this.PrimaryKeys = gOUserItems.Select(c => c.PrimaryKey).ToList();
            if (gOUserItems.ObjectsDataSet == null)
            {
                gOUserItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = gOUserItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = gOUserItems.ObjectsDataSet;
		}

		public DataObjectCollection<GOUserDataObject> ExtractGOUserItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<GOUserDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<GOUserDataObject>(typeof(GOUserDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class GOUserContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.Guid PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public GOUserContainer() 
		{
		}

        public GOUserContainer(GOUserDataObject gOUser) 
		{
			Construct(gOUser, false);
		}

        public GOUserContainer(GOUserDataObject gOUser, bool includeDirtyObjectsOnly) 
		{
			Construct(gOUser, includeDirtyObjectsOnly);
		}

		public virtual void Construct(GOUserDataObject gOUser, bool includeDirtyObjectsOnly)
		{
            if (gOUser == null)
                return;

			this.PrimaryKey = gOUser.PrimaryKey;
			
            if (gOUser.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(gOUser);
            }

			if(gOUser.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity GOUser", "Unable to set a dataset to the entity. Container may not be initialized", "GOUserDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : GOUser");
			}

			if(gOUser.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in GOUserDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "GOUserDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in GOUserDataObject");
			}
			this.InternalObjectId = (int) gOUser.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? gOUser.ObjectsDataSet.CloneDirtyObjects() : gOUser.ObjectsDataSet;
		}
		
		public GOUserDataObject ExtractGOUser()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<GOUserDataObject>(typeof(GOUserDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}