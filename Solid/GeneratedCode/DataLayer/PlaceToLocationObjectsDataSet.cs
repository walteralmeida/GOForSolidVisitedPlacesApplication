////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.ExceptionHandling;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;


namespace Solid.Data.DataObjects
{
	[JsonObject(MemberSerialization.OptIn)]
	public class PlaceToLocationObjectsDataSet : ObjectsDataSetBase
	{
        #region fields

        private ObjectsDataSet _rootObjectDataSet;
		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		// Mapping between entity primary key and data set objects collection internal id
		private ConcurrentDictionary< IdentifyingFieldsCollection<System.String,System.String>, int> _placeToLocationObjectInternalIds = new ConcurrentDictionary< IdentifyingFieldsCollection<System.String,System.String>, int>();
		
		// Collection holding all PlaceToLocation objects for current dataset
		private ConcurrentDictionary< int, PlaceToLocationDataObject> _placeToLocationObjects = new ConcurrentDictionary< int, PlaceToLocationDataObject>();

		// Temp list of merged data objects - required for merge finalization
		private ConcurrentQueue<PlaceToLocationDataObject> _mergedDataObjects;

		private ConcurrentQueue<PlaceToLocationDataObject> MergedDataObjects 
		{
			get
			{
				if (_mergedDataObjects == null)
					_mergedDataObjects = new ConcurrentQueue<PlaceToLocationDataObject>();
					
				return _mergedDataObjects;
			}
		}
		
		private void ClearMergedDataObjects()
		{
			_mergedDataObjects = null;
		}

        #endregion

		#region properties

        public ObjectsDataSet RootObjectDataSet
        {
            get { return _rootObjectDataSet; }
            set
            {
                _rootObjectDataSet = value;
            }
        }
		
		// Mapping between entity primary key and data set objects collection internal id
		public ConcurrentDictionary< IdentifyingFieldsCollection<System.String,System.String>, int> PlaceToLocationObjectInternalIds
		{ 
			get { return _placeToLocationObjectInternalIds; }
			set { _placeToLocationObjectInternalIds = value; }
		}
		
		// Collection holding all PlaceToLocation objects for current dataset
		[JsonProperty(DefaultValueHandling  = DefaultValueHandling.Ignore)]
		public ConcurrentDictionary< int, PlaceToLocationDataObject> PlaceToLocationObjects
		{ 
			get { return _placeToLocationObjects; }
			set { _placeToLocationObjects = value; }
		}
		
		// Index to quickly find all PlaceToLocation with a given location foreign key
		public ConcurrentDictionary<System.String, List<int>> Location_FKIndex = new ConcurrentDictionary<System.String, List<int>>();
		
 
		// Index to quickly find all PlaceToLocation with a given place foreign key
		public ConcurrentDictionary<System.String, List<int>> Place_FKIndex = new ConcurrentDictionary<System.String, List<int>>();
		
 
		
		#endregion
		
		#region initialization

        public PlaceToLocationObjectsDataSet(ObjectsDataSet rootObjectDataSet)
        {
            _rootObjectDataSet = rootObjectDataSet;
        }

        #endregion

		#region IObjectsDataSet implementation

		public override IObjectsDataSet Clone()
		{
			throw new PulpException("Forbidden on sub dataset");		
		}

		public override IObjectsDataSet Clone(IObjectsDataSet rootDataSet)
		{
			var clone = new PlaceToLocationObjectsDataSet(rootDataSet as ObjectsDataSet);
			bool completed;

			foreach(var keyValue in this.PlaceToLocationObjects)
			{
                var cloneObject = (PlaceToLocationDataObject) keyValue.Value.Clone(false);
                cloneObject.InternalObjectId = keyValue.Value.InternalObjectId;
				
				completed = false;
				var count = 0;
				while (!completed && count++ < 15)
				{
					completed = clone.PlaceToLocationObjects.TryAdd(keyValue.Key, cloneObject);
				}
			}

			foreach(var keyValue in this.PlaceToLocationObjectInternalIds)
			{
				completed = false;
				var count = 0;
				while (!completed && count++ < 15)
				{
					completed = clone.PlaceToLocationObjectInternalIds.TryAdd(keyValue.Key.Clone(), keyValue.Value);
				}
			}

			foreach(var fkKeyValue in this.Location_FKIndex)
			{
				var iscompleted = false;
				var count2 = 0;
				while (!iscompleted && count2++ < 15)
				{
					iscompleted = clone.Location_FKIndex.TryAdd(fkKeyValue.Key, new List<int>());
				}

				foreach (var pk in fkKeyValue.Value)
				{
					clone.Location_FKIndex[fkKeyValue.Key].Add(pk);
				}
			}

			foreach(var fkKeyValue in this.Place_FKIndex)
			{
				var iscompleted = false;
				var count2 = 0;
				while (!iscompleted && count2++ < 15)
				{
					iscompleted = clone.Place_FKIndex.TryAdd(fkKeyValue.Key, new List<int>());
				}

				foreach (var pk in fkKeyValue.Value)
				{
					clone.Place_FKIndex[fkKeyValue.Key].Add(pk);
				}
			}

			
			return clone;
		}

		public override IObjectsDataSet CloneDirtyObjects()
		{
			throw new PulpException("Forbidden on sub dataset");		
		}

		public override IObjectsDataSet CloneDirtyObjects(IObjectsDataSet rootDataSet)
		{
			var clone = new PlaceToLocationObjectsDataSet(rootDataSet as ObjectsDataSet);
			bool completed;

			foreach(var keyValue in this.PlaceToLocationObjects.Where(o => o.Value.IsDirty || o.Value.IsMarkedForDeletion))
			{
                var cloneObject = (PlaceToLocationDataObject) keyValue.Value.Clone(false);
                cloneObject.InternalObjectId = keyValue.Value.InternalObjectId;
				
				completed = false;
				while (!completed)
				{
					 completed = clone.PlaceToLocationObjects.TryAdd(keyValue.Key, cloneObject);
				}
			}

			foreach(var keyValue in this.PlaceToLocationObjectInternalIds
				.Where(o => this.PlaceToLocationObjects[o.Value].IsDirty || this.PlaceToLocationObjects[o.Value].IsMarkedForDeletion))
			{
				completed = false;
				
				var count = 0;
				while (!completed && count++ < 15)
				{
					completed = clone.PlaceToLocationObjectInternalIds.TryAdd(keyValue.Key.Clone(), keyValue.Value);
				}
			}
			
			// CloneDirtyObjects is used to pass only dirty objects to server to save changes. Since indexes are not serialized, no need to clone them
            return clone;
		}

		public override IEnumerable<IDataObject> GetAllObjects()
		{
			foreach(var placeToLocation in PlaceToLocationObjects.Values)
			{
				yield return placeToLocation; 
			}				
		}

	    public override void AddObject(IDataObject objectToAdd, bool replaceIfExists)
        {
			var existingObject = GetObject(objectToAdd);
            if (!replaceIfExists && existingObject != null)
                throw new PulpException("Object already exists");

			int newInternalId; 
			
            if (existingObject != null)
			{
                //RemoveObject(existingObject);
				if(existingObject.InternalObjectId == null)
				{
					_logEngine.LogError("Error while trying to Add Object to the PlaceToLocationObjectsDataSet", "The object you are trying to add doesn't have an InternalObjectId", "PlaceToLocationObjectsDataSet", null);
					throw new PulpException("Error while trying to add an object to the dataset without InternalObjectId");
				}
                newInternalId = (int) existingObject.InternalObjectId;
                objectToAdd.InternalObjectId = newInternalId;
				existingObject.CopyValuesFrom(objectToAdd, false);
			}
			else
			{
            	newInternalId = GetNextNewInternalObjectId();
				objectToAdd.InternalObjectId = newInternalId;

				 var completed = false;
				 var count = 0;
				while (!completed && count++ < 15)
				{
					completed = PlaceToLocationObjects.TryAdd(newInternalId, (PlaceToLocationDataObject)objectToAdd);
				}
			}
			
			if (!objectToAdd.IsNew && existingObject == null)
			{
                //The following if should not be necessary...
				var completed = false;
				if (PlaceToLocationObjectInternalIds.ContainsKey(((PlaceToLocationDataObject)objectToAdd).PrimaryKeysCollection))
				{
					int value;
					var count2 = 0;
					while (!completed && count2++ < 15)
					{
						completed = PlaceToLocationObjectInternalIds.TryRemove(((PlaceToLocationDataObject)objectToAdd).PrimaryKeysCollection, out value);
					}
				}

				completed = false;
				var count = 0;
				while (!completed && count++ < 15)
				{
					completed = PlaceToLocationObjectInternalIds.TryAdd(((PlaceToLocationDataObject)objectToAdd).PrimaryKeysCollection, newInternalId);
				}
			}
			// Update relations including platform as "many" side or "one" side , pk side for one to one relations
			if((objectToAdd as PlaceToLocationDataObject) == null)
			{
				_logEngine.LogError("Unable to Add an object which is null", "Unable to add an object which is null", "PlaceToLocationDataObject", null);
				throw new PulpException("Unexpected Error: Unable to Add an object which is Null.");
			}

			// Update the Location FK Index 
			if ((objectToAdd as PlaceToLocationDataObject).LocationURI != null)
			{
			if (!Location_FKIndex.ContainsKey((objectToAdd as PlaceToLocationDataObject).LocationURI))
			{
				var iscompleted = false;
				var count2 = 0;
				while (!iscompleted && count2++ < 15)
				{
					iscompleted = Location_FKIndex.TryAdd((objectToAdd as PlaceToLocationDataObject).LocationURI, new List<int>());
				}
			}
				
			if (!Location_FKIndex[(objectToAdd as PlaceToLocationDataObject).LocationURI].Contains(newInternalId))
				Location_FKIndex[(objectToAdd as PlaceToLocationDataObject).LocationURI].Add(newInternalId);

            LocationDataObject relatedLocation;
            if ((objectToAdd as PlaceToLocationDataObject)._location_NewObjectId != null)
            {
                relatedLocation = _rootObjectDataSet.GetObject(new LocationDataObject() { IsNew = true, InternalObjectId = (objectToAdd as PlaceToLocationDataObject)._location_NewObjectId });
            }
            else
            {
                relatedLocation = _rootObjectDataSet.GetObject(new LocationDataObject((objectToAdd as PlaceToLocationDataObject).LocationURI) { IsNew = false });
            }

			if (relatedLocation != null && this.RootObjectDataSet.NotifyChanges)
                relatedLocation.NotifyPropertyChanged("PlaceToLocationItems", new SeenObjectCollection());
			
			}
	 
			// Update the Place FK Index 
			if ((objectToAdd as PlaceToLocationDataObject).PlaceURI != null)
			{
			if (!Place_FKIndex.ContainsKey((objectToAdd as PlaceToLocationDataObject).PlaceURI))
			{
				var iscompleted = false;
				var count2 = 0;
				while (!iscompleted && count2++ < 15)
				{
					iscompleted = Place_FKIndex.TryAdd((objectToAdd as PlaceToLocationDataObject).PlaceURI, new List<int>());
				}
			}
				
			if (!Place_FKIndex[(objectToAdd as PlaceToLocationDataObject).PlaceURI].Contains(newInternalId))
				Place_FKIndex[(objectToAdd as PlaceToLocationDataObject).PlaceURI].Add(newInternalId);

            PlaceDataObject relatedPlace;
            if ((objectToAdd as PlaceToLocationDataObject)._place_NewObjectId != null)
            {
                relatedPlace = _rootObjectDataSet.GetObject(new PlaceDataObject() { IsNew = true, InternalObjectId = (objectToAdd as PlaceToLocationDataObject)._place_NewObjectId });
            }
            else
            {
                relatedPlace = _rootObjectDataSet.GetObject(new PlaceDataObject((objectToAdd as PlaceToLocationDataObject).PlaceURI) { IsNew = false });
            }

			if (relatedPlace != null && this.RootObjectDataSet.NotifyChanges)
                relatedPlace.NotifyPropertyChanged("PlaceToLocationItems", new SeenObjectCollection());
			
			}
	 
		
		}

        public override void RemoveObject(IDataObject objectToRemove)
        {
            if (PlaceToLocationObjects == null)
                return;
			bool completed;			
			int? objectToRemoveInternalId;
			
			if((objectToRemove as PlaceToLocationDataObject) == null)
			{
				_logEngine.LogError("Unable to remove null object", "The object you are trying to remove is null", "PlaceToLocationObjectsDataSet.RemoveObject", null);
				throw new PulpException("Unable to remove Null Object.");
			}

			if (objectToRemove.IsNew)
				objectToRemoveInternalId = objectToRemove.InternalObjectId;
			else
				objectToRemoveInternalId = PlaceToLocationObjectInternalIds.ContainsKey((objectToRemove as PlaceToLocationDataObject).PrimaryKeysCollection) ? (int?) PlaceToLocationObjectInternalIds[(objectToRemove as PlaceToLocationDataObject).PrimaryKeysCollection] : null;
				
			if (objectToRemoveInternalId != null)
			{
				PlaceToLocationDataObject value;
				completed = false;
				var count = 0;
				while (!completed && count++ < 15)
				{
					completed = PlaceToLocationObjects.TryRemove((int)objectToRemoveInternalId, out value);
				}

                // Reinit InternalObjectId only if the object to remove is part of the current dataset
				if (ReferenceEquals(objectToRemove.ObjectsDataSet, this._rootObjectDataSet))
					objectToRemove.InternalObjectId = null;
				
				if (!objectToRemove.IsNew)
				{
					int idvalue;
					completed = false;
					count = 0;
					while (!completed && count++ < 15)
					{
						completed = PlaceToLocationObjectInternalIds.TryRemove((objectToRemove as PlaceToLocationDataObject).PrimaryKeysCollection, out idvalue);
					}
				}
				
			// Delete the Location FK Index 
				if ((objectToRemove as PlaceToLocationDataObject).LocationURI != null)
				{
				if (Location_FKIndex.ContainsKey((objectToRemove as PlaceToLocationDataObject).LocationURI) && Location_FKIndex[(objectToRemove as PlaceToLocationDataObject).LocationURI].Contains((int)objectToRemoveInternalId))
				{
					Location_FKIndex[(objectToRemove as PlaceToLocationDataObject).LocationURI].Remove((int)objectToRemoveInternalId);

					if (!Location_FKIndex[(objectToRemove as PlaceToLocationDataObject).LocationURI].Any())
					{
						List<int> outvalue;
						var iscompleted = false;
						var count2 = 0;
						while (!iscompleted  && count2++ < 15)
						{
							iscompleted = Location_FKIndex.TryRemove((objectToRemove as PlaceToLocationDataObject).LocationURI, out outvalue);
						}
					}
				}
				
				LocationDataObject relatedLocation;
	            if ((objectToRemove as PlaceToLocationDataObject)._location_NewObjectId != null)
	            {
	                relatedLocation = _rootObjectDataSet.GetObject(new LocationDataObject() { IsNew = true, InternalObjectId = (objectToRemove as PlaceToLocationDataObject)._location_NewObjectId });
	            }
	            else
	            {
	                relatedLocation = _rootObjectDataSet.GetObject(new LocationDataObject((objectToRemove as PlaceToLocationDataObject).LocationURI) { IsNew = false });
	            }

	            if (relatedLocation != null && this.RootObjectDataSet.NotifyChanges)
	                relatedLocation.NotifyPropertyChanged("PlaceToLocationItems", new SeenObjectCollection());
				
				}
		 
			// Delete the Place FK Index 
				if ((objectToRemove as PlaceToLocationDataObject).PlaceURI != null)
				{
				if (Place_FKIndex.ContainsKey((objectToRemove as PlaceToLocationDataObject).PlaceURI) && Place_FKIndex[(objectToRemove as PlaceToLocationDataObject).PlaceURI].Contains((int)objectToRemoveInternalId))
				{
					Place_FKIndex[(objectToRemove as PlaceToLocationDataObject).PlaceURI].Remove((int)objectToRemoveInternalId);

					if (!Place_FKIndex[(objectToRemove as PlaceToLocationDataObject).PlaceURI].Any())
					{
						List<int> outvalue;
						var iscompleted = false;
						var count2 = 0;
						while (!iscompleted  && count2++ < 15)
						{
							iscompleted = Place_FKIndex.TryRemove((objectToRemove as PlaceToLocationDataObject).PlaceURI, out outvalue);
						}
					}
				}
				
				PlaceDataObject relatedPlace;
	            if ((objectToRemove as PlaceToLocationDataObject)._place_NewObjectId != null)
	            {
	                relatedPlace = _rootObjectDataSet.GetObject(new PlaceDataObject() { IsNew = true, InternalObjectId = (objectToRemove as PlaceToLocationDataObject)._place_NewObjectId });
	            }
	            else
	            {
	                relatedPlace = _rootObjectDataSet.GetObject(new PlaceDataObject((objectToRemove as PlaceToLocationDataObject).PlaceURI) { IsNew = false });
	            }

	            if (relatedPlace != null && this.RootObjectDataSet.NotifyChanges)
	                relatedPlace.NotifyPropertyChanged("PlaceToLocationItems", new SeenObjectCollection());
				
				}
		 
			}		
		}

		public override TDataObject GetObject<TDataObject>(Type objectBaseType, int internalObjectId)
        {
            return PlaceToLocationObjects.ContainsKey(internalObjectId) ? PlaceToLocationObjects[internalObjectId] as TDataObject : null;
        }

        public override TDataObject GetObject<TDataObject>(TDataObject objectToGet)
        {
			int? objectToGetInternalId;
			
			if (objectToGet.IsNew)
				objectToGetInternalId = objectToGet.InternalObjectId;
			else
			{
				if((objectToGet as PlaceToLocationDataObject) == null)
				{
					_logEngine.LogError("Unable to get value which value is null", "The object you are trying to get doesn't have a value", "PlaceToLocationObjectsDataSet", null);
					throw new PulpException("Unable to get an element which value is null.");
				}
				objectToGetInternalId = PlaceToLocationObjectInternalIds.ContainsKey((objectToGet as PlaceToLocationDataObject).PrimaryKeysCollection) ? (int?) PlaceToLocationObjectInternalIds[(objectToGet as PlaceToLocationDataObject).PrimaryKeysCollection] : null;
			}
			if (objectToGetInternalId != null)
			{
				return PlaceToLocationObjects.ContainsKey((int)objectToGetInternalId) ? PlaceToLocationObjects[(int)objectToGetInternalId] as TDataObject : null;
			}

			return null;
        }
		
        public override IEnumerable<IDataObject> GetObjectsMarkedForDeletion()
        {
			return PlaceToLocationObjects.Values.Where(c => c.IsMarkedForDeletion).Cast<IDataObject>();
        }

		public override IEnumerable<IDataObject> GetObjectsOutOfGraph()
        {
			return PlaceToLocationObjects.Values.Where(c => !c.IncludedInGraph && !c.IsMarkedForDeletion).Cast<IDataObject>();
        }

		
		public IEnumerable<PlaceToLocationDataObject> GetPlaceToLocationItemsForLocation(LocationDataObject locationInstance) 
		{
			if (locationInstance.IsNew)
            {
			
              return PlaceToLocationObjects.Where(o => o.Value._location_NewObjectId != null && o.Value._location_NewObjectId == locationInstance.InternalObjectId).Select(o => o.Value);
			}
				
			if (Location_FKIndex.ContainsKey(locationInstance.URI))
			{
				return Location_FKIndex[locationInstance.URI].Where(e => PlaceToLocationObjects.ContainsKey(e)).Select(e => PlaceToLocationObjects[e]);
			}
			
			return new DataObjectCollection<PlaceToLocationDataObject>();
		}
		 
		
		public IEnumerable<PlaceToLocationDataObject> GetPlaceToLocationItemsForPlace(PlaceDataObject placeInstance) 
		{
			if (placeInstance.IsNew)
            {
			
              return PlaceToLocationObjects.Where(o => o.Value._place_NewObjectId != null && o.Value._place_NewObjectId == placeInstance.InternalObjectId).Select(o => o.Value);
			}
				
			if (Place_FKIndex.ContainsKey(placeInstance.URI))
			{
				return Place_FKIndex[placeInstance.URI].Where(e => PlaceToLocationObjects.ContainsKey(e)).Select(e => PlaceToLocationObjects[e]);
			}
			
			return new DataObjectCollection<PlaceToLocationDataObject>();
		}
		 

        public override DataObjectCollection<TDataObject> GetRelatedObjects<TDataObject>(IDataObject rootObject, string relationName)
        {
 
 
			return null;
		}
		
        public override void Merge(IObjectsDataSet dataSetToMerge, bool updateOrginalInternalId)
        {
			var PlaceToLocationDataSet = dataSetToMerge as PlaceToLocationObjectsDataSet;
			if(PlaceToLocationDataSet == null)
			{
				throw new PulpException("Unable to merge the current DataSet with null");
			}
            foreach (var item in PlaceToLocationDataSet.PlaceToLocationObjects.Values)
            {
                var oldInternalId = item.InternalObjectId;

				var objectToMerge = item.Clone(false);
                objectToMerge.InternalObjectId = null;
                objectToMerge.ObjectsDataSet = this._rootObjectDataSet;
				
				objectToMerge.IsMarkedForDeletion = item.IsMarkedForDeletion;
                
				_rootObjectDataSet.AddOrReplaceObject(objectToMerge);
                var newInternalId = objectToMerge.InternalObjectId;
                if (updateOrginalInternalId)
                    item.InternalObjectId = newInternalId;

				if (oldInternalId != null && !_rootObjectDataSet.DatasetMergingInternalIdMapping.ContainsKey((int) oldInternalId))
				{
					if(newInternalId == null)
					{
						_logEngine.LogError("Unable to merge elements in DataSet without InternalId", "The Element you are trying to merge doesn't have an internalId", "PlaceToLocationObjectsDataSet", null);
						throw new PulpException("Unable to merge elements in dataset without InternalId");
					}
					var completed = false;
					var count = 0;
					while (!completed && count++ < 15)
					{
						completed = _rootObjectDataSet.DatasetMergingInternalIdMapping.TryAdd((int) oldInternalId, (int) newInternalId);
					}
				}

				MergedDataObjects.Enqueue(objectToMerge as PlaceToLocationDataObject);
            }
        }
		
		public override void FinalizeMerge()
		{
			foreach(var mergedObject in MergedDataObjects)
			{
				mergedObject.UpdateRelatedInternalIds(_rootObjectDataSet.DatasetMergingInternalIdMapping);
			}
			
			ClearMergedDataObjects();
		}

		public override void ReconstructIndexes()
		{
			// Reconstruct the Location FK Index 
			Location_FKIndex = new ConcurrentDictionary< System.String, List<int>>();
				
			foreach (var item in PlaceToLocationObjects.Values)
			{
				if (item.LocationURI == null) 
					continue;				
				
				if (item.IsMarkedForDeletion)
					continue;

				var fk = item.LocationURI;	

				if (!Location_FKIndex.ContainsKey(fk))
				{
					var iscompleted = false;
					var count2 = 0;
					while (!iscompleted && count2++ < 15)
					{
						iscompleted = Location_FKIndex.TryAdd(fk, new List<int>());
					}
				}
				if(item.InternalObjectId == null)
				{
					_logEngine.LogError("Unable to reconstruct indexes.", "An error occured while trying to reconstruct indexes", "PlaceToLocationObjectsDataSet", null);
					throw new PulpException("Unable to reconstruct indexes.");
				}
					
				Location_FKIndex[fk].Add((int)item.InternalObjectId);
			}			
		 
			// Reconstruct the Place FK Index 
			Place_FKIndex = new ConcurrentDictionary< System.String, List<int>>();
				
			foreach (var item in PlaceToLocationObjects.Values)
			{
				if (item.PlaceURI == null) 
					continue;				
				
				if (item.IsMarkedForDeletion)
					continue;

				var fk = item.PlaceURI;	

				if (!Place_FKIndex.ContainsKey(fk))
				{
					var iscompleted = false;
					var count2 = 0;
					while (!iscompleted && count2++ < 15)
					{
						iscompleted = Place_FKIndex.TryAdd(fk, new List<int>());
					}
				}
				if(item.InternalObjectId == null)
				{
					_logEngine.LogError("Unable to reconstruct indexes.", "An error occured while trying to reconstruct indexes", "PlaceToLocationObjectsDataSet", null);
					throw new PulpException("Unable to reconstruct indexes.");
				}
					
				Place_FKIndex[fk].Add((int)item.InternalObjectId);
			}			
		 
		}

		#endregion

		#region private methods
		
		private int GetNextNewInternalObjectId()
		{
			int newInternalId = _rootObjectDataSet.GetNextNewObjectId();

			// With business entity hierarchies I was seeing objects in dataset with same internal Id. Something to do with PK being the same for entities in hierarchy perhaps?
			// Anyway, it's dangeroud because means LoadParentEntity() can get stuck in infinite loop if it finds 'itself' as parent of iteself because of the internal Ids.
			// Ensure newInternalId not already in use
			while (PlaceToLocationObjectInternalIds.Values.Contains(newInternalId))
			{
				newInternalId = _rootObjectDataSet.GetNextNewObjectId();
			}

			return newInternalId;
		}

		#endregion

	}	
}