////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'UserProfile'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class UserProfileDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Uri")]
		protected System.String _uri;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public UserProfileDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public UserProfileDataObject(System.String uri)
			: base()
		{
			this._uri = uri;
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public UserProfileDataObject(UserProfileDataObject template, bool deepCopy)
		{
			this.SetUriValue(template.Uri, false, false);
 
 
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual UserProfileDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual UserProfileDataObject Copy(bool deepCopy)
		{
			return new UserProfileDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var userProfileSource = sourceObject as UserProfileDataObject;

			if (ReferenceEquals(null, userProfileSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetUriValue(userProfileSource.Uri, false, false);


			if (deepCopy)
			{
				this.ObjectsDataSet = userProfileSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(userProfileSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as UserProfileDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._uri == this._uri;
        }


        public override int GetHashCode()
        {		
			
			return _uri == null ? -1 : _uri.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {


		}

		#endregion
        
		#region Relation properties		
		
      public virtual void SetGOUserValue(GOUserDataObject valueToSet)
		{
			SetGOUserValue(valueToSet, true, true);
		}

        public virtual void SetGOUserValue(GOUserDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			var _relatedObjects = ObjectsDataSet.GetRelatedObjects<GOUserDataObject>(this, "GOUser");
			var existing_gOUser = _relatedObjects == null ? null : _relatedObjects.SingleOrDefault();
				
			// Give opportunity to change value before set
			OnBeforeSetRelationField("GOUser", valueToSet);
					
			if (!ReferenceEquals(null, valueToSet))
			{
                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
                if (this.IsNew)
                    valueToSet._userProfile_NewObjectId = this.InternalObjectId;
                else
				{
					// Sync the one-to-one association from the FK side
					valueToSet = ObjectsDataSet.GetObject(valueToSet);
					valueToSet.UserProfile = this;
					valueToSet.UserName = this.Uri;
				}			
			}
			else  if (existing_gOUser != null)
            {
                ObjectsDataSet.RemoveObject(existing_gOUser);
            }
			if (!ReferenceEquals(existing_gOUser ,valueToSet))
				OnPropertyChanged("GOUser", notifyChanges, dirtyHandlerOn);
		}

		private bool __gOUserCurrentLoading = false;
		public virtual GOUserDataObject LoadGOUser(bool skipSecurity = false)
		{
			return LoadGOUser(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual GOUserDataObject LoadGOUser(Parameters parameters, bool skipSecurity = false)
		{
			if(this.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to Load Related Data", "Unable to Load Related Data GOUser for the current entity. The DataObjects doesn't have an ObjectsDataSet", "UserProfileObjectsDataSet", null);
				throw new PulpException("Unable to Load Related Data. The current Data Object doesn't have an ObjectsDataSet");
			}

			var gOUser = (this.ObjectsDataSet as ObjectsDataSet).GOUserObjects == null ? null : (this.ObjectsDataSet as ObjectsDataSet).GOUserObjects.Where(item => item.Value.UserName == Uri).SingleOrDefault().Value;

            // If null relation => load the entity
            if (ReferenceEquals(gOUser, null) && !__gOUserCurrentLoading)
			{
				__gOUserCurrentLoading = true;
				var filterPredicate = "UserName == \"" + Uri + "\"";

				gOUser = ApplicationSettings.Container.Resolve<IDataProvider<GOUserDataObject>>().GetCollection(null, filterPredicate, parameters : parameters, skipSecurity: skipSecurity).SingleOrDefault();

                SetGOUserValue(gOUser, false, false);
				__gOUserCurrentLoading = false;
			}

			// Patch for what is most likely an internal dataset fault when the relation field is on PK side of a OneToOne relation
			// If we've got a gOUser, but relation field not set, encourage it to get set by removing and re-adding the gOUser 
			if (gOUser != null && this.GOUser == null)
			{
				this.ObjectsDataSet.RemoveObject(gOUser);
				this.ObjectsDataSet.AddObject(gOUser);
			}

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return gOUser == null ? null : ObjectsDataSet.GetObject(gOUser);
			
		}
		
		[JsonProperty]
		public virtual GOUserDataObject GOUser 
		{
			get
			{			
				return GetGOUser(true);
			}
			set
			{
				SetGOUserValue(value);
			}
		}
		
		public virtual bool ShouldSerializeGOUser()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("UserProfileDataObject") && ObjectsDataSet.RelationsToInclude["UserProfileDataObject"].Contains("GOUser");
		}

		public virtual GOUserDataObject GetGOUser(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			GOUserDataObject gOUser;

				
			{
             	var _relatedObjects = ObjectsDataSet.GetRelatedObjects<GOUserDataObject>(this, "GOUser");
               	gOUser = _relatedObjects == null ? null : _relatedObjects.SingleOrDefault();
				
				if (allowLazyLoading && gOUser == null && LazyLoadingEnabled)
				{
					gOUser = LoadGOUser();
				}
			}
				
			return gOUser;
		}



		public virtual DataObjectCollection<VisitedPlaceDataObject> LoadVisitedPlaceItems(bool skipSecurity = false)
		{
			return LoadVisitedPlaceItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<VisitedPlaceDataObject> LoadVisitedPlaceItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__visitedPlaceItemsAlreadyLazyLoaded)
            {
				__visitedPlaceItemsAlreadyLazyLoaded = true;
                var filterPredicate = "UserProfileUri == @0";
                var filterArguments = new object[] { (System.String)this.Uri };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<VisitedPlaceDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetVisitedPlaceItems(false);
		}
		
		private bool __visitedPlaceItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<VisitedPlaceDataObject> VisitedPlaceItems 
		{
			get
			{			
				return GetVisitedPlaceItems(true);
			}
		}
		
		public virtual bool ShouldSerializeVisitedPlaceItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("UserProfileDataObject") && ObjectsDataSet.RelationsToInclude["UserProfileDataObject"].Contains("VisitedPlaceItems");
		}

		public virtual DataObjectCollection<VisitedPlaceDataObject> GetVisitedPlaceItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__visitedPlaceItemsAlreadyLazyLoaded)
			{
				LoadVisitedPlaceItems();
			}
			var visitedPlaceItems = ObjectsDataSet.GetRelatedObjects<VisitedPlaceDataObject>(this, "VisitedPlaceItems");							
			visitedPlaceItems.CollectionChanged += new NotifyCollectionChangedEventHandler(VisitedPlaceItems_CollectionChanged);
				
			return visitedPlaceItems;
		}

        private void VisitedPlaceItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as VisitedPlaceDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : VisitedPlace", "UserProfileDataObject.VisitedPlaceItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of UserProfileDataObject throw an exception while trying to add VisitedPlaceDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._userProfile_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.UserProfileUri = this.Uri;
						}
 
						if (relatedObj.IsNew && relatedObj.UserProfileUri == default(System.String))
							relatedObj.UserProfileUri = this.Uri;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as VisitedPlaceDataObject).UserProfile = null;
                    // }
                    break;
            }            
        }

		public override void ClearLazyLoadFlags()
		{
			__visitedPlaceItemsAlreadyLazyLoaded = false;
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			if (LoadGOUser() != null)
				result.Add(GOUser);
			if (LoadVisitedPlaceItems() != null)
				result.AddRange(VisitedPlaceItems);
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return false;
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.String PrimaryKey
		{
			get { return Uri; }
		}

		public virtual void SetPrimaryKeyValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetUriValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetUriValue(System.String valueToSet)
		{
			SetUriValue(valueToSet, true, true);
		}

		public virtual void SetUriValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_uri != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_uri = valueToSet;

				OnPropertyChanged("Uri", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Uri property of the UserProfile DataObject</summary>
        public virtual System.String Uri 
		{
			get	{ return _uri; }
			
			
			set
			{
				SetUriValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
			var gOUser = GetGOUser(false);
			if (gOUser != null && this.IsDirty)
            {
				gOUser.NotifyPropertyChanged("UserProfile." + propertyName, callers);
			}

			if (GetVisitedPlaceItems(false) != null)
            {
                foreach (var item in GetVisitedPlaceItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("UserProfile.", propertyName), callers);                    
                }
            }

        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new UserProfileDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is UserProfileDataObject))
				return false;

			var p = (UserProfileDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.Uri == p.Uri;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Uri}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Uri = (System.String)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class UserProfileCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.String> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public UserProfileCollectionContainer()
		{
		}
		
        public UserProfileCollectionContainer(DataObjectCollection<UserProfileDataObject> userProfileItems)
        {
			Construct(userProfileItems);
		}

		public void Construct(DataObjectCollection<UserProfileDataObject> userProfileItems)
        {
            if (userProfileItems == null)
                return;
				
			this.PrimaryKeys = userProfileItems.Select(c => c.PrimaryKey).ToList();
            if (userProfileItems.ObjectsDataSet == null)
            {
                userProfileItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = userProfileItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = userProfileItems.ObjectsDataSet;
		}

		public DataObjectCollection<UserProfileDataObject> ExtractUserProfileItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<UserProfileDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<UserProfileDataObject>(typeof(UserProfileDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class UserProfileContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.String PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public UserProfileContainer() 
		{
		}

        public UserProfileContainer(UserProfileDataObject userProfile) 
		{
			Construct(userProfile, false);
		}

        public UserProfileContainer(UserProfileDataObject userProfile, bool includeDirtyObjectsOnly) 
		{
			Construct(userProfile, includeDirtyObjectsOnly);
		}

		public virtual void Construct(UserProfileDataObject userProfile, bool includeDirtyObjectsOnly)
		{
            if (userProfile == null)
                return;

			this.PrimaryKey = userProfile.PrimaryKey;
			
            if (userProfile.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(userProfile);
            }

			if(userProfile.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity UserProfile", "Unable to set a dataset to the entity. Container may not be initialized", "UserProfileDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : UserProfile");
			}

			if(userProfile.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in UserProfileDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "UserProfileDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in UserProfileDataObject");
			}
			this.InternalObjectId = (int) userProfile.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? userProfile.ObjectsDataSet.CloneDirtyObjects() : userProfile.ObjectsDataSet;
		}
		
		public UserProfileDataObject ExtractUserProfile()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<UserProfileDataObject>(typeof(UserProfileDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}