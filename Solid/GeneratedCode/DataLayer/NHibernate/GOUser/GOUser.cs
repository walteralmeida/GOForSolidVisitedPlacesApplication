////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.ORMSupportClasses.NHibernate;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;

namespace Solid.Data.DataObjects
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Bridge ORMEntity -> DataObject
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	[Serializable]
	public class ORMGOUser : IORMEntity 
	{
		public virtual System.Guid Id { get; set; }
 
		///
		/// All Persistent non-key fields
		///
		public virtual System.String EmailAddress { get; set; }
		public virtual System.String UserName { get; set; }
		public virtual System.String FullName { get; set; }
		public virtual System.String LastName { get; set; }
		public virtual System.String Password { get; set; }
		public virtual System.String FirstName { get; set; }
		public virtual Nullable<System.DateTime> PasswordExpiry { get; set; }
		public virtual System.Boolean Unregistered { get; set; }
		public virtual System.Boolean EmailValidated { get; set; }
		public virtual System.Boolean Blocked { get; set; }
		public virtual System.Boolean UserValidated { get; set; }
 
		///
		/// PK-Side one-to-one relations
		///
 
		///
		/// All FK-Side Relations
		///
	
 
		///
		/// PK-Side one-to-many relations
		///
		public virtual IList<ORMGOUserGroup> UserGroupItems { get; set; } = new List<ORMGOUserGroup>(); 
		public virtual IList<ORMGOUserRole> UserRoleItems { get; set; } = new List<ORMGOUserRole>(); 
 
		///
		/// Bridge to DataObject
		///
		public virtual IDataObject ToDataObject(IObjectsDataSet dataset)
		{
            var session = NHibernateSessionController.GetCurrentSession();
            session.Evict(this);

			var x = new GOUserDataObject();
			
			SetProperties(x);

			x.IsDirty = x.IsNew = x.IsMarkedForDeletion = false;

			x.ObjectsDataSet = dataset;
			x.ObjectsDataSet.AddObjectIfDoesNotExist(x);

			// Deep-map prefetch relations
			if (PrefetchAssociations.HasPrefetchForEntity("GOUser", ApplicationSettings.Resolve<IDataProviderTransaction>()?.Parameters))
			{
				SetRelations(x);
			}

			return x;
		}

		protected void SetProperties(GOUserDataObject x)
		{
			x.SetIdValue(Id, false, false);
			x.SetEmailAddressValue(EmailAddress, false, false);
			x.SetUserNameValue(UserName, false, false);
			x.SetFullNameValue(FullName, false, false);
			x.SetLastNameValue(LastName, false, false);
			x.SetPasswordValue(Password, false, false);
			x.SetFirstNameValue(FirstName, false, false);
			x.SetPasswordExpiryValue(PasswordExpiry, false, false);
			x.SetUnregisteredValue(Unregistered, false, false);
			x.SetEmailValidatedValue(EmailValidated, false, false);
			x.SetBlockedValue(Blocked, false, false);
			x.SetUserValidatedValue(UserValidated, false, false);
		}

		protected void SetRelations(GOUserDataObject x)
		{
			var prefetches = PrefetchAssociations.Get("GOUser", ApplicationSettings.Resolve<IDataProviderTransaction>()?.Parameters);

			if (prefetches.Contains("UserRoleItems") && this.UserRoleItems.Count > 0)
			{
				var iter = this.UserRoleItems.GetEnumerator();
				
				while (iter.MoveNext())
				{
					var userRoleItemsItem = x.ObjectsDataSet.GetObject(new GOUserRoleDataObject((System.String)iter.Current.GORoleName, (System.Guid)iter.Current.GOUserId) { IsNew = false });

					if (userRoleItemsItem == null)
						userRoleItemsItem = iter.Current.ToDataObject(x.ObjectsDataSet) as GOUserRoleDataObject;

					x.UserRoleItems.Add(userRoleItemsItem);
				}
			}

			if (prefetches.Contains("UserGroupItems") && this.UserGroupItems.Count > 0)
			{
				var iter = this.UserGroupItems.GetEnumerator();
				
				while (iter.MoveNext())
				{
					var userGroupItemsItem = x.ObjectsDataSet.GetObject(new GOUserGroupDataObject((System.String)iter.Current.GOGroupName, (System.Guid)iter.Current.GOUserId) { IsNew = false });

					if (userGroupItemsItem == null)
						userGroupItemsItem = iter.Current.ToDataObject(x.ObjectsDataSet) as GOUserGroupDataObject;

					x.UserGroupItems.Add(userGroupItemsItem);
				}
			}

		}
		
		// For database filtering, nothing IsNew or IsDirty, but these stubs needed for ORM security predicates to compile
		public virtual bool IsNew => false;
		public virtual bool IsDirty => false;

	}
}