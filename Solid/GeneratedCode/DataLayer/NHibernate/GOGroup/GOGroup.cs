////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
////////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.ORMSupportClasses.NHibernate;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;

namespace Solid.Data.DataObjects
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// Bridge ORMEntity -> DataObject
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	[Serializable]
	public class ORMGOGroup : IORMEntity 
	{
		public virtual System.String Name { get; set; }
 
		///
		/// All Persistent non-key fields
		///
		public virtual System.String DisplayName { get; set; }
		public virtual System.String Description { get; set; }
		public virtual System.Boolean IsSpecialGroup { get; set; }
		public virtual int SpecialGroup { get; set; }
 
		///
		/// PK-Side one-to-one relations
		///
 
		///
		/// All FK-Side Relations
		///
	
 
		///
		/// PK-Side one-to-many relations
		///
		public virtual IList<ORMGOGroupRole> GroupRoleItems { get; set; } = new List<ORMGOGroupRole>(); 
		public virtual IList<ORMGOUserGroup> UserGroupItems { get; set; } = new List<ORMGOUserGroup>(); 
 
		///
		/// Bridge to DataObject
		///
		public virtual IDataObject ToDataObject(IObjectsDataSet dataset)
		{
            var session = NHibernateSessionController.GetCurrentSession();
            session.Evict(this);

			var x = new GOGroupDataObject();
			
			SetProperties(x);

			x.IsDirty = x.IsNew = x.IsMarkedForDeletion = false;

			x.ObjectsDataSet = dataset;
			x.ObjectsDataSet.AddObjectIfDoesNotExist(x);

			// Deep-map prefetch relations
			if (PrefetchAssociations.HasPrefetchForEntity("GOGroup", ApplicationSettings.Resolve<IDataProviderTransaction>()?.Parameters))
			{
				SetRelations(x);
			}

			return x;
		}

		protected void SetProperties(GOGroupDataObject x)
		{
			x.SetNameValue(Name, false, false);
			x.SetDisplayNameValue(DisplayName, false, false);
			x.SetDescriptionValue(Description, false, false);
			x.SetIsSpecialGroupValue(IsSpecialGroup, false, false);
			x.SetSpecialGroupValue((GOSpecialGroupsEnum)SpecialGroup, false, false);
		}

		protected void SetRelations(GOGroupDataObject x)
		{
			var prefetches = PrefetchAssociations.Get("GOGroup", ApplicationSettings.Resolve<IDataProviderTransaction>()?.Parameters);

			if (prefetches.Contains("UserGroupItems") && this.UserGroupItems.Count > 0)
			{
				var iter = this.UserGroupItems.GetEnumerator();
				
				while (iter.MoveNext())
				{
					var userGroupItemsItem = x.ObjectsDataSet.GetObject(new GOUserGroupDataObject((System.String)iter.Current.GOGroupName, (System.Guid)iter.Current.GOUserId) { IsNew = false });

					if (userGroupItemsItem == null)
						userGroupItemsItem = iter.Current.ToDataObject(x.ObjectsDataSet) as GOUserGroupDataObject;

					x.UserGroupItems.Add(userGroupItemsItem);
				}
			}

			if (prefetches.Contains("GroupRoleItems") && this.GroupRoleItems.Count > 0)
			{
				var iter = this.GroupRoleItems.GetEnumerator();
				
				while (iter.MoveNext())
				{
					var groupRoleItemsItem = x.ObjectsDataSet.GetObject(new GOGroupRoleDataObject((System.String)iter.Current.GOGroupName, (System.String)iter.Current.GORoleName) { IsNew = false });

					if (groupRoleItemsItem == null)
						groupRoleItemsItem = iter.Current.ToDataObject(x.ObjectsDataSet) as GOGroupRoleDataObject;

					x.GroupRoleItems.Add(groupRoleItemsItem);
				}
			}

		}
		
		// For database filtering, nothing IsNew or IsDirty, but these stubs needed for ORM security predicates to compile
		public virtual bool IsNew => false;
		public virtual bool IsDirty => false;

	}
}