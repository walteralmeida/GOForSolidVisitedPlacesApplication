////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'PlaceToLocation'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class PlaceToLocationDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("LocationURI")]
		protected System.String _locationURI;
		[JsonProperty ("PlaceURI")]
		protected System.String _placeURI;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)
		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _location_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_location_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		[JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)]
		protected internal virtual int? _place_NewObjectId { get; set; }
        
		public virtual bool ShouldSerialize_place_NewObjectId()
        {
            return ObjectsDataSet != null && ObjectsDataSet.SerializeTechnicalProperties;
        }


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public PlaceToLocationDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public PlaceToLocationDataObject(System.String locationURI, System.String placeURI)
			: base()
		{
			this._locationURI = locationURI;
			this._placeURI = placeURI;
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public PlaceToLocationDataObject(IdentifyingFieldsCollection<System.String,System.String> primaryKey)
			: base()
		{
			this._locationURI = primaryKey.IdentifyingField1;
			this._placeURI = primaryKey.IdentifyingField2;
		}
		/// <summary>
		/// Copy Constructor
		/// </summary>
		public PlaceToLocationDataObject(PlaceToLocationDataObject template, bool deepCopy)
		{
			this.SetLocationURIValue(template.LocationURI, false, false);
			this.SetPlaceURIValue(template.PlaceURI, false, false);
 
			this._location_NewObjectId = template._location_NewObjectId;
 
			this._place_NewObjectId = template._place_NewObjectId;
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual PlaceToLocationDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual PlaceToLocationDataObject Copy(bool deepCopy)
		{
			return new PlaceToLocationDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var placeToLocationSource = sourceObject as PlaceToLocationDataObject;

			if (ReferenceEquals(null, placeToLocationSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetLocationURIValue(placeToLocationSource.LocationURI, false, false);
			this.SetPlaceURIValue(placeToLocationSource.PlaceURI, false, false);
			this._location_NewObjectId = (sourceObject as PlaceToLocationDataObject)._location_NewObjectId;

			this._place_NewObjectId = (sourceObject as PlaceToLocationDataObject)._place_NewObjectId;

			if (deepCopy)
			{
				this.ObjectsDataSet = placeToLocationSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(placeToLocationSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as PlaceToLocationDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._locationURI == this._locationURI && p._placeURI == this._placeURI;
        }


        public override int GetHashCode()
        {		
			return HashHelper.RSHash(_locationURI,_placeURI);
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {
			if (this._location_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._location_NewObjectId))
				{
                    this._location_NewObjectId = null;
				}
                else
				{
					this._location_NewObjectId = datasetMergingInternalIdMapping[(int) this._location_NewObjectId];
				}
			}

			if (this._place_NewObjectId != null)
			{
				if (!datasetMergingInternalIdMapping.ContainsKey((int) this._place_NewObjectId))
				{
                    this._place_NewObjectId = null;
				}
                else
				{
					this._place_NewObjectId = datasetMergingInternalIdMapping[(int) this._place_NewObjectId];
				}
			}

		}

		#endregion
        
		#region Relation properties		
		
      public virtual void SetLocationValue(LocationDataObject valueToSet)
		{
			SetLocationValue(valueToSet, true, true);
		}

        public virtual void SetLocationValue(LocationDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			LocationDataObject existing_location = null ;

			if ( !(this.LocationURI == null || ObjectsDataSet == null))
			{
				var key = this._location_NewObjectId == null ? new LocationDataObject(this.LocationURI) { IsNew = false } : new LocationDataObject() { IsNew = true, InternalObjectId = this._location_NewObjectId };			
				existing_location = (LocationDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_location ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("Location", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "PlaceToLocationDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_location_NewObjectId != valueToSet.InternalObjectId)
					{
						_location_NewObjectId = valueToSet.InternalObjectId;
						_locationURI = valueToSet.URI;
						OnPropertyChanged("LocationURI",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_locationURI != valueToSet.URI)
					{
						_location_NewObjectId = null;

						_locationURI = valueToSet.URI;
						OnPropertyChanged("LocationURI",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_locationURI = null;
				OnPropertyChanged("LocationURI",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_location ,valueToSet))
				OnPropertyChanged("Location", notifyChanges, dirtyHandlerOn);
		}

		private bool __locationCurrentLoading = false;
		public virtual LocationDataObject LoadLocation(bool skipSecurity = false)
		{
			return LoadLocation(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual LocationDataObject LoadLocation(Parameters parameters, bool skipSecurity = false)
		{
			var location = GetLocation(allowLazyLoading: false); 
			if (location != null)
				return location;

			
			location = (LocationDataObject)ObjectsDataSet.GetObject(new LocationDataObject(this.LocationURI) { IsNew = false });

            if (location == null && !__locationCurrentLoading)
            {
				__locationCurrentLoading = true;
                location = ApplicationSettings.Container.Resolve<IDataProvider<LocationDataObject>>().Get(new LocationDataObject(this.LocationURI), parameters : parameters, skipSecurity: skipSecurity);
                SetLocationValue(location, false, false);
				__locationCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return location == null ? null : ObjectsDataSet.GetObject(location);
		}
		
		[JsonProperty]
		public virtual LocationDataObject Location 
		{
			get
			{			
				return GetLocation(true);
			}
			set
			{
				SetLocationValue(value);
			}
		}
		
		public virtual bool ShouldSerializeLocation()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("PlaceToLocationDataObject") && ObjectsDataSet.RelationsToInclude["PlaceToLocationDataObject"].Contains("Location");
		}

		public virtual LocationDataObject GetLocation(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			LocationDataObject location;

				
			if (_location_NewObjectId != null)
			{
				location = (LocationDataObject)ObjectsDataSet.GetObject(new LocationDataObject() { IsNew = true, InternalObjectId = _location_NewObjectId });
			}
			else
			{
				if (LocationURI == null)
					location = null;
				else
				location = (LocationDataObject)ObjectsDataSet.GetObject(new LocationDataObject(this.LocationURI) { IsNew = false });
				
				if (allowLazyLoading && location == null && LazyLoadingEnabled)
				{
					location = LoadLocation();
				}
			}
				
			return location;
		}

		public virtual System.String LocationForeignKey
		{
			get { return LocationURI; }
			set 
			{	
				LocationURI = value;
			}
			
		}
		

      public virtual void SetPlaceValue(PlaceDataObject valueToSet)
		{
			SetPlaceValue(valueToSet, true, true);
		}

        public virtual void SetPlaceValue(PlaceDataObject valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{	
		
			PlaceDataObject existing_place = null ;

			if ( !(this.PlaceURI == null || ObjectsDataSet == null))
			{
				var key = this._place_NewObjectId == null ? new PlaceDataObject(this.PlaceURI) { IsNew = false } : new PlaceDataObject() { IsNew = true, InternalObjectId = this._place_NewObjectId };			
				existing_place = (PlaceDataObject)ObjectsDataSet.GetObject(key);
			}
				
			if (ReferenceEquals(existing_place ,valueToSet))
            {
				return;
            }
			// Give opportunity to change value before set
			OnBeforeSetRelationField("Place", valueToSet);
					
			// Setting the navigator desync the FK. The FK should be resync
			if (!ReferenceEquals(null, valueToSet))
			{
				if(ObjectsDataSet == null)
				{
					_logEngine.LogError("Unable to set Relation Field", "Unable to set Relation Field, your entity doesn't have a DataSet.", "PlaceToLocationDataObject", null);
					throw new PulpException("Unable to set Relation fields, your entity doesn't have a DataSet");
				}

                ObjectsDataSet.AddObjectIfDoesNotExist(valueToSet);
				
				if (valueToSet.IsNew)
				{
					if (_place_NewObjectId != valueToSet.InternalObjectId)
					{
						_place_NewObjectId = valueToSet.InternalObjectId;
						_placeURI = valueToSet.URI;
						OnPropertyChanged("PlaceURI",notifyChanges, dirtyHandlerOn);
					}
				}
				else
				{
					if (_placeURI != valueToSet.URI)
					{
						_place_NewObjectId = null;

						_placeURI = valueToSet.URI;
						OnPropertyChanged("PlaceURI",notifyChanges, dirtyHandlerOn);
					}
				}
			}
			else
			{
				_placeURI = null;
				OnPropertyChanged("PlaceURI",notifyChanges, dirtyHandlerOn);
			}
			if (!ReferenceEquals(existing_place ,valueToSet))
				OnPropertyChanged("Place", notifyChanges, dirtyHandlerOn);
		}

		private bool __placeCurrentLoading = false;
		public virtual PlaceDataObject LoadPlace(bool skipSecurity = false)
		{
			return LoadPlace(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual PlaceDataObject LoadPlace(Parameters parameters, bool skipSecurity = false)
		{
			var place = GetPlace(allowLazyLoading: false); 
			if (place != null)
				return place;

			
			place = (PlaceDataObject)ObjectsDataSet.GetObject(new PlaceDataObject(this.PlaceURI) { IsNew = false });

            if (place == null && !__placeCurrentLoading)
            {
				__placeCurrentLoading = true;
                place = ApplicationSettings.Container.Resolve<IDataProvider<PlaceDataObject>>().Get(new PlaceDataObject(this.PlaceURI), parameters : parameters, skipSecurity: skipSecurity);
                SetPlaceValue(place, false, false);
				__placeCurrentLoading = false;
            }

			// Return the object was added to our dataset, not the 'temporary' instance that was loaded via the Get()
            return place == null ? null : ObjectsDataSet.GetObject(place);
		}
		
		[JsonProperty]
		public virtual PlaceDataObject Place 
		{
			get
			{			
				return GetPlace(true);
			}
			set
			{
				SetPlaceValue(value);
			}
		}
		
		public virtual bool ShouldSerializePlace()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("PlaceToLocationDataObject") && ObjectsDataSet.RelationsToInclude["PlaceToLocationDataObject"].Contains("Place");
		}

		public virtual PlaceDataObject GetPlace(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			PlaceDataObject place;

				
			if (_place_NewObjectId != null)
			{
				place = (PlaceDataObject)ObjectsDataSet.GetObject(new PlaceDataObject() { IsNew = true, InternalObjectId = _place_NewObjectId });
			}
			else
			{
				if (PlaceURI == null)
					place = null;
				else
				place = (PlaceDataObject)ObjectsDataSet.GetObject(new PlaceDataObject(this.PlaceURI) { IsNew = false });
				
				if (allowLazyLoading && place == null && LazyLoadingEnabled)
				{
					place = LoadPlace();
				}
			}
				
			return place;
		}

		public virtual System.String PlaceForeignKey
		{
			get { return PlaceURI; }
			set 
			{	
				PlaceURI = value;
			}
			
		}
		

		public override void ClearLazyLoadFlags()
		{
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			if (LoadLocation() != null)
				result.Add(Location);
			if (LoadPlace() != null)
				result.Add(Place);
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return
				Location == other ||
				(other is LocationDataObject && (LocationURI != default(System.String)) && (LocationURI == (other as LocationDataObject).URI)) || 
				Place == other ||
				(other is PlaceDataObject && (PlaceURI != default(System.String)) && (PlaceURI == (other as PlaceDataObject).URI)); 
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual IdentifyingFieldsCollection<System.String,System.String> PrimaryKeysCollection
		{
			get { return new IdentifyingFieldsCollection<System.String,System.String>(LocationURI,PlaceURI); }	
		}		
	
			
			
		public virtual void SetLocationURIValue(System.String valueToSet)
		{
			SetLocationURIValue(valueToSet, true, true);
		}

		public virtual void SetLocationURIValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_locationURI != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_locationURI = valueToSet;

				OnPropertyChanged("LocationURI", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKeysCollection", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The LocationURI property of the PlaceToLocation DataObject</summary>
        public virtual System.String LocationURI 
		{
			get	{ return _locationURI; }
			
			
			set
			{
				SetLocationURIValue(value);
			}
		}		
			
			
		public virtual void SetPlaceURIValue(System.String valueToSet)
		{
			SetPlaceURIValue(valueToSet, true, true);
		}

		public virtual void SetPlaceURIValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_placeURI != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_placeURI = valueToSet;

				OnPropertyChanged("PlaceURI", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKeysCollection", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The PlaceURI property of the PlaceToLocation DataObject</summary>
        public virtual System.String PlaceURI 
		{
			get	{ return _placeURI; }
			
			
			set
			{
				SetPlaceURIValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects


        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new PlaceToLocationDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is PlaceToLocationDataObject))
				return false;

			var p = (PlaceToLocationDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.LocationURI == p.LocationURI;
			fieldsComparison &= this.PlaceURI == p.PlaceURI;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{LocationURI}/{PlaceURI}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			// Only supported for single PKs, all other PKs should be user-assigned
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class PlaceToLocationCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<IdentifyingFieldsCollection<System.String,System.String>> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public PlaceToLocationCollectionContainer()
		{
		}
		
        public PlaceToLocationCollectionContainer(DataObjectCollection<PlaceToLocationDataObject> placeToLocationItems)
        {
			Construct(placeToLocationItems);
		}

		public void Construct(DataObjectCollection<PlaceToLocationDataObject> placeToLocationItems)
        {
            if (placeToLocationItems == null)
                return;
				
			this.PrimaryKeys = placeToLocationItems.Select(c => c.PrimaryKeysCollection).ToList();			
            if (placeToLocationItems.ObjectsDataSet == null)
            {
                placeToLocationItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = placeToLocationItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = placeToLocationItems.ObjectsDataSet;
		}

		public DataObjectCollection<PlaceToLocationDataObject> ExtractPlaceToLocationItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<PlaceToLocationDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<PlaceToLocationDataObject>(typeof(PlaceToLocationDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class PlaceToLocationContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public IdentifyingFieldsCollection<System.String,System.String> PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public PlaceToLocationContainer() 
		{
		}

        public PlaceToLocationContainer(PlaceToLocationDataObject placeToLocation) 
		{
			Construct(placeToLocation, false);
		}

        public PlaceToLocationContainer(PlaceToLocationDataObject placeToLocation, bool includeDirtyObjectsOnly) 
		{
			Construct(placeToLocation, includeDirtyObjectsOnly);
		}

		public virtual void Construct(PlaceToLocationDataObject placeToLocation, bool includeDirtyObjectsOnly)
		{
            if (placeToLocation == null)
                return;

			this.PrimaryKey = placeToLocation.PrimaryKeysCollection;		
			
            if (placeToLocation.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(placeToLocation);
            }

			if(placeToLocation.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity PlaceToLocation", "Unable to set a dataset to the entity. Container may not be initialized", "PlaceToLocationDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : PlaceToLocation");
			}

			if(placeToLocation.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in PlaceToLocationDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "PlaceToLocationDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in PlaceToLocationDataObject");
			}
			this.InternalObjectId = (int) placeToLocation.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? placeToLocation.ObjectsDataSet.CloneDirtyObjects() : placeToLocation.ObjectsDataSet;
		}
		
		public PlaceToLocationDataObject ExtractPlaceToLocation()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<PlaceToLocationDataObject>(typeof(PlaceToLocationDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}