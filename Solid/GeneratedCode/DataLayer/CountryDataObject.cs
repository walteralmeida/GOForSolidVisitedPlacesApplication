////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'Country'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class CountryDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Abstract")]
		protected System.String _abstract;
		[JsonProperty ("Flag")]
		protected System.String _flag;
		[JsonProperty ("LongName")]
		protected System.String _longName;
		[JsonProperty ("Name")]
		protected System.String _name;
		[JsonProperty ("PopulationDensity")]
		protected Nullable<System.Decimal> _populationDensity;
		[JsonProperty ("PopulationTotal")]
		protected Nullable<System.Int64> _populationTotal;
		[JsonProperty ("URI")]
		protected System.String _uRI;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public CountryDataObject() : base ()		
		{
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public CountryDataObject(System.String uRI)
			: base()
		{
			this._uRI = uRI;
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public CountryDataObject(CountryDataObject template, bool deepCopy)
		{
			this.SetAbstractValue(template.Abstract, false, false);
			this.SetFlagValue(template.Flag, false, false);
			this.SetLongNameValue(template.LongName, false, false);
			this.SetNameValue(template.Name, false, false);
			this.SetPopulationDensityValue(template.PopulationDensity, false, false);
			this.SetPopulationTotalValue(template.PopulationTotal, false, false);
			this.SetURIValue(template.URI, false, false);
 
 
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual CountryDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual CountryDataObject Copy(bool deepCopy)
		{
			return new CountryDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var countrySource = sourceObject as CountryDataObject;

			if (ReferenceEquals(null, countrySource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetAbstractValue(countrySource.Abstract, false, false);
			this.SetFlagValue(countrySource.Flag, false, false);
			this.SetLongNameValue(countrySource.LongName, false, false);
			this.SetNameValue(countrySource.Name, false, false);
			this.SetPopulationDensityValue(countrySource.PopulationDensity, false, false);
			this.SetPopulationTotalValue(countrySource.PopulationTotal, false, false);
			this.SetURIValue(countrySource.URI, false, false);


			if (deepCopy)
			{
				this.ObjectsDataSet = countrySource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(countrySource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as CountryDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._uRI == this._uRI;
        }


        public override int GetHashCode()
        {		
			
			return _uRI == null ? -1 : _uRI.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {


		}

		#endregion
        
		#region Relation properties		
		

		public virtual DataObjectCollection<LocationDataObject> LoadLocationItems(bool skipSecurity = false)
		{
			return LoadLocationItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<LocationDataObject> LoadLocationItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__locationItemsAlreadyLazyLoaded)
            {
				__locationItemsAlreadyLazyLoaded = true;
                var filterPredicate = "CountryURI == @0";
                var filterArguments = new object[] { (System.String)this.URI };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<LocationDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetLocationItems(false);
		}
		
		private bool __locationItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<LocationDataObject> LocationItems 
		{
			get
			{			
				return GetLocationItems(true);
			}
		}
		
		public virtual bool ShouldSerializeLocationItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("CountryDataObject") && ObjectsDataSet.RelationsToInclude["CountryDataObject"].Contains("LocationItems");
		}

		public virtual DataObjectCollection<LocationDataObject> GetLocationItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__locationItemsAlreadyLazyLoaded)
			{
				LoadLocationItems();
			}
			var locationItems = ObjectsDataSet.GetRelatedObjects<LocationDataObject>(this, "LocationItems");							
			locationItems.CollectionChanged += new NotifyCollectionChangedEventHandler(LocationItems_CollectionChanged);
				
			return locationItems;
		}

        private void LocationItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as LocationDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : Location", "CountryDataObject.LocationItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of CountryDataObject throw an exception while trying to add LocationDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._country_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.CountryURI = this.URI;
						}
 
						if (relatedObj.IsNew && relatedObj.CountryURI == default(System.String))
							relatedObj.CountryURI = this.URI;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as LocationDataObject).Country = null;
                    // }
                    break;
            }            
        }


		public virtual DataObjectCollection<PlaceDataObject> LoadPlaceItems(bool skipSecurity = false)
		{
			return LoadPlaceItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<PlaceDataObject> LoadPlaceItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__placeItemsAlreadyLazyLoaded)
            {
				__placeItemsAlreadyLazyLoaded = true;
                var filterPredicate = "CountryURI == @0";
                var filterArguments = new object[] { (System.String)this.URI };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<PlaceDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetPlaceItems(false);
		}
		
		private bool __placeItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<PlaceDataObject> PlaceItems 
		{
			get
			{			
				return GetPlaceItems(true);
			}
		}
		
		public virtual bool ShouldSerializePlaceItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("CountryDataObject") && ObjectsDataSet.RelationsToInclude["CountryDataObject"].Contains("PlaceItems");
		}

		public virtual DataObjectCollection<PlaceDataObject> GetPlaceItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__placeItemsAlreadyLazyLoaded)
			{
				LoadPlaceItems();
			}
			var placeItems = ObjectsDataSet.GetRelatedObjects<PlaceDataObject>(this, "PlaceItems");							
			placeItems.CollectionChanged += new NotifyCollectionChangedEventHandler(PlaceItems_CollectionChanged);
				
			return placeItems;
		}

        private void PlaceItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as PlaceDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : Place", "CountryDataObject.PlaceItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of CountryDataObject throw an exception while trying to add PlaceDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._country_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.CountryURI = this.URI;
						}
 
						if (relatedObj.IsNew && relatedObj.CountryURI == default(System.String))
							relatedObj.CountryURI = this.URI;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as PlaceDataObject).Country = null;
                    // }
                    break;
            }            
        }

		public override void ClearLazyLoadFlags()
		{
			__locationItemsAlreadyLazyLoaded = false;
			__placeItemsAlreadyLazyLoaded = false;
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			if (LoadLocationItems() != null)
				result.AddRange(LocationItems);
			if (LoadPlaceItems() != null)
				result.AddRange(PlaceItems);
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return false;
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.String PrimaryKey
		{
			get { return URI; }
		}

		public virtual void SetPrimaryKeyValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetURIValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetAbstractValue(System.String valueToSet)
		{
			SetAbstractValue(valueToSet, true, true);
		}

		public virtual void SetAbstractValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_abstract != valueToSet)
			{
				_abstract = valueToSet;

				OnPropertyChanged("Abstract", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Abstract property of the Country DataObject</summary>
        public virtual System.String Abstract 
		{
			get	{ return String.IsNullOrEmpty(_abstract) ? null : _abstract; }
			
			
			set
			{
				SetAbstractValue(value);
			}
		}		
			
			
		public virtual void SetFlagValue(System.String valueToSet)
		{
			SetFlagValue(valueToSet, true, true);
		}

		public virtual void SetFlagValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_flag != valueToSet)
			{
				_flag = valueToSet;

				OnPropertyChanged("Flag", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Flag property of the Country DataObject</summary>
        public virtual System.String Flag 
		{
			get	{ return String.IsNullOrEmpty(_flag) ? null : _flag; }
			
			
			set
			{
				SetFlagValue(value);
			}
		}		
			
			
		public virtual void SetLongNameValue(System.String valueToSet)
		{
			SetLongNameValue(valueToSet, true, true);
		}

		public virtual void SetLongNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_longName != valueToSet)
			{
				_longName = valueToSet;

				OnPropertyChanged("LongName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Long Name property of the Country DataObject</summary>
        public virtual System.String LongName 
		{
			get	{ return String.IsNullOrEmpty(_longName) ? null : _longName; }
			
			
			set
			{
				SetLongNameValue(value);
			}
		}		
			
			
		public virtual void SetNameValue(System.String valueToSet)
		{
			SetNameValue(valueToSet, true, true);
		}

		public virtual void SetNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_name != valueToSet)
			{
				_name = valueToSet;

				OnPropertyChanged("Name", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Name property of the Country DataObject</summary>
        public virtual System.String Name 
		{
			get	{ return _name; }
			
			
			set
			{
				SetNameValue(value);
			}
		}		
			
			
		public virtual void SetPopulationDensityValue(Nullable<System.Decimal> valueToSet)
		{
			SetPopulationDensityValue(valueToSet, true, true);
		}

		public virtual void SetPopulationDensityValue(Nullable<System.Decimal> valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_populationDensity != (valueToSet == null ? (decimal?) null : Math.Round((decimal)valueToSet, 10)))
			{
				_populationDensity = (valueToSet == null ? (decimal?) null : Math.Round((decimal)valueToSet, 10));

				OnPropertyChanged("PopulationDensity", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Population Density property of the Country DataObject</summary>
        public virtual Nullable<System.Decimal> PopulationDensity 
		{
			get	{ return _populationDensity;}
			
			
			set
			{
				SetPopulationDensityValue(value);
			}
		}		
			
			
		public virtual void SetPopulationTotalValue(Nullable<System.Int64> valueToSet)
		{
			SetPopulationTotalValue(valueToSet, true, true);
		}

		public virtual void SetPopulationTotalValue(Nullable<System.Int64> valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_populationTotal != valueToSet)
			{
				_populationTotal = valueToSet;

				OnPropertyChanged("PopulationTotal", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Population Total property of the Country DataObject</summary>
        public virtual Nullable<System.Int64> PopulationTotal 
		{
			get	{ return _populationTotal;}
			
			
			set
			{
				SetPopulationTotalValue(value);
			}
		}		
			
			
		public virtual void SetURIValue(System.String valueToSet)
		{
			SetURIValue(valueToSet, true, true);
		}

		public virtual void SetURIValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_uRI != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_uRI = valueToSet;

				OnPropertyChanged("URI", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The URI property of the Country DataObject</summary>
        public virtual System.String URI 
		{
			get	{ return _uRI; }
			
			
			set
			{
				SetURIValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
			if (GetLocationItems(false) != null)
            {
                foreach (var item in GetLocationItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Country.", propertyName), callers);                    
                }
            }

			if (GetPlaceItems(false) != null)
            {
                foreach (var item in GetPlaceItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Country.", propertyName), callers);                    
                }
            }

        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new CountryDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is CountryDataObject))
				return false;

			var p = (CountryDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.PopulationDensity == p.PopulationDensity;
			fieldsComparison &= this.PopulationTotal == p.PopulationTotal;
			fieldsComparison &= this.URI == p.URI;
			fieldsComparison &= this.LongName == p.LongName;
			fieldsComparison &= this.Name == p.Name;
			fieldsComparison &= this.Abstract == p.Abstract;
			fieldsComparison &= this.Flag == p.Flag;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{URI}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.URI = (System.String)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class CountryCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.String> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public CountryCollectionContainer()
		{
		}
		
        public CountryCollectionContainer(DataObjectCollection<CountryDataObject> countryItems)
        {
			Construct(countryItems);
		}

		public void Construct(DataObjectCollection<CountryDataObject> countryItems)
        {
            if (countryItems == null)
                return;
				
			this.PrimaryKeys = countryItems.Select(c => c.PrimaryKey).ToList();
            if (countryItems.ObjectsDataSet == null)
            {
                countryItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = countryItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = countryItems.ObjectsDataSet;
		}

		public DataObjectCollection<CountryDataObject> ExtractCountryItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<CountryDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<CountryDataObject>(typeof(CountryDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class CountryContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.String PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public CountryContainer() 
		{
		}

        public CountryContainer(CountryDataObject country) 
		{
			Construct(country, false);
		}

        public CountryContainer(CountryDataObject country, bool includeDirtyObjectsOnly) 
		{
			Construct(country, includeDirtyObjectsOnly);
		}

		public virtual void Construct(CountryDataObject country, bool includeDirtyObjectsOnly)
		{
            if (country == null)
                return;

			this.PrimaryKey = country.PrimaryKey;
			
            if (country.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(country);
            }

			if(country.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity Country", "Unable to set a dataset to the entity. Container may not be initialized", "CountryDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : Country");
			}

			if(country.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in CountryDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "CountryDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in CountryDataObject");
			}
			this.InternalObjectId = (int) country.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? country.ObjectsDataSet.CloneDirtyObjects() : country.ObjectsDataSet;
		}
		
		public CountryDataObject ExtractCountry()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<CountryDataObject>(typeof(CountryDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}