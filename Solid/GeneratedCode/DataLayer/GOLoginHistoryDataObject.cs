////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'GOLoginHistory'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class GOLoginHistoryDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Id")]
		protected System.Int32 _id;
		[JsonProperty ("Info")]
		protected System.String _info;
		[JsonProperty ("Result")]
		protected System.Boolean _result;
		[JsonProperty ("Timestamp")]
		protected System.DateTime _timestamp;
		[JsonProperty("Timestamp_WithTimezoneOffset")]
		protected System.DateTimeOffset? _timestamp_WithTimezoneOffset;
		[JsonProperty ("User")]
		protected System.String _user;
	
	
		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public GOLoginHistoryDataObject() : base ()		
		{
			SetResultValue(false, false, false);
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GOLoginHistoryDataObject(System.Int32 id)
			: base()
		{
			this._id = id;
			SetResultValue(false, false, false);
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public GOLoginHistoryDataObject(GOLoginHistoryDataObject template, bool deepCopy)
		{
			this.SetTimestampValue(template.Timestamp, false, false);
			this._timestamp_WithTimezoneOffset = template._timestamp_WithTimezoneOffset;
			this.SetIdValue(template.Id, false, false);
			this.SetInfoValue(template.Info, false, false);
			this.SetResultValue(template.Result, false, false);
			this.SetUserValue(template.User, false, false);
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual GOLoginHistoryDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual GOLoginHistoryDataObject Copy(bool deepCopy)
		{
			return new GOLoginHistoryDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var gOLoginHistorySource = sourceObject as GOLoginHistoryDataObject;

			if (ReferenceEquals(null, gOLoginHistorySource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetIdValue(gOLoginHistorySource.Id, false, false);
			this.SetInfoValue(gOLoginHistorySource.Info, false, false);
			this.SetResultValue(gOLoginHistorySource.Result, false, false);
			this.SetTimestampValue(gOLoginHistorySource.Timestamp, false, false);
			this.SetUserValue(gOLoginHistorySource.User, false, false);
			if (deepCopy)
			{
				this.ObjectsDataSet = gOLoginHistorySource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(gOLoginHistorySource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as GOLoginHistoryDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._id == this._id;
        }


        public override int GetHashCode()
        {		
			
			return _id.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {
		}

		#endregion
        
		#region Relation properties		
		
		public override void ClearLazyLoadFlags()
		{
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return false;
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.Int32 PrimaryKey
		{
			get { return Id; }
		}

		public virtual void SetPrimaryKeyValue(System.Int32 valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetIdValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetIdValue(System.Int32 valueToSet)
		{
			SetIdValue(valueToSet, true, true);
		}

		public virtual void SetIdValue(System.Int32 valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_id != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_id = valueToSet;

				OnPropertyChanged("Id", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Id property of the GOLoginHistory DataObject</summary>
        public virtual System.Int32 Id 
		{
			get	{ return _id;}
			
			
			set
			{
				SetIdValue(value);
			}
		}		
			
			
		public virtual void SetInfoValue(System.String valueToSet)
		{
			SetInfoValue(valueToSet, true, true);
		}

		public virtual void SetInfoValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_info != valueToSet)
			{
				_info = valueToSet;

				OnPropertyChanged("Info", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Info property of the GOLoginHistory DataObject</summary>
        public virtual System.String Info 
		{
			get	{ return _info; }
			
			
			set
			{
				SetInfoValue(value);
			}
		}		
			
			
		public virtual void SetResultValue(System.Boolean valueToSet)
		{
			SetResultValue(valueToSet, true, true);
		}

		public virtual void SetResultValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_result != valueToSet)
			{
				_result = valueToSet;

				OnPropertyChanged("Result", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Result property of the GOLoginHistory DataObject</summary>
        public virtual System.Boolean Result 
		{
			get	{ return _result;}
			
			
			set
			{
				SetResultValue(value);
			}
		}		
			
			
		public virtual void SetTimestampValue(System.DateTime valueToSet)
		{
			SetTimestampValue(valueToSet, true, true);
		}

		public virtual void SetTimestampValue(System.DateTime valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (valueToSet == null || valueToSet == DateTime.MinValue) 
			{
				if (_timestamp != DateTime.MinValue.ToUniversalTime())
				{
					_timestamp = DateTime.MinValue.ToUniversalTime();
					OnPropertyChanged("Timestamp", notifyChanges, dirtyHandlerOn);
				}	
			}
			else if (valueToSet == DateTime.MaxValue)
			{
				if (_timestamp != DateTime.MaxValue.ToUniversalTime())
				{
					_timestamp = DateTime.MaxValue.ToUniversalTime();
					OnPropertyChanged("Timestamp", notifyChanges, dirtyHandlerOn);
				}
			} 
			else if (_timestamp != valueToSet ||
                (_timestamp != null && ((DateTime)_timestamp).Kind == DateTimeKind.Unspecified))
			{
				_timestamp = DateTime.SpecifyKind(valueToSet, DateTimeKind.Local);
				OnPropertyChanged("Timestamp", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Timestamp property of the GOLoginHistory DataObject</summary>
        public virtual System.DateTime Timestamp 
		{
			get	{ return _timestamp;}
			
			
			set
			{
				SetTimestampValue(value);
			}
		}		
			
			
		public virtual void SetUserValue(System.String valueToSet)
		{
			SetUserValue(valueToSet, true, true);
		}

		public virtual void SetUserValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_user != valueToSet)
			{
				_user = valueToSet;

				OnPropertyChanged("User", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The User property of the GOLoginHistory DataObject</summary>
        public virtual System.String User 
		{
			get	{ return _user; }
			
			
			set
			{
				SetUserValue(value);
			}
		}		
		#endregion
		
		#region Business rules implementation

		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new GOLoginHistoryDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is GOLoginHistoryDataObject))
				return false;

			var p = (GOLoginHistoryDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.Id == p.Id;
			fieldsComparison &= this.Info == p.Info;
			fieldsComparison &= this.User == p.User;
			fieldsComparison &= this.Timestamp == p.Timestamp;
			fieldsComparison &= this.Result == p.Result;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Id}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Id = (System.Int32)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
			// Timestamp is a local datetime: Convert to UTC for server-side handling and storing
			if (this._timestamp_WithTimezoneOffset != null)
			{
				this.Timestamp = ((DateTimeOffset)this._timestamp_WithTimezoneOffset).UtcDateTime;
			}
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class GOLoginHistoryCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.Int32> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public GOLoginHistoryCollectionContainer()
		{
		}
		
        public GOLoginHistoryCollectionContainer(DataObjectCollection<GOLoginHistoryDataObject> gOLoginHistoryItems)
        {
			Construct(gOLoginHistoryItems);
		}

		public void Construct(DataObjectCollection<GOLoginHistoryDataObject> gOLoginHistoryItems)
        {
            if (gOLoginHistoryItems == null)
                return;
				
			this.PrimaryKeys = gOLoginHistoryItems.Select(c => c.PrimaryKey).ToList();
            if (gOLoginHistoryItems.ObjectsDataSet == null)
            {
                gOLoginHistoryItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = gOLoginHistoryItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = gOLoginHistoryItems.ObjectsDataSet;
		}

		public DataObjectCollection<GOLoginHistoryDataObject> ExtractGOLoginHistoryItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<GOLoginHistoryDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<GOLoginHistoryDataObject>(typeof(GOLoginHistoryDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class GOLoginHistoryContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.Int32 PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public GOLoginHistoryContainer() 
		{
		}

        public GOLoginHistoryContainer(GOLoginHistoryDataObject gOLoginHistory) 
		{
			Construct(gOLoginHistory, false);
		}

        public GOLoginHistoryContainer(GOLoginHistoryDataObject gOLoginHistory, bool includeDirtyObjectsOnly) 
		{
			Construct(gOLoginHistory, includeDirtyObjectsOnly);
		}

		public virtual void Construct(GOLoginHistoryDataObject gOLoginHistory, bool includeDirtyObjectsOnly)
		{
            if (gOLoginHistory == null)
                return;

			this.PrimaryKey = gOLoginHistory.PrimaryKey;
			
            if (gOLoginHistory.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(gOLoginHistory);
            }

			if(gOLoginHistory.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity GOLoginHistory", "Unable to set a dataset to the entity. Container may not be initialized", "GOLoginHistoryDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : GOLoginHistory");
			}

			if(gOLoginHistory.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in GOLoginHistoryDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "GOLoginHistoryDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in GOLoginHistoryDataObject");
			}
			this.InternalObjectId = (int) gOLoginHistory.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? gOLoginHistory.ObjectsDataSet.CloneDirtyObjects() : gOLoginHistory.ObjectsDataSet;
		}
		
		public GOLoginHistoryDataObject ExtractGOLoginHistory()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<GOLoginHistoryDataObject>(typeof(GOLoginHistoryDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}