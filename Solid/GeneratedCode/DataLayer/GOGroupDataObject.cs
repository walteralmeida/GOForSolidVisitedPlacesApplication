////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Newtonsoft.Json;
using System.Xml.Serialization;
using System.Collections.Specialized;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Collections.Concurrent;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;
 
 
using Parameters = System.Collections.Generic.Dictionary<string, object>;


namespace Solid.Data.DataObjects
{
	/// <summary>
	/// DataObject class for the entity 'GOGroup'.
	/// </summary>
    [JsonObject(MemberSerialization.OptIn)]
	public partial class GOGroupDataObject : DataObject
	{
		#region Fields

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();
		public virtual Parameters CurrentTransactionParameters => ApplicationSettings.Container.Resolve<IDataProviderTransaction>().Parameters;
 
		[JsonProperty ("Description")]
		protected System.String _description;
		[JsonProperty ("DisplayName")]
		protected System.String _displayName;
		[JsonProperty ("IsSpecialGroup")]
		protected System.Boolean _isSpecialGroup;
		[JsonProperty ("Name")]
		protected System.String _name;
		[JsonProperty ("SpecialGroup")]
		protected GOSpecialGroupsEnum _specialGroup;
	
	
		// fields to store relation Ids when relating to new objects (with no PK set yet)


		#endregion
		
		#region initialization
		
		/// <summary>
		/// Default Constructor
		/// </summary>
		public GOGroupDataObject() : base ()		
		{
			SetIsSpecialGroupValue(false, false, false);
			UpdateDisplayNameValue();		
			UpdateDescriptionValue();		
			UpdateNameValue();		
		}

		/// <summary>
		/// Main Constructor
		/// </summary>
		public GOGroupDataObject(System.String name)
			: base()
		{
			this._name = name;
			SetIsSpecialGroupValue(false, false, false);
			UpdateDisplayNameValue();		
			UpdateDescriptionValue();		
			UpdateNameValue();		
		}

		/// <summary>
		/// Copy Constructor
		/// </summary>
		public GOGroupDataObject(GOGroupDataObject template, bool deepCopy)
		{
			this.SetDescriptionValue(template.Description, false, false);
			this.SetDisplayNameValue(template.DisplayName, false, false);
			this.SetIsSpecialGroupValue(template.IsSpecialGroup, false, false);
			this.SetNameValue(template.Name, false, false);
			this.SetSpecialGroupValue(template.SpecialGroup, false, false);
 
 
 
			this.SetIsNewValue(template.IsNew, false, false);

			if (deepCopy)
			{

				this.ObjectsDataSet = template.ObjectsDataSet.Clone();
				// Remove the template object from the dataset
                this.ObjectsDataSet.RemoveObject(template);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}
		
			UpdateDisplayNameValue();		
			UpdateDescriptionValue();		
			UpdateNameValue();		
			this.SetIsDirtyValue(template.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(template.IsMarkedForDeletion, false, false);
		}

		public virtual GOGroupDataObject Copy()
		{
			return Copy(true);
		}
		
		public virtual GOGroupDataObject Copy(bool deepCopy)
		{
			return new GOGroupDataObject(this, deepCopy);
		}
		
		public override void CopyValuesFrom(IDataObject sourceObject, bool deepCopy)
        {
			var gOGroupSource = sourceObject as GOGroupDataObject;

			if (ReferenceEquals(null, gOGroupSource))
				throw new PulpException("Wrong type of object");

			this.SetIsNewValue(sourceObject.IsNew, false, false);						
			this.SetDescriptionValue(gOGroupSource.Description, false, false);
			this.SetDisplayNameValue(gOGroupSource.DisplayName, false, false);
			this.SetIsSpecialGroupValue(gOGroupSource.IsSpecialGroup, false, false);
			this.SetNameValue(gOGroupSource.Name, false, false);
			this.SetSpecialGroupValue(gOGroupSource.SpecialGroup, false, false);


			if (deepCopy)
			{
				this.ObjectsDataSet = gOGroupSource.ObjectsDataSet.Clone();
				// Remove the source object from the dataset
                this.ObjectsDataSet.RemoveObject(gOGroupSource);
				// And Replace by the one we're currently constructing
                this.ObjectsDataSet.AddObject(this);
			}

			this.SetIsDirtyValue(sourceObject.IsDirty, false, false);
			this.SetIsMarkedForDeletionValue(sourceObject.IsMarkedForDeletion, false, false);
		}

        public override bool Equals(System.Object obj)
        {
            var p = obj as GOGroupDataObject;
            
			if (p == null)
            {
                return false;
            }

			if (p.IsNew) 
				return base.Equals(obj);
				
            // Return true if the identifying fields match:
			return  p._name == this._name;
        }


        public override int GetHashCode()
        {		
			
			return _name == null ? -1 : _name.GetHashCode();
		}

		public override void UpdateRelatedInternalIds(ConcurrentDictionary<int, int> datasetMergingInternalIdMapping)
        {


		}

		#endregion
        
		#region Relation properties		
		

		public virtual DataObjectCollection<GOGroupRoleDataObject> LoadGroupRoleItems(bool skipSecurity = false)
		{
			return LoadGroupRoleItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOGroupRoleDataObject> LoadGroupRoleItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__groupRoleItemsAlreadyLazyLoaded)
            {
				__groupRoleItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GOGroupName == @0";
                var filterArguments = new object[] { (System.String)this.Name };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOGroupRoleDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetGroupRoleItems(false);
		}
		
		private bool __groupRoleItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOGroupRoleDataObject> GroupRoleItems 
		{
			get
			{			
				return GetGroupRoleItems(true);
			}
		}
		
		public virtual bool ShouldSerializeGroupRoleItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOGroupDataObject") && ObjectsDataSet.RelationsToInclude["GOGroupDataObject"].Contains("GroupRoleItems");
		}

		public virtual DataObjectCollection<GOGroupRoleDataObject> GetGroupRoleItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__groupRoleItemsAlreadyLazyLoaded)
			{
				LoadGroupRoleItems();
			}
			var groupRoleItems = ObjectsDataSet.GetRelatedObjects<GOGroupRoleDataObject>(this, "GroupRoleItems");							
			groupRoleItems.CollectionChanged += new NotifyCollectionChangedEventHandler(GroupRoleItems_CollectionChanged);
				
			return groupRoleItems;
		}

        private void GroupRoleItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOGroupRoleDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOGroupRole", "GOGroupDataObject.GroupRoleItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GOGroupDataObject throw an exception while trying to add GOGroupRoleDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._group_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GOGroupName = this.Name;
						}
 
						if (relatedObj.IsNew && relatedObj.GOGroupName == default(System.String))
							relatedObj.GOGroupName = this.Name;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOGroupRoleDataObject).Group = null;
                    // }
                    break;
            }            
        }


		public virtual DataObjectCollection<GOUserGroupDataObject> LoadUserGroupItems(bool skipSecurity = false)
		{
			return LoadUserGroupItems(CurrentTransactionParameters ?? new Parameters(), skipSecurity);
		}

		public virtual DataObjectCollection<GOUserGroupDataObject> LoadUserGroupItems(Parameters parameters, bool skipSecurity = false)
		{
			// load the collection if not yet loaded
            if (!__userGroupItemsAlreadyLazyLoaded)
            {
				__userGroupItemsAlreadyLazyLoaded = true;
                var filterPredicate = "GOGroupName == @0";
                var filterArguments = new object[] { (System.String)this.Name };
				var result = ApplicationSettings.Container.Resolve<IDataProvider<GOUserGroupDataObject>>().GetCollection(null, filterPredicate, filterArguments, parameters : parameters, skipSecurity: skipSecurity);
                // Reference Links are not serialized => should reconstruct them now
                if (result != null && result.ObjectsDataSet != null) 
                { 
                    Merge(result.ObjectsDataSet);
                }
            }

			return GetUserGroupItems(false);
		}
		
		private bool __userGroupItemsAlreadyLazyLoaded = false;
		[JsonProperty]
		public virtual DataObjectCollection<GOUserGroupDataObject> UserGroupItems 
		{
			get
			{			
				return GetUserGroupItems(true);
			}
		}
		
		public virtual bool ShouldSerializeUserGroupItems()
		{
			return ObjectsDataSet != null && ObjectsDataSet.RelationsToInclude != null && ObjectsDataSet.RelationsToInclude.ContainsKey("GOGroupDataObject") && ObjectsDataSet.RelationsToInclude["GOGroupDataObject"].Contains("UserGroupItems");
		}

		public virtual DataObjectCollection<GOUserGroupDataObject> GetUserGroupItems(bool allowLazyLoading)
		{
			if (ObjectsDataSet == null)
				return null;

			// Lazy loading enabled and collection not yet loaded => load the collection
			if (allowLazyLoading && LazyLoadingEnabled && !__userGroupItemsAlreadyLazyLoaded)
			{
				LoadUserGroupItems();
			}
			var userGroupItems = ObjectsDataSet.GetRelatedObjects<GOUserGroupDataObject>(this, "UserGroupItems");							
			userGroupItems.CollectionChanged += new NotifyCollectionChangedEventHandler(UserGroupItems_CollectionChanged);
				
			return userGroupItems;
		}

        private void UserGroupItems_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    foreach (var item in e.NewItems)
                    {
						var relatedObj = item as GOUserGroupDataObject;
						if (relatedObj == null)
						{
							_logEngine.LogError("Add Event throw an Exception", "Unable to get value of expected related Object : GOUserGroup", "GOGroupDataObject.UserGroupItems_CollectionChanged", null);
							throw new PulpException("Unexpected Error : The Add Event of GOGroupDataObject throw an exception while trying to add GOUserGroupDataObject : NullReference occured");
						}

						if (this.IsNew)
						{
							relatedObj._group_NewObjectId = this.InternalObjectId;
						}
						else
						{
							relatedObj.GOGroupName = this.Name;
						}
 
						if (relatedObj.IsNew && relatedObj.GOGroupName == default(System.String))
							relatedObj.GOGroupName = this.Name;
                    }
                    break;
                case NotifyCollectionChangedAction.Remove:
                    // foreach (var item in e.OldItems)
                    // {
                        //(item as GOUserGroupDataObject).Group = null;
                    // }
                    break;
            }            
        }

		public override void ClearLazyLoadFlags()
		{
			__groupRoleItemsAlreadyLazyLoaded = false;
			__userGroupItemsAlreadyLazyLoaded = false;
		}

		public override IEnumerable<IDataObject> GetAllRelatedReferencedObjects()
		{
			var result = new List<IDataObject>();
			return result;
		}
		
		public override IEnumerable<IDataObject> GetAllRelatedReferencingObjects()
		{
			var result = new List<IDataObject>();
			if (LoadGroupRoleItems() != null)
				result.AddRange(GroupRoleItems);
			if (LoadUserGroupItems() != null)
				result.AddRange(UserGroupItems);
			return result;
		}

		public override bool HasUpstreamReferenceTo(IDataObject other)
		{
			if (other == null)
				return false;

			return false;
		}

		#endregion

		#region Commands for Custom fields


		#endregion

		#region Properties
		
		public virtual System.String PrimaryKey
		{
			get { return Name; }
		}

		public virtual void SetPrimaryKeyValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			SetNameValue(valueToSet, notifyChanges, dirtyHandlerOn);
		}
	
			
			
		public virtual void SetDescriptionValue(System.String valueToSet)
		{
			SetDescriptionValue(valueToSet, true, true);
		}

		public virtual void SetDescriptionValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_description != valueToSet)
			{
				_description = valueToSet;

				OnPropertyChanged("Description", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Description property of the GOGroup DataObject</summary>
        public virtual System.String Description 
		{
			get	{ return String.IsNullOrEmpty(_description) ? null : _description; }
			
			
			set
			{
				SetDescriptionValue(value);
			}
		}		
			
			
		public virtual void SetDisplayNameValue(System.String valueToSet)
		{
			SetDisplayNameValue(valueToSet, true, true);
		}

		public virtual void SetDisplayNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_displayName != valueToSet)
			{
				_displayName = valueToSet;

				OnPropertyChanged("DisplayName", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Display name property of the GOGroup DataObject</summary>
        public virtual System.String DisplayName 
		{
			get	{ return _displayName; }
			
			
			set
			{
				SetDisplayNameValue(value);
			}
		}		
			
			
		public virtual void SetIsSpecialGroupValue(System.Boolean valueToSet)
		{
			SetIsSpecialGroupValue(valueToSet, true, true);
		}

		public virtual void SetIsSpecialGroupValue(System.Boolean valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_isSpecialGroup != valueToSet)
			{
				_isSpecialGroup = valueToSet;

				OnPropertyChanged("IsSpecialGroup", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Is Special Group property of the GOGroup DataObject</summary>
        public virtual System.Boolean IsSpecialGroup 
		{
			get	{ return _isSpecialGroup;}
			
			
			set
			{
				SetIsSpecialGroupValue(value);
			}
		}		
			
			
		public virtual void SetNameValue(System.String valueToSet)
		{
			SetNameValue(valueToSet, true, true);
		}

		public virtual void SetNameValue(System.String valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_name != valueToSet)
			{
              if (this.ObjectsDataSet != null && !this.IsNew)
                {
                    throw new PulpException("PK field of an existing object is being changed");
                }
				_name = valueToSet;

				OnPropertyChanged("Name", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("PrimaryKey", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Name property of the GOGroup DataObject</summary>
        public virtual System.String Name 
		{
			get	{ return _name; }
			
			
			set
			{
				SetNameValue(value);
			}
		}		
			
			
		public virtual void SetSpecialGroupValue(GOSpecialGroupsEnum valueToSet)
		{
			SetSpecialGroupValue(valueToSet, true, true);
		}

		public virtual void SetSpecialGroupValue(GOSpecialGroupsEnum valueToSet, bool notifyChanges, bool dirtyHandlerOn)
		{
			if (_specialGroup != valueToSet)
			{
				_specialGroup = valueToSet;

				OnPropertyChanged("SpecialGroup", notifyChanges, dirtyHandlerOn);
				OnPropertyChanged("SpecialGroupDisplayString", notifyChanges, dirtyHandlerOn);
			}
		}
		
		/// <summary> The Special Group property of the GOGroup DataObject</summary>
        public virtual GOSpecialGroupsEnum SpecialGroup 
		{
			get	{ return _specialGroup;}
			
			
			set
			{
				SetSpecialGroupValue(value);
			}
		}		
      public virtual string SpecialGroupDisplayString
		{
			get
			{
				return SpecialGroupEnumDisplayNameCollection.Where(v => v.Value == SpecialGroup).Single().DisplayString;            
			}
		}

	    public virtual List<EnumDisplayString<GOSpecialGroupsEnum>> SpecialGroupEnumDisplayNameCollection
	    {
	        get
	        {
                return GOSpecialGroupsEnumDisplayNames.Items;
	        }
	    }
		
		#endregion
		
		#region Business rules implementation

		protected virtual void UpdateDisplayNameValue()
		{
			DisplayName = ((IsSpecialGroup == false) ? DisplayName : ((SpecialGroup == Solid.Data.DataObjects.GOSpecialGroupsEnum.AuthenticatedUsers) ? "Authenticated Users" : "Anonymous Users"));
		}
		
		protected virtual void UpdateDescriptionValue()
		{
			Description = ((IsSpecialGroup == false) ? (Description != null ? Description : "") : ((SpecialGroup == Solid.Data.DataObjects.GOSpecialGroupsEnum.AuthenticatedUsers) ? "Represents all authenticated users" : "Represents all anonymous users"));
		}
		
		protected virtual void UpdateNameValue()
		{
			Name = ((IsSpecialGroup == false) ? Name : ((SpecialGroup == Solid.Data.DataObjects.GOSpecialGroupsEnum.AuthenticatedUsers) ? "Authenticated Users" : "Anonymous Users"));
		}
		
		
		protected override void OnPropertyChanged(string propertyName, bool notifyChanges, bool dirtyHandlerOn, SeenObjectCollection callers)
        {
            // This is to avoid infinite loops: in case a caller receives back a property changed notification it has initially sent
            if (callers.GetSeenObject(this) != null)
                return;

            base.OnPropertyChanged(propertyName, notifyChanges, dirtyHandlerOn, callers);
			
            if (!notifyChanges)
                return;

			
			// Push the notification to related objects
			if (GetGroupRoleItems(false) != null)
            {
                foreach (var item in GetGroupRoleItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Group.", propertyName), callers);                    
                }
            }

			if (GetUserGroupItems(false) != null)
            {
                foreach (var item in GetUserGroupItems(false))
                {
                    item.NotifyPropertyChanged(String.Concat("Group.", propertyName), callers);                    
                }
            }

        }		

		#endregion
								
        #region Implementation of IDataObject

	    public override IDataObject Clone()
	    {
	        return Clone(true);
	    }
		
		public override IDataObject Clone(bool recursive)
	    {
	        return new GOGroupDataObject(this, recursive);
	    }


		public override bool Compare(IDataObject obj)
		{
			if(!(obj is GOGroupDataObject))
				return false;

			var p = (GOGroupDataObject) obj;
			var fieldsComparison = true;
			fieldsComparison &= this.DisplayName == p.DisplayName;
			fieldsComparison &= this.Name == p.Name;
			fieldsComparison &= this.Description == p.Description;
			fieldsComparison &= this.IsSpecialGroup == p.IsSpecialGroup;
			fieldsComparison &= this.SpecialGroup == p.SpecialGroup;
			return fieldsComparison;
		}

		
		#endregion

        public override void AttachEventHandlers()
        {
        }

		public override string PrimaryKeyString
		{
			get
			{
				return $"{Name}";
			}
		}

		// Intended for use only by DataProvider to sync database generated PK to this instance
		public override void AssignPrimaryKey(object pk) 
		{
			this.Name = (System.String)pk;
		}

		public override void OnDeserialized(bool dataset = true)
		{
			OnDataObjectDeserialized();

			if (dataset)
			{
				if (this.ObjectsDataSet != null)
				{
					foreach (var obj in this.ObjectsDataSet.GetAllObjects().OfType<DataObject>().Where(o => o != this))
					{
						obj.OnDeserialized(dataset: false);
					}
				}
			}
		}

		private void OnDataObjectDeserialized()
		{	
        }
	}

	[JsonObject(MemberSerialization.OptIn)]
	public class GOGroupCollectionContainer
	{
		[JsonProperty]
		public List<int> InternalObjectIds { get; set; }


		[JsonProperty]
		public List<System.String> PrimaryKeys { get; set; }
	
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }

		public GOGroupCollectionContainer()
		{
		}
		
        public GOGroupCollectionContainer(DataObjectCollection<GOGroupDataObject> gOGroupItems)
        {
			Construct(gOGroupItems);
		}

		public void Construct(DataObjectCollection<GOGroupDataObject> gOGroupItems)
        {
            if (gOGroupItems == null)
                return;
				
			this.PrimaryKeys = gOGroupItems.Select(c => c.PrimaryKey).ToList();
            if (gOGroupItems.ObjectsDataSet == null)
            {
                gOGroupItems.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            }
	
			this.InternalObjectIds = gOGroupItems.Select(c => c.InternalObjectId).Cast<int>().ToList();
            this.ObjectsDataSet = gOGroupItems.ObjectsDataSet;
		}

		public DataObjectCollection<GOGroupDataObject> ExtractGOGroupItems()
        {
			if (InternalObjectIds == null)
				return null;

            var result = new DataObjectCollection<GOGroupDataObject> {ObjectsDataSet = this.ObjectsDataSet };

			result.ObjectsDataSet.DirtyHandlerOn = false;
			result.ObjectsDataSet.NotifyChanges = false;


			foreach (var internalObjectId in InternalObjectIds)
            {
                var item = this.ObjectsDataSet.GetObject<GOGroupDataObject>(typeof(GOGroupDataObject), internalObjectId);
                result.Add(item);
            }

			result.ObjectsDataSet.DirtyHandlerOn = true;
			result.ObjectsDataSet.NotifyChanges = true;
		
            return result;
        }
	}

	// Container classes
	
	[JsonObject(MemberSerialization.OptIn)]
	public class GOGroupContainer 
	{

		private ILogEngine _logEngine = ApplicationSettings.Container.Resolve<ILogEngine>();

		[JsonProperty]
		public int InternalObjectId { get; set; }

		[JsonProperty]
		public System.String PrimaryKey { get; set; }
		[JsonProperty]
		public IObjectsDataSet ObjectsDataSet { get; set; }
        public GOGroupContainer() 
		{
		}

        public GOGroupContainer(GOGroupDataObject gOGroup) 
		{
			Construct(gOGroup, false);
		}

        public GOGroupContainer(GOGroupDataObject gOGroup, bool includeDirtyObjectsOnly) 
		{
			Construct(gOGroup, includeDirtyObjectsOnly);
		}

		public virtual void Construct(GOGroupDataObject gOGroup, bool includeDirtyObjectsOnly)
		{
            if (gOGroup == null)
                return;

			this.PrimaryKey = gOGroup.PrimaryKey;
			
            if (gOGroup.ObjectsDataSet == null)
            {
                var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
                dataset.AddObject(gOGroup);
            }

			if(gOGroup.ObjectsDataSet == null)
			{
				_logEngine.LogError("Unable to set a dataset to the Entity GOGroup", "Unable to set a dataset to the entity. Container may not be initialized", "GOGroupDataObject", null);
				throw new PulpException("Unexpected Error : Unable to set a dataset to the entity : GOGroup");
			}

			if(gOGroup.InternalObjectId == null)
			{
				_logEngine.LogError("Unable to construct an object without InternalObjectId in GOGroupDataObject", "The Object you are trying to construct doesn't have an InternalObjectId", "GOGroupDataObject", null);
				throw new PulpException("Unexpected Error : Unable to construct an object without InternalObjectId in GOGroupDataObject");
			}
			this.InternalObjectId = (int) gOGroup.InternalObjectId;
			this.ObjectsDataSet = includeDirtyObjectsOnly ? gOGroup.ObjectsDataSet.CloneDirtyObjects() : gOGroup.ObjectsDataSet;
		}
		
		public GOGroupDataObject ExtractGOGroup()
        {
            if (InternalObjectId == 0)
                return null;

            var result = this.ObjectsDataSet.GetObject<GOGroupDataObject>(typeof(GOGroupDataObject), InternalObjectId);
            if (result != null)
				result.ObjectsDataSet = this.ObjectsDataSet;
            return result;
        }	
	}
}