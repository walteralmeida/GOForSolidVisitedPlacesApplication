////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer.Http;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer.Extensions;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Storage.Common;
using Parameters = System.Collections.Generic.Dictionary<string, object>;

using Unity;
using Unity.Attributes;
using Newtonsoft.Json;
using System;
using System.Linq;
using System.Collections.Generic;
using System.IO.Compression;
using System.Net;
using System.Text;
using System.Web;
using System.Configuration;
using NLog;
using Solid.Data.DataObjects.Factories;
using Solid.Data.DataObjects;
using Solid.Data.DeleteHandlers;


namespace Solid.ServiceLayer.WebHandlers
{
    public class EntityApiHandler<TENTITY> : IEntityApiHandler<TENTITY> where TENTITY : class, IDataObject
    {
	    private static readonly Logger techLogger = LogManager.GetCurrentClassLogger();
        [Dependency]
		public IDataProvider<TENTITY> DataProvider { get; set; }

        [Dependency]
        public IDataObjectFactory<TENTITY> DataObjectFactory { get; set; }

		[Dependency]
        public IEntityApiExtensionProvider<TENTITY> Extensions { get; set; }
        
		public void DoProcessRequest(ApiRequest request)
        {
            HttpContext context = request.HttpContext;
			context.Response.ContentType = "application/json";
            context.Response.ContentEncoding = Encoding.UTF8;

			Exception error = null;

			try
            {
				// Initialise and hook up extensions
                Extensions.Init();

                // Notify 'request begins' to extensions
                Extensions.OnRequestAction(new ApiExtensionResponseData { action = context.Request.HttpMethod, context = "BEGIN", data = null });
			  
                switch (context.Request.HttpMethod)
                {
                    case "GET":
                        ProcessGet(request);
                        break;
                    case "POST":
                    case "PUT":
                        ProcessPost(request);
                        break;
                    case "DELETE":
                        ProcessDelete(request);
                        break;
                    default:
                        // Unsupported HTTP request method. Ignore quietly.
                        break;
                }

				 // Notify 'request ends' to extensions
                Extensions.OnRequestAction(new ApiExtensionResponseData { action = context.Request.HttpMethod, context = "COMPLETE", data = null });
			}
            catch (Exception exception)
            {
				error = exception;

				// Notify error to extensions
				Extensions.OnRequestAction(	new ApiExtensionResponseData
											{
												action = "EXCEPTION",
												context = exception.GetType().Name,
                                                data = exception.ToString(),
												error = true
											});

				// If not a GOServerException but the inner exception is a GOServerException, throw the GOServerException with its user-friendlier message instead of the raw outer exception
				if (!(exception is GOServerException) 
					&& exception.InnerException != null 
					&& exception.InnerException is GOServerException)
				{
					throw exception.InnerException;
				}

				throw;
            }
			finally
			{
				// Check no transaction left running
				DatabaseTransaction.AbortAnyOngoingTransaction(error);
			}
        }

		private void ProcessGet(ApiRequest request)
        {
			if (request.IsListing)
            {
                ProcessGetList(request);
            }
            else if (request.IsCount)
            {
                ProcessGetCount(request);
            }
            else if (request.IsById)
            {
                ProcessGetById(request);
            }
            else if (request.IsFile)
            {
                ProcessGetFile(request);
            }
        }

		private void ProcessGetList(ApiRequest request)
        {
			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LIST", context = "BEFORE_LIST", data = null });
			
			HttpContext context = request.HttpContext;

			// Enable GZip Compression if client support it
			AddGZipCompression(context, request.AcceptGZip);
           
			var result = GetCollection(request.IncludeList, request.Filter, request.FilterParameters, request.PageNumber, request.PageSize, request.SortOrder, request.SortColumn);
			result.ObjectsDataSet.SerializeTechnicalProperties = false;

			if (!request.IsDatasetApi)
				result.ObjectsDataSet.InitializeRelationsToInclude(typeof(TENTITY), request.Includes);

			object dataToSerialize = request.IsDatasetApi ? DataObjectFactory.CreateDataSetContainer(result) : result;
			var json = JsonConvert.SerializeObject(dataToSerialize, GetJsonSerializerSettings(request));

			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LIST", context = "JSON", data = json });

			WriteResponse(context, json);
		}

		private void ProcessGetCount(ApiRequest request)
        {
			// Notify extensions
			Extensions.OnRequestAction(new ApiExtensionResponseData { action = "COUNT", context = "BEFORE_COUNT", data = null });
			
			HttpContext context = request.HttpContext;
			var result = Count(request.Filter, request.FilterParameters);
			WriteResponse(context, result.ToString());
		}

		private void ProcessGetById(ApiRequest request)
        {
			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "BYID", context = "BEFORE_BYID", data = null });
			
			var pks = request.QueryParts.Skip(2).Select(pk => HttpUtilities.UrlDecode(pk));
            var dataObject = DataObjectFactory.CreateDataObject(pks);
            var result = DataProvider.Get(dataObject, null, request.IncludeList);
			
	        if (result == null)
	        {
		        techLogger.Error("Can't get Entity by Id. DataObject:{0} pk:{1}: url:{2}", DataObjectFactory.GetType().Name, pks.SingleOrDefault() ,request.HttpContext.Request.Url);
		        throw new ResourceNotFoundException();
	        }

			if (result.ObjectsDataSet == null)
			{
				result.ObjectsDataSet = ApplicationSettings.Resolve<IObjectsDataSet>();
				result.ObjectsDataSet.AddObject(result);
			}

			result.ObjectsDataSet.SerializeTechnicalProperties = false;

			if (!request.IsDatasetApi)
				result.ObjectsDataSet.InitializeRelationsToInclude(typeof(TENTITY), request.Includes);

			object dataToSerialize = request.IsDatasetApi ? DataObjectFactory.CreateDataSetContainer(result) : result;

			var json = JsonConvert.SerializeObject(dataToSerialize, GetJsonSerializerSettings(request));

			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "BYID", context = "JSON", data = json });

			WriteResponse(request.HttpContext, json);
		}

		private void ProcessGetFile(ApiRequest request)
        {
			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "GETFILE", context = "BEFORE_GETFILE", data = null });
			
			//Get the file owning entity, pk starts at position 2, ends one before end (next item being the document field name						
			var result = DataProvider.Get(
				DataObjectFactory.CreateDataObject(
					request.QueryParts.Skip(2)
						.Take(request.QueryParts.Length - 3)
						.Select(pk => HttpUtilities.UrlDecode(pk))
				),
				parameters: new Parameters { { "GetFileContext", true } }
			);

            if (result == null)
				throw new ResourceNotFoundException();

			//Get document internal and client name
			var documentInternalNameField = request.QueryParts.Last() + "InternalName";
			var documentClientNameField = request.QueryParts.Last();
            var documentInternalNameProperty = result.GetType().GetProperty(documentInternalNameField);

            if (documentInternalNameProperty == null)
                throw new GOServerException("Unknown property " + documentInternalNameField);

            var documentInternalNameAsObject = documentInternalNameProperty.GetValue(result, null);
            			
            if (!(documentInternalNameAsObject is String))
                throw new GOServerException(String.Format("Unproper datatype for property {0}", documentInternalNameField));

            var documentClientNameFieldProperty = result.GetType().GetProperty(documentClientNameField);

            if (documentClientNameFieldProperty == null)
                throw new GOServerException("Unknown property " + documentClientNameField);

            var documentClientNameAsObject = documentClientNameFieldProperty.GetValue(result, null);

            if (!(documentClientNameAsObject is String))
                throw new GOServerException(String.Format("Unproper datatype for property {0}", documentClientNameField));

            string documentInternalName = (string)documentInternalNameAsObject;
            string documentClientName = (string)documentClientNameAsObject;

            string storageContainer = String.IsNullOrEmpty(ConfigurationManager.AppSettings["StorageContainer"]) ? "files" : ConfigurationManager.AppSettings["StorageContainer"];
            string fileUrl = request.HttpContext.Request.Url.Scheme + "://" + request.HttpContext.Request.Url.Authority.TrimEnd('/') + request.HttpContext.Request.ApplicationPath + "/" + storageContainer + "/" + documentInternalName;

            // read the file and stream it to caller
            using (var fileStream = ApplicationSettings.Container.Resolve<IStorageProvider>().GetFileStream(fileUrl, System.IO.FileMode.Open))
            {
                request.HttpContext.Response.ContentType = System.Web.MimeMapping.GetMimeMapping(documentInternalName);
                request.HttpContext.Response.AddHeader("Content-Disposition", $"inline; filename=\"{documentClientName}\"");
                fileStream.CopyTo(request.HttpContext.Response.OutputStream);
            }
		}

		private void ProcessPost(ApiRequest request)
		{
			TENTITY objectToSave = null;

			JsonSerializerSettings settings = GetJsonSerializerSettings(request);

			string jsonIncomingEntity = request.JsonEntityData;

			if (request.IsDatasetApi)
			{
				objectToSave = DataObjectFactory.DeserializeFromContainer(jsonIncomingEntity, settings);

				// Case where trying to save existing object, not dirty => either:
				// (a) only PK is passed to the client, or 
				// (b) the main/primary entity is not present in the incoming dataset, in which case the deserialize call above will have created a new instance of the main/primary entity
				// In both cases we should retrieve the main/primary object from database, and combine the datasets
				if (objectToSave.IsNew == false && objectToSave.IsDirty == false)
				{
					var objectFromDatabase = DataProvider.Get(objectToSave);
					objectFromDatabase.ObjectsDataSet.AddOrReplaceObject(objectToSave);
					objectToSave = objectFromDatabase;
				}
			}
			else
			{
				objectToSave = DataObjectFactory.DeserializeObject(jsonIncomingEntity, settings);

				if (objectToSave != null)
				{
					var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
					dataset.AddObject(objectToSave);
					objectToSave.IsDirty = true; // Force Save
				}
			}

			if (objectToSave != null)
			{
				objectToSave.ObjectsDataSet.EnsureInitialized();
				objectToSave.ObjectsDataSet.ReconstructIndexes();
			}

			// Notify extensions
			Extensions.OnRequestAction(new ApiExtensionResponseData { action = objectToSave.IsNew ? "CREATE" : "UPDATE", context = "BEFORE SAVE", data = "" });

			string response = String.Empty;
			var result = DataProvider.Save(objectToSave, null, request.IncludeList);

			if (result == null)
			{
				if (!objectToSave.IsMarkedForDeletion)
					throw new ResourceNotFoundException();
				else
					response = null;
			}
			else
			{
				result.ObjectsDataSet.SerializeTechnicalProperties = false;

				if (!request.IsDatasetApi)
					result.ObjectsDataSet.InitializeRelationsToInclude(typeof(TENTITY), request.Includes);

				object dataToSerialize = request.IsDatasetApi ? DataObjectFactory.CreateDataSetContainer(result) : result;

				response = JsonConvert.SerializeObject(dataToSerialize, settings);
			}

			// Notify extensions
			Extensions.OnRequestAction(new ApiExtensionResponseData { action = objectToSave.IsNew ? "CREATE" : "UPDATE", context = "JSON WRITE", data = response });

			WriteResponse(request.HttpContext, response);
		}

		private void ProcessDelete(ApiRequest request)
        {
			// Notify extensions
            Extensions.OnRequestAction(new ApiExtensionResponseData { action = "DELETE", context = "BEFORE_DATA_DELETE", data = null });
	
			HttpContext context = request.HttpContext;

			TENTITY objectToDelete = null;

			// Does the request contain the entity PK(s)?
			if (request.QueryParts != null && request.QueryParts.Length > 1)
			{
				var pks = request.QueryParts.Skip(1).Select(pk => HttpUtilities.UrlDecode(pk));
				if (pks != null && pks.Any())
				{
					objectToDelete = DataObjectFactory.CreateDataObject(pks);
				}
			}

			// Does the request contain json encoded body? (e.g. when called via SDK)
			if (objectToDelete == null) 
			{
				JsonSerializerSettings settings = GetJsonSerializerSettings(request);
				string jsonIncomingEntity = request.JsonEntityData;

                if (jsonIncomingEntity == null)
					throw new GOServerException("objectToDeleteNotFound");

				if (request.IsDatasetApi)
				{
					objectToDelete = DataObjectFactory.DeserializeFromContainer(jsonIncomingEntity, settings);
				}
				else
				{
					objectToDelete = JsonConvert.DeserializeObject<TENTITY>(jsonIncomingEntity, settings);

					if (objectToDelete != null)
					{
						var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
						dataset.AddObject(objectToDelete);
					}
				}

				if (objectToDelete != null)
				{
					objectToDelete.ObjectsDataSet.EnsureInitialized();
					objectToDelete.ObjectsDataSet.ReconstructIndexes();
				}
			}
			
			context.Response.StatusCode = (int)HttpStatusCode.NoContent;

			if (objectToDelete != null)
			{
				// We fetch the instance from storage and then fetch the corresponding entity data provider for the type
				// This is so that for entity hierarchies we call Delete on the actual instance type
				var instance = DataProvider.Get(objectToDelete, skipSecurity: true);
				dynamic provider = ApplicationSettings.Container.Resolve<IEntityDataProvider>().GetDataProviderForEntity(instance);

				// If this is a 'dry' delete request (means we process the delete logic without actually deleting anything), then the response is the delete stack info
				if (DoDryDelete(request, instance, provider))
					context.Response.StatusCode = (int)HttpStatusCode.OK;
				else
					provider.Delete(instance);
			}
		}

		/// <summary>
		/// DoDryDelete()
		/// If dry=true query param supplied, so a dry-delete run
		/// </summary>
		private bool DoDryDelete(ApiRequest request, IDataObject instance, dynamic provider)
		{
			if (request.IsDryDelete)
			{
				// Start the delete dry run transaction
				var transaction = ApplicationSettings.Container.Resolve<IDataProviderTransaction>();
				transaction.Join("Delete.DryRun");

				// Do the delete as if a regular run, with 'dry' parameter
				try
				{
					transaction.Parameters.Add(ParameterKeys.DryDelete, true);
					provider.Delete(instance, parameters: transaction.Parameters);
				}
				catch
				{
					transaction.Abort();
					throw;
				}

				// If we get here, means the delete handlers have rippled successfully etc, and he entire delete stack is available in the transaction parameters
				var deleteStack = transaction.Parameters.ContainsKey(ParameterKeys.DeleteStack) ? transaction.Parameters[ParameterKeys.DeleteStack] as DeleteStack : null;

				// write json-encoded delete stack response
				// Ultimately we could encode this response as a tree, prettified list etc. For now it is just the raw response.
				if (deleteStack != null)
				{
					string json = JsonConvert.SerializeObject(deleteStack.Resolved, GetJsonSerializerSettings(request));
					request.HttpContext.Response.Write(json);
				}

				// Abort the transaction, which rolls back the delete (because we're a dry run handler)
				transaction.Abort();

				return true;
			}

			return false;
		}

        /// <summary>
        /// If the request indicate that it allow to server to send GZip data, add the proper header.
        /// </summary>
        private static void AddGZipCompression(HttpContext context, bool acceptGZip)
        {
            if (acceptGZip)
            {
                context.Response.Filter = new GZipStream(context.Response.Filter, CompressionMode.Compress);
                HttpContext.Current.Response.AppendHeader("Content-encoding", "gzip");
            }
        }

        private static void WriteResponse(HttpContext context, string jsonData)
        {
            // case jsonp
            if (context.Request["callback"] != null)
                context.Response.Write(String.Format("{0}({1});", context.Request["callback"], jsonData));
            else
                context.Response.Write(jsonData);
        }

        private DataObjectCollection<TENTITY> GetCollection(List<string> includes, string filter, string filterParameters, int pageNumber, int pageSize, string sortOrder, string sortColumn)
        {
			string orderBy = (String.IsNullOrEmpty(sortColumn) || sortColumn.ToLower() == "null")
				? (sortOrder?.Trim())
				: $"{sortColumn} {sortOrder}".Trim();

            try
            {
                if (filterParameters != null)
                {
                    var allparameters = filterParameters.Split('_');
                    foreach (var param in allparameters)
                        Convert.ToInt32(param);
                }
				
                return DataProvider.GetCollection(null, filter, filterParameters != null ? filterParameters.Split('_').Select(p => Convert.ToInt32(p)).Cast<object>().ToArray() : null, orderBy, pageNumber, pageSize, includes);
            }
            catch (Exception)
            {
                try
                {
                    if (filterParameters != null)
                    {
                        var allparameters = filterParameters.Split('_');
                        foreach (var param in allparameters)
                            Convert.ToDecimal(param);
                    }

                    return DataProvider.GetCollection(null, filter, filterParameters != null ? filterParameters.Split('_').Select(Convert.ToDecimal).Cast<object>().ToArray() : null, orderBy, pageNumber, pageSize, includes);
                }
                catch (Exception)
                {
                    try
                    {
                        if (filterParameters != null)
                        {
                            new Guid(filterParameters);
                        }
                        return DataProvider.GetCollection(null, filter, filterParameters != null ? filterParameters.Split('_').Select(p => new Guid(p)).Cast<object>().ToArray() : null, orderBy, pageNumber, pageSize, includes);
                    }
                    catch (Exception)
                    {
                        if (filter != null && filter.Contains("@1"))
                        {
                            return DataProvider.GetCollection(null, filter, filterParameters != null ? filterParameters.Split('_').ToArray<object>() : null, orderBy, pageNumber, pageSize, includes);
                        }
                        else
                        {
                            return DataProvider.GetCollection(null, filter, filterParameters != null ? new List<string> { filterParameters }.Cast<object>().ToArray() : null, orderBy, pageNumber, pageSize, includes);
                        }
                    }
                }
            }
        }

        private int Count(string filter, string filterParameters)
        {
            try
            {
                if (filterParameters != null)
                {
                    var allparameters = filterParameters.Split('_');
                    foreach (var param in allparameters)
                        Convert.ToInt32(param);
                }

                return DataProvider.Count(null, filter, filterParameters != null ? filterParameters.Split('_').Select(p => Convert.ToInt32(p)).Cast<object>().ToArray() : null);
            }
            catch (Exception)
            {
                try
                {
                    if (filterParameters != null)
                    {
                        var allparameters = filterParameters.Split('_');
                        foreach (var param in allparameters)
                            Convert.ToDecimal(param);
                    }

                    return DataProvider.Count(null, filter, filterParameters != null ? filterParameters.Split('_').Select(Convert.ToDecimal).Cast<object>().ToArray() : null);
                }
                catch (Exception)
                {
                    try
                    {
                        if (filterParameters != null)
                        {
                            new Guid(filterParameters);
                        }
                        return DataProvider.Count(null, filter, filterParameters != null ? filterParameters.Split('_').Select(p => new Guid(p)).Cast<object>().ToArray() : null);
                    }
                    catch (Exception)
                    {
                        if (filter != null && filter.Contains("@1"))
                        {
                            return DataProvider.Count(null, filter, filterParameters != null ? filterParameters.Split('_').ToArray<object>() : null);
                        }
                        else
                        {
                            return DataProvider.Count(null, filter, filterParameters != null ? new List<string> { filterParameters }.Cast<object>().ToArray() : null);
                        }
                    }
                }
            }
        }

		private JsonSerializerSettings GetJsonSerializerSettings(ApiRequest request)
		{
			JsonSerializerSettings settings;

			if (request.Includes == null || request.IsDatasetApi)
			{
				settings = new JsonSerializerSettings() { 
Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects") };
			}
			else
			{
				if (request.ByRef)
				{
					settings = new JsonSerializerSettings() { Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects"), PreserveReferencesHandling = PreserveReferencesHandling.Objects };
				}
				else
				{
					settings = new JsonSerializerSettings() { Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects"), PreserveReferencesHandling = PreserveReferencesHandling.None, ReferenceLoopHandling = ReferenceLoopHandling.Ignore };
				}
			}

			settings.TypeNameHandling = request.IsDatasetApi ? TypeNameHandling.Auto : TypeNameHandling.Objects;

			settings.DateFormatHandling = request.IsMicrosoftDateFormat ? DateFormatHandling.MicrosoftDateFormat : DateFormatHandling.IsoDateFormat;

			return settings;
		}
    }
} 