////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using Unity;
using Unity.Injection;
using Unity.Lifetime;
using GenerativeObjects.Practices;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.MVPVM;
using GenerativeObjects.Practices.MVPVM.Commands;
using GenerativeObjects.Practices.Settings;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.ORMSupportClasses.NHibernate;
using GenerativeObjects.Practices.LayerSupportClasses.BusinessLayer.ImportExport;
using GenerativeObjects.Practices.LayerSupportClasses.BusinessLayer.DocumentBuilder;
using Solid.BusinessLayer.ORMSupportClasses;
using Solid.BusinessLayer.Components.Server;
using Solid.BusinessLayer.Components.Server.Extensions;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Threading;
using Solid.Features.Security;
using Solid.Feature.Security.Common;
using Solid.Features.Security.ServiceLayer;
using Solid.Features.Security.DataProviders;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.Common;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Security.SAML20;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer.Extensions;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer.Extensions;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Services.Email;
using static GenerativeObjects.Practices.LayerSupportClasses.ApplicationSettings.Constants;
using Solid.Data.DataProviders;
using Solid.Data.DataProviders.Dispatchers;
using Solid.ServiceLayer.IncludeMapping;
using Solid.BusinessLayer;
using Solid.Data.DataProviders.Database;
using Solid.Data.DataProviders.Custom;
using Solid.Data.DataObjects;
using Solid.Data.DataObjects.Factories;
using Solid.Data.DeleteHandlers;
using Solid.ServiceLayer.WebHandlers;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Storage.Common;
using GenerativeObjects.Practices.LayerSupportClasses.Features.Storage;

namespace Solid.ServiceLayer
{ 
    public static class Container
    {
        public static IUnityContainer Initialize()
        {		
			var container = new UnityContainer(); 

            container.RegisterType<IObjectsDataSet, ObjectsDataSet>();
            
            container.RegisterType<IDataTransactionAdapter>(
                new InjectionFactory(c =>
                {
                    var dbKey = c.Resolve<IThreadContext>().DbKey;
                    //IF dbKey "null" or null or empty             THEN we use the default connectionString in your web.config if there is only one, otherwise ERROR
                    //   dbKey not empty or not null and not found THEN error
                    // var connectionString = DataAccessHelper.ReadConnectionStringFromConfig(dbKey);
                    // return new DataAccessAdapter(connectionString);
					return new NHibernateDataAccessAdapter();
                }));

			// Transactions
			{
				// Singleton provider of transactions
				container.RegisterType<ITransactionProvider, DatabaseTransactionProvider>(new ContainerControlledLifetimeManager());
			
				// The default request handler data access transaction. Per-thread so that we can manage / detect incomplete transactions
				// IParameterisedTransaction is a lower-level (ORM support) interface that resolves to the same per-thread transaction (so that low-level can see the transaction parameters)
				container.RegisterType<DatabaseDataProviderTransaction>(new PerThreadLifetimeManager());
				container.RegisterType<IDataProviderTransaction>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<DatabaseDataProviderTransaction>()));
				container.RegisterType<IParameterisedTransaction>(new PerThreadLifetimeManager(), new InjectionFactory(c => c.Resolve<DatabaseDataProviderTransaction>()));
				
				// Custom / client transaction instances
				container.RegisterType<IClientTransaction, DatabaseDataProviderTransaction>();
			}

			// Save dependency resolution
			container.RegisterType<ISaveDependencyResolver, SaveDependencyResolver>();

			// Delete traversal algorithm		
			container.RegisterType<IDataProviderDeleteStrategy, DeleteResolver>();

			// Default Delete blockage explanation 
			container.RegisterType<IDeleteBlockageExplanationProvider, DefaultDeleteBlockageExplainer>();

			// Async / Worker thread context
			container.RegisterType<IThreadContext, ThreadContext>(new PerThreadLifetimeManager());      // PerThread because that's its purpose.

			container.RegisterType(typeof(ILogEngine), typeof(
Solid.BusinessLayer.ORMSupportClasses.LogEngine), new ContainerControlledLifetimeManager());

			// Server Components
			{		
				container.RegisterType<IGOReportsHelper, GOReportsHelperSurrogate>();
				container.RegisterType<IGOFileUploader, GOFileUploaderSurrogate>();
				container.RegisterType<IGOSecurityProvider, GOSecurityProviderSurrogate>();
				
				// Server Component Extension provider
				{
					container.RegisterType<IComponentApiExtensionProvider, ComponentApiExtensionProvider>(new ContainerControlledLifetimeManager());
				}

			}	// End Server Components
			container.RegisterType<IDataProvider<GORoleDataObject>, GORoleDataProvider>();
			container.RegisterType<IDataProvider<VisitedPlaceDataObject>, VisitedPlaceDataProvider>();
			container.RegisterType<IDataProvider<PlaceDataObject>, PlaceDataProvider>();
			container.RegisterType<IDataProvider<LocationDataObject>, LocationDataProvider>();
			container.RegisterType<IDataProvider<PlaceToLocationDataObject>, PlaceToLocationDataProvider>();
			container.RegisterType<IDataProvider<CountryDataObject>, CountryDataProvider>();
			
            container.RegisterType<IDataFacade, DataFacade>(new ContainerControlledLifetimeManager());               
            container.RegisterType<IDataProviderProxy, DataProviderProxy>(new ContainerControlledLifetimeManager());               
		
            #region Data Providers
			container.RegisterType<IDataProvider<GOGroupRoleDataObject>, GOGroupRoleDataProvider>();
			container.RegisterType<IDataProvider<UserProfileDataObject>, UserProfileDataProvider>();
			container.RegisterType<IDataProvider<GOUserDataObject>, GOUserDataProvider>();
			container.RegisterType<IDataProvider<GOGroupDataObject>, GOGroupDataProvider>();
			container.RegisterType<IDataProvider<GOUserRoleDataObject>, GOUserRoleDataProvider>();
			container.RegisterType<IDataProvider<GOUserGroupDataObject>, GOUserGroupDataProvider>();
			container.RegisterType<IDataProvider<GOLoginHistoryDataObject>, GOLoginHistoryDataProvider>();
			
			// EntityDataProvider: Given an entity instance, get its corresponding entity data provider
			container.RegisterType<IEntityDataProvider, DatabaseEntityProvider>(new ContainerControlledLifetimeManager());

            #endregion Data Providers
			container.RegisterType<ISettingsProvider, SettingsProvider>(new ContainerControlledLifetimeManager());   
			
			container.RegisterType<IDataProviderExtension<GOUserDataObject>, GOSecurityProvider>("GOUserSecurityProviderExtension");		// The GOSecurityProvider also provides OnBeforeSave extension for GOUsers
			container.RegisterType<IApiExtension, AuthenticationApiExtension>("AuthenticationApiExtension", new ContainerControlledLifetimeManager());
            container.RegisterType<IAuthentication, Authentication>(new ContainerControlledLifetimeManager());
            container.RegisterType<IAuthorizations, Authorizations>(new ContainerControlledLifetimeManager());
			container.RegisterType<IUserIdentity, UserIdentity>(new PerThreadLifetimeManager());		// PerThread else one thread can overwrite another's user token

            #region Authorizations & Data Provider Extensions
			container.RegisterType<IEntityAuthorizations, GORoleAuthorizations>("goroleauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GORoleDataObject>, GORoleDataProviderSecurityExtension>("goroledataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, VisitedPlaceAuthorizations>("visitedplaceauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<VisitedPlaceDataObject>, VisitedPlaceDataProviderSecurityExtension>("visitedplacedataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOGroupRoleAuthorizations>("gogrouproleauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOGroupRoleDataObject>, GOGroupRoleDataProviderSecurityExtension>("gogrouproledataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, PlaceAuthorizations>("placeauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<PlaceDataObject>, PlaceDataProviderSecurityExtension>("placedataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, UserProfileAuthorizations>("userprofileauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<UserProfileDataObject>, UserProfileDataProviderSecurityExtension>("userprofiledataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, LocationAuthorizations>("locationauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<LocationDataObject>, LocationDataProviderSecurityExtension>("locationdataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, PlaceToLocationAuthorizations>("placetolocationauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<PlaceToLocationDataObject>, PlaceToLocationDataProviderSecurityExtension>("placetolocationdataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOUserAuthorizations>("gouserauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOUserDataObject>, GOUserDataProviderSecurityExtension>("gouserdataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOGroupAuthorizations>("gogroupauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOGroupDataObject>, GOGroupDataProviderSecurityExtension>("gogroupdataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOUserRoleAuthorizations>("gouserroleauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOUserRoleDataObject>, GOUserRoleDataProviderSecurityExtension>("gouserroledataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, CountryAuthorizations>("countryauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<CountryDataObject>, CountryDataProviderSecurityExtension>("countrydataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOUserGroupAuthorizations>("gousergroupauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOUserGroupDataObject>, GOUserGroupDataProviderSecurityExtension>("gousergroupdataprovidersecurityextension", new ContainerControlledLifetimeManager());
			container.RegisterType<IEntityAuthorizations, GOLoginHistoryAuthorizations>("gologinhistoryauthorizations", new ContainerControlledLifetimeManager());
			container.RegisterType<IDataProviderExtension<GOLoginHistoryDataObject>, GOLoginHistoryDataProviderSecurityExtension>("gologinhistorydataprovidersecurityextension", new ContainerControlledLifetimeManager());
            #endregion Authorizations & Data Provider Extensions
		
            #region Server Component Security Extensions
			{ // Server Component Security Extensions
				container.RegisterType<IGOReportsHelperExtension, GOReportsHelperSecurityExtension>(new ContainerControlledLifetimeManager());
				container.RegisterType<IGOFileUploaderExtension, GOFileUploaderSecurityExtension>(new ContainerControlledLifetimeManager());
				container.RegisterType<IGOSecurityProviderExtension, GOSecurityProviderSecurityExtension>(new ContainerControlledLifetimeManager());
			} // End Server Component Security Extensions
            #endregion Server Component Security Extensions
            #region Data Object Factories
			container.RegisterType<IDataObjectFactory<GORoleDataObject>, GORoleFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<VisitedPlaceDataObject>, VisitedPlaceFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOGroupRoleDataObject>, GOGroupRoleFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<PlaceDataObject>, PlaceFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<UserProfileDataObject>, UserProfileFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<LocationDataObject>, LocationFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<PlaceToLocationDataObject>, PlaceToLocationFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOUserDataObject>, GOUserFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOGroupDataObject>, GOGroupFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOUserRoleDataObject>, GOUserRoleFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<CountryDataObject>, CountryFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOUserGroupDataObject>, GOUserGroupFactory>(new ContainerControlledLifetimeManager());
			container.RegisterType<IDataObjectFactory<GOLoginHistoryDataObject>, GOLoginHistoryFactory>(new ContainerControlledLifetimeManager());
            #endregion Data Object Factories

            #region Data Provider Dispatchers
			container.RegisterType<IDataProviderDispatcher<GORoleDataObject>, GORoleDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<VisitedPlaceDataObject>, VisitedPlaceDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOGroupRoleDataObject>, GOGroupRoleDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<PlaceDataObject>, PlaceDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<UserProfileDataObject>, UserProfileDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<LocationDataObject>, LocationDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<PlaceToLocationDataObject>, PlaceToLocationDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOUserDataObject>, GOUserDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOGroupDataObject>, GOGroupDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOUserRoleDataObject>, GOUserRoleDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<CountryDataObject>, CountryDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOUserGroupDataObject>, GOUserGroupDataProviderDispatcher>();
			container.RegisterType<IDataProviderDispatcher<GOLoginHistoryDataObject>, GOLoginHistoryDataProviderDispatcher>();
            #endregion Data Provider Dispatchers
            
            #region Entity Api Handlers
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GORoleDataObject>>("goroleapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<VisitedPlaceDataObject>>("visitedplaceapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOGroupRoleDataObject>>("gogrouproleapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<PlaceDataObject>>("placeapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<UserProfileDataObject>>("userprofileapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<LocationDataObject>>("locationapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<PlaceToLocationDataObject>>("placetolocationapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOUserDataObject>>("gouserapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOGroupDataObject>>("gogroupapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOUserRoleDataObject>>("gouserroleapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<CountryDataObject>>("countryapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOUserGroupDataObject>>("gousergroupapihandler");
			container.RegisterType<IEntityApiHandler, EntityApiHandler<GOLoginHistoryDataObject>>("gologinhistoryapihandler");
            #endregion Entity Api Handlers
      
			// Extension providers for Entities
            #region Extension providers for Entities
			{
				// GORole
				container.RegisterType<IEntityApiExtensionProvider<GORoleDataObject>, EntityApiExtensionProvider<GORoleDataObject>>(new ContainerControlledLifetimeManager());
				// VisitedPlace
				container.RegisterType<IEntityApiExtensionProvider<VisitedPlaceDataObject>, EntityApiExtensionProvider<VisitedPlaceDataObject>>(new ContainerControlledLifetimeManager());
				// GOGroupRole
				container.RegisterType<IEntityApiExtensionProvider<GOGroupRoleDataObject>, EntityApiExtensionProvider<GOGroupRoleDataObject>>(new ContainerControlledLifetimeManager());
				// Place
				container.RegisterType<IEntityApiExtensionProvider<PlaceDataObject>, EntityApiExtensionProvider<PlaceDataObject>>(new ContainerControlledLifetimeManager());
				// UserProfile
				container.RegisterType<IEntityApiExtensionProvider<UserProfileDataObject>, EntityApiExtensionProvider<UserProfileDataObject>>(new ContainerControlledLifetimeManager());
				// Location
				container.RegisterType<IEntityApiExtensionProvider<LocationDataObject>, EntityApiExtensionProvider<LocationDataObject>>(new ContainerControlledLifetimeManager());
				// PlaceToLocation
				container.RegisterType<IEntityApiExtensionProvider<PlaceToLocationDataObject>, EntityApiExtensionProvider<PlaceToLocationDataObject>>(new ContainerControlledLifetimeManager());
				// GOUser
				container.RegisterType<IEntityApiExtensionProvider<GOUserDataObject>, EntityApiExtensionProvider<GOUserDataObject>>(new ContainerControlledLifetimeManager());
				// GOGroup
				container.RegisterType<IEntityApiExtensionProvider<GOGroupDataObject>, EntityApiExtensionProvider<GOGroupDataObject>>(new ContainerControlledLifetimeManager());
				// GOUserRole
				container.RegisterType<IEntityApiExtensionProvider<GOUserRoleDataObject>, EntityApiExtensionProvider<GOUserRoleDataObject>>(new ContainerControlledLifetimeManager());
				// Country
				container.RegisterType<IEntityApiExtensionProvider<CountryDataObject>, EntityApiExtensionProvider<CountryDataObject>>(new ContainerControlledLifetimeManager());
				// GOUserGroup
				container.RegisterType<IEntityApiExtensionProvider<GOUserGroupDataObject>, EntityApiExtensionProvider<GOUserGroupDataObject>>(new ContainerControlledLifetimeManager());
				// GOLoginHistory
				container.RegisterType<IEntityApiExtensionProvider<GOLoginHistoryDataObject>, EntityApiExtensionProvider<GOLoginHistoryDataObject>>(new ContainerControlledLifetimeManager());
			}
            #endregion Extension providers for Entities

			container.RegisterType<IStorageProvider, AzureStorageProvider>(new ContainerControlledLifetimeManager());
            //Must have always a FileSystemeStorageProvider available when Property 'IsLocalFile' is used
            container.RegisterType<IStorageProvider, FileSystemStorageProvider>("FileSystemStorageProvider", new ContainerControlledLifetimeManager());
			
	

            #region DeleteHandler DataProvider Extensions
			// DeleteHandler DataProvider Extensions
			{
				container.RegisterType<IDataProviderExtension<GORoleDataObject>, GORoleDeleteHandler>("goroledeletehandler");
				container.RegisterType<IDataProviderExtension<VisitedPlaceDataObject>, VisitedPlaceDeleteHandler>("visitedplacedeletehandler");
				container.RegisterType<IDataProviderExtension<GOGroupRoleDataObject>, GOGroupRoleDeleteHandler>("gogrouproledeletehandler");
				container.RegisterType<IDataProviderExtension<PlaceDataObject>, PlaceDeleteHandler>("placedeletehandler");
				container.RegisterType<IDataProviderExtension<UserProfileDataObject>, UserProfileDeleteHandler>("userprofiledeletehandler");
				container.RegisterType<IDataProviderExtension<LocationDataObject>, LocationDeleteHandler>("locationdeletehandler");
				container.RegisterType<IDataProviderExtension<PlaceToLocationDataObject>, PlaceToLocationDeleteHandler>("placetolocationdeletehandler");
				container.RegisterType<IDataProviderExtension<GOUserDataObject>, GOUserDeleteHandler>("gouserdeletehandler");
				container.RegisterType<IDataProviderExtension<GOGroupDataObject>, GOGroupDeleteHandler>("gogroupdeletehandler");
				container.RegisterType<IDataProviderExtension<GOUserRoleDataObject>, GOUserRoleDeleteHandler>("gouserroledeletehandler");
				container.RegisterType<IDataProviderExtension<CountryDataObject>, CountryDeleteHandler>("countrydeletehandler");
				container.RegisterType<IDataProviderExtension<GOUserGroupDataObject>, GOUserGroupDeleteHandler>("gousergroupdeletehandler");
				container.RegisterType<IDataProviderExtension<GOLoginHistoryDataObject>, GOLoginHistoryDeleteHandler>("gologinhistorydeletehandler");
			}
            #endregion DeleteHandler DataProvider Extensions
		

			// Auto-Include path mapping for Presentation Elements
			container.RegisterType<IAutoInclude, AutoInclude>(new ContainerControlledLifetimeManager());
			
            //In the future it should be interesting to add this dependency only when we need it, ie when we have at least one Publipostage
            container.RegisterType<IDocumentProcessor, DocumentProcessor>(new ContainerControlledLifetimeManager());
 
 
			// Framework Services
			{
				container.RegisterType<IMailbox, OutlookMailbox>();
				container.RegisterType<ISMTPClient, SMTPClient>();
			}

			// Register custom types if any
            CustomContainer.RegisterCustomTypes(container);

            var settings = container.Resolve<ISettingsProvider>();
            settings["WrapForPolicyInjection"] = false;

			return container;
        }
    }
}





 