////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.IO;
using System.IO.Compression;
using System.Text;
using System.Web;
using Newtonsoft.Json;
using Solid.ServiceLayer.Json;
using Solid.Data.DataObjects;
using Solid.Data.DataObjects.Factories;
using Solid.BusinessLayer.Components.Server;
using System.Security.Claims;
using GenerativeObjects.Practices.ORMSupportClasses;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.Settings;
using GenerativeObjects.Practices.ExceptionHandling;
using System.Collections.Generic;
using System.Web.SessionState;
using System.Net;
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer.Extensions;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer.Http;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using Unity;

namespace Solid.ServiceLayer.WebHandlers
{
    public class JsonGOSecurityProviderServiceHandler : ApiHandler
    {
		private ILogEngine _logEngine;

		public JsonSerializerSettings GetSerializationSettings(bool isDatasetAPI)
		{
			JsonSerializerSettings settings;	
			
			if (isDatasetAPI)
				settings  = new JsonSerializerSettings() { Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects")};
			else
			{
                bool byRef = true;

                if (HttpContext.Current.Request["byRef"] != null)
                {
                    if (!bool.TryParse(HttpContext.Current.Request["byRef"], out byRef))
                        byRef = true;

                }

				if (byRef)
				{
					settings = new JsonSerializerSettings() { Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects"), PreserveReferencesHandling = PreserveReferencesHandling.Objects  };
				}
				else
				{				
					settings = new JsonSerializerSettings() { Binder = new TypeNameSerializationBinder("Solid.Data.DataObjects.{0}, Solid.Data.DataObjects"), PreserveReferencesHandling = PreserveReferencesHandling.None, ReferenceLoopHandling = ReferenceLoopHandling.Ignore };
				}				
			}

			if (isDatasetAPI)
			{
				settings.TypeNameHandling = TypeNameHandling.Auto;
			}
			else
			{
				settings.TypeNameHandling = TypeNameHandling.Objects;
			}

			var context = HttpContext.Current;
			if (context.Request["dateformat"] != null && context.Request["dateformat"] == "microsoft")
				settings.DateFormatHandling = DateFormatHandling.MicrosoftDateFormat;
			else
				settings.DateFormatHandling = DateFormatHandling.IsoDateFormat;

			return settings;
		}

		private IComponentApiExtensionProvider Extensions
		{
			get
			{
				// Resolve Extensions Provider
				var extensions = ApplicationSettings.Container.Resolve<IComponentApiExtensionProvider>();

				// Ensure initialised
				if (extensions != null)
				{
					// Initialise and hook up extensions
					extensions.Init();
				}
				else
				{
					throw new Exception("Component Extensions Initialization error: required dependency was unresolved");
				}
				
				return extensions;
			}
		}

        public override void DoProcessRequest(HttpContext context)
        {
			Exception error = null;

			try
			{
				// Set response headers
				context.Response.ContentType = "application/json";
				context.Response.ContentEncoding = Encoding.UTF8;

				// Notify 'request begins' to extensions
				Extensions.OnRequestAction(new ApiExtensionResponseData { action = context.Request.HttpMethod, context = "BEGIN", data = null });

				// Extract request parts via an ApiRequest wrapper
				ApiRequest request = new ApiRequest(context);
				bool isDatasetAPI = request.IsDatasetApi;
				string methodName = request.MethodName;

				// Enable GZip Compression if client support it
				AddGZipCompression(context, request.AcceptGZip);

				switch (context.Request.HttpMethod)
				{
					case "GET":
					case "POST":
                    {
						switch (methodName)
						{
							case "registerbyemail":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "email", context.Request["email"] },
											{ "password", "********" },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "RegisterByEmail", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.RegisterByEmail(String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]), String.IsNullOrEmpty(context.Request["password"]) ? null : Convert.ToString(context.Request["password"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "RegisterByEmail", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "authorizenavigationto":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "nodeName", context.Request["nodeName"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "AuthorizeNavigationTo", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.AuthorizeNavigationTo(String.IsNullOrEmpty(context.Request["nodeName"]) ? null : Convert.ToString(context.Request["nodeName"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "AuthorizeNavigationTo", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "validateregistration":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "token", context.Request["token"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ValidateRegistration", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.ValidateRegistration(String.IsNullOrEmpty(context.Request["token"]) ? null : Convert.ToString(context.Request["token"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ValidateRegistration", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "logout":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "useCookies", context.Request["useCookies"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LogOut", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.LogOut(String.IsNullOrEmpty(context.Request["useCookies"]) ? false : Convert.ToBoolean(context.Request["useCookies"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LogOut", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "unregister":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "email", context.Request["email"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Unregister", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.Unregister(String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Unregister", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "authenticate":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "username", context.Request["username"] },
											{ "password", "********" },
											{ "useCookies", context.Request["useCookies"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Authenticate", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.Authenticate(String.IsNullOrEmpty(context.Request["username"]) ? null : Convert.ToString(context.Request["username"]), String.IsNullOrEmpty(context.Request["password"]) ? null : Convert.ToString(context.Request["password"]), String.IsNullOrEmpty(context.Request["useCookies"]) ? false : Convert.ToBoolean(context.Request["useCookies"]));
									
									// Seralise result, if not already json encoded string
									string json = result;
									
									if (!IsJson(result))
										json = JsonConvert.SerializeObject(result, GetSerializationSettings(false));

									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Authenticate", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "registerfull":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "firstname", context.Request["firstname"] },
											{ "lastname", context.Request["lastname"] },
											{ "email", context.Request["email"] },
											{ "password", "********" },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "RegisterFull", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.RegisterFull(String.IsNullOrEmpty(context.Request["firstname"]) ? null : Convert.ToString(context.Request["firstname"]), String.IsNullOrEmpty(context.Request["lastname"]) ? null : Convert.ToString(context.Request["lastname"]), String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]), String.IsNullOrEmpty(context.Request["password"]) ? null : Convert.ToString(context.Request["password"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "RegisterFull", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "resetpassword":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "password", "********" },
											{ "token", context.Request["token"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ResetPassword", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.ResetPassword(String.IsNullOrEmpty(context.Request["password"]) ? null : Convert.ToString(context.Request["password"]), String.IsNullOrEmpty(context.Request["token"]) ? null : Convert.ToString(context.Request["token"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ResetPassword", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "lostpassword":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "email", context.Request["email"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LostPassword", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.LostPassword(String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "LostPassword", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "blockuser":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "email", context.Request["email"] },
											{ "block", context.Request["block"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "BlockUser", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.BlockUser(String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]), String.IsNullOrEmpty(context.Request["block"]) ? false : Convert.ToBoolean(context.Request["block"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "BlockUser", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "register":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "username", context.Request["username"] },
											{ "email", context.Request["email"] },
											{ "password", "********" },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Register", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.Register(String.IsNullOrEmpty(context.Request["username"]) ? null : Convert.ToString(context.Request["username"]), String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]), String.IsNullOrEmpty(context.Request["password"]) ? null : Convert.ToString(context.Request["password"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "Register", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "keepalive":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "KeepAlive", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									JsonGOSecurityProviderService.KeepAlive();
									context.Response.StatusCode = (int)HttpStatusCode.NoContent;
							}
								break;
							case "changepassword":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "userId", context.Request["userId"] },
											{ "oldPassword", context.Request["oldPassword"] },
											{ "newPassword", context.Request["newPassword"] },
											{ "useCookies", context.Request["useCookies"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ChangePassword", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.ChangePassword(String.IsNullOrEmpty(context.Request["userId"]) ? null : Convert.ToString(context.Request["userId"]), String.IsNullOrEmpty(context.Request["oldPassword"]) ? null : Convert.ToString(context.Request["oldPassword"]), String.IsNullOrEmpty(context.Request["newPassword"]) ? null : Convert.ToString(context.Request["newPassword"]), String.IsNullOrEmpty(context.Request["useCookies"]) ? false : Convert.ToBoolean(context.Request["useCookies"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ChangePassword", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							case "approveuser":
							{	
									// Notify Extensions
									{
										var args = new Dictionary<string, string>()
										{
											{ "email", context.Request["email"] },
										};

										// Notify method call to extensions
										Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ApproveUser", context = "BEFORE_CALL", data = JsonConvert.SerializeObject(args) });
									}

									var result = JsonGOSecurityProviderService.ApproveUser(String.IsNullOrEmpty(context.Request["email"]) ? null : Convert.ToString(context.Request["email"]));
									// Seralise result
									string json = JsonConvert.SerializeObject(result, GetSerializationSettings(false)); 						
									// Notify result to extensions
									Extensions.OnRequestAction(new ApiExtensionResponseData { action = "ApproveUser", context = "JSON", data = json });
									
									WriteResponse(context, json);
							}
								break;
							default:
								_logEngine.LogError("Unknown json method: " + methodName, "Unknown json method: "+ methodName, "JsonGOSecurityProviderServiceHandler", null);
								throw new PulpException("Unknow json method: " + methodName);
						}
                    }
                    break;
                case "OPTIONS":
                    return;
                default:
                    throw new InvalidOperationException("Invalid Verb " + context.Request.HttpMethod);
				}
			}
			catch (Exception exception)
			{
				error = exception;

				// Notify to extensions and re-throw
				Extensions.OnRequestAction(new ApiExtensionResponseData { action = "EXCEPTION", context = exception.GetType().Name, data = exception.ToString(), error = true });
				throw;
			}
			finally
			{
				// Check no transaction left running
				DatabaseTransaction.AbortAnyOngoingTransaction(error);
			}
        }

		public static void WriteResponse(HttpContext context, string jsonData)
		{
			// case jsonp
			if (context.Request["callback"] != null)
                context.Response.Write(String.Format("{0}({1});", context.Request["callback"], jsonData));
            else
                context.Response.Write(jsonData);
		}

		/// <summary>
	    /// If the request indicate that it allow to server to send GZip data, add the proper header.
		/// </summary>
		public static void AddGZipCompression(HttpContext context, bool acceptGZip)
		{
			if (acceptGZip)
			{
				context.Response.Filter = new GZipStream(context.Response.Filter, CompressionMode.Compress);
				HttpContext.Current.Response.AppendHeader("Content-encoding", "gzip");
			} 
		}

	
        public override bool IsReusable
        {
            // To enable pooling, return true here.
            // This keeps the handler in memory.
            get { return true; }
        }

		private bool IsJson(string s)
		{
			if (string.IsNullOrEmpty(s))
				return false;

			s = s.Trim();
			return (s.StartsWith("{") && s.EndsWith("}")) || (s.StartsWith("[") && s.EndsWith("]"));
		}
    }
}
