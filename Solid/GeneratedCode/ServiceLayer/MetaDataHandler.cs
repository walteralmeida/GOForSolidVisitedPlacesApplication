////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Net;
using System.Web;
using System.IO;
using System.IO.Compression;
using System.Text.RegularExpressions;
using GenerativeObjects.Practices.DependencyInjection;
using GenerativeObjects.Practices.Settings;
using GenerativeObjects.Practices.ExceptionHandling;
using GenerativeObjects.Practices.ORMSupportClasses;
using System.Web.SessionState;
using System.Configuration;
using Newtonsoft.Json;
using GenerativeObjects.Practices.LayerSupportClasses.ServiceLayer;


namespace Solid.ServiceLayer.WebHandlers
{
    public class MetaDataHandler : ApiHandler
    {
		private string _metadataPath = HttpContext.Current.Server.MapPath("..") + "\\Model\\metadata.js";

        public override void DoProcessRequest(HttpContext context)
        {
			try
			{
				context.Response.ContentType = "application/json";
				context.Response.ContentEncoding = Encoding.UTF8;

				// Enable GZip Compression if client support it
				var acceptGZip = HttpContext.Current.Request.Headers["Accept-Encoding"] != null && HttpContext.Current.Request.Headers["Accept-Encoding"].Contains("gzip");
				AddGZipCompression(context, acceptGZip);

				using (StreamReader r = new StreamReader(_metadataPath))
                {
                    string json = r.ReadToEnd();
                    json = Regex.Replace(json, "(\"(?:[^\"\\\\]|\\\\.)*\")|\\s+", "$1");
                    object data = JsonConvert.DeserializeObject(json);
                    context.Response.Write(JsonConvert.SerializeObject(data));
                }
			}
			finally
			{
			}
        }
		
		/// <summary>
		/// If the request indicate that it allow to server to send GZip data, add the proper header.
		/// </summary>
		public static void AddGZipCompression(HttpContext context, bool acceptGZip)
		{
			if (acceptGZip)
			{
				context.Response.Filter = new GZipStream(context.Response.Filter, CompressionMode.Compress);
				HttpContext.Current.Response.AppendHeader("Content-encoding", "gzip");
			} 
		}

        public override bool IsReusable
        {
            // To enable pooling, return true here.
            // This keeps the handler in memory.
            get { return true; }
        }
    }
} 