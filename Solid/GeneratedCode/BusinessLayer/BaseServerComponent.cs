////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;

using Progress = System.Tuple<float, string>;
using IProgressMonitor = System.IProgress<System.Tuple<float, string>>;

namespace Solid.BusinessLayer.ORMSupportClasses
{
    public class BaseServerComponent
    {
		public IDataFacade DataFacade { get { return ApplicationSettings.Container.Resolve<IDataFacade>(); } }

		/// Progress:
		/// Every component is a potential progress provider (useful for asynchronous operations)
		/// Any component operation that wishes to report progress to some observer just needs to call 
		/// Progress() with a normalised float amount (0 = no progress, 1.0f = complete).
		/// The observer can then receive these progress notifications by setting ProgressMonitor (and implementing IProgressMonitor.Report())
		public IProgressMonitor ProgressMonitor { get; set; }

		protected void Progress(float amount, string info = null)
		{
			if (ProgressMonitor != null)
				ProgressMonitor.Report(new Progress(amount, info));
		}
    }
}
