////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using Solid.Data.DataObjects;
using GenerativeObjects.Practices.Logging;
using GenerativeObjects.Practices.DependencyInjection;

// Note : You should modify this code in order to write proper log.
// Here, we used an object which name is "Log" to provide you an exemple of a custom implementation.
namespace Solid.BusinessLayer.ORMSupportClasses
{
    public class LogEngine : ILogEngine
    {
        #region Initialize
        
        public void Initialize()
        {
        }

        #endregion Initialize

        #region public methods

        public void LogSuccess(String title, String description, String source, Guid? additionalData)
	    {
            // LogService.SaveLog(new LogContainer(LogHelper.LogSuccess(title, description, source, additionalData)), null);
        }

		public void LogNotification(String title, String description, String source, Guid? additionalData)
        {
            // LogService.SaveLog(new LogContainer(LogHelper.LogNotification(title, description, source, additionalData)), null);
        }

		public void LogWarning(String title, String description, String source, Guid? additionalData)
        {
            // LogService.SaveLog(new LogContainer(LogHelper.LogWarning(title, description, source, additionalData)), null);
        }

        public void LogError(String title, String description, String source, Guid? additionalData)
        {
            // LogService.SaveLog(new LogContainer(LogHelper.LogError(title, description, source, additionalData)), null);
        }

        #endregion public methods


        public void Dispose()
        {
        }

    }

	#region Helper
    public class LogHelper
    {

        #region fields
        // To avoid problems with too long description
        // private static int DescriptionSize = 4000;
        #endregion fields

		#region Example of custom implementation for Logger
        // public static LogDataObject LogSuccess(String title, String description, String source, int additionalData)
        // {
        //		return Log(new LogDataObject(), title, description, source, LogStatusEnum.Success, additionalData);
        // }

        // public static LogDataObject LogError(String title, String description, String source, int additionalData)
        // {
        //		return Log(new LogDataObject(), title, description, source, LogStatusEnum.Error, additionalData);
        // }

        // public static LogDataObject LogNotification(String title, String description, String source, int additionalData)
        // {
        //		return Log(new LogDataObject(), title, description, source, LogStatusEnum.Notification, additionalData);
        // }

        // public static LogDataObject LogWarning(String title, String description, String source, int additionalData)
        // {
        //		return Log(new LogDataObject(), title, description, source, LogStatusEnum.Warning, additionalData);
        // }

		// You should provide a custom implementation for the logger
        // private static LogDataObject Log(LogDataObject log, String title, string description, string source, LogStatusEnum status, int additionalData)
        // {
        //		log.CurrentDate = DateTime.Now;
        //		log.Title = title;
        //		log.Description = description.Substring(0, description.Length >= DescriptionSize ? DescriptionSize : description.Length);
        //		log.Source = source;
		//		log.LogStatus = status;
        //		return log;
        // }
		#endregion Example of custom implementation for Logger
    }
	#endregion Helper
}
