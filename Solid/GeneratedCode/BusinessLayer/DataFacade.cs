////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using GenerativeObjects.Practices.LayerSupportClasses;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Solid.Data.DataObjects;
using Unity;


namespace Solid.BusinessLayer.ORMSupportClasses
{
    public class DataFacade : IDataFacade
    {
		#region private fields
		private IDataProvider<CountryDataObject> _countryDataProvider;
		private IDataProvider<GOGroupDataObject> _gOGroupDataProvider;
		private IDataProvider<GOGroupRoleDataObject> _gOGroupRoleDataProvider;
		private IDataProvider<GOLoginHistoryDataObject> _gOLoginHistoryDataProvider;
		private IDataProvider<GORoleDataObject> _gORoleDataProvider;
		private IDataProvider<GOUserDataObject> _gOUserDataProvider;
		private IDataProvider<GOUserGroupDataObject> _gOUserGroupDataProvider;
		private IDataProvider<GOUserRoleDataObject> _gOUserRoleDataProvider;
		private IDataProvider<LocationDataObject> _locationDataProvider;
		private IDataProvider<PlaceDataObject> _placeDataProvider;
		private IDataProvider<PlaceToLocationDataObject> _placeToLocationDataProvider;
		#endregion

		public IDataProvider<CountryDataObject> CountryDataProvider 
		{ 
			get
			{
                if (null == _countryDataProvider)
                    _countryDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<CountryDataObject>>();

                return _countryDataProvider;
			}
		}

		public IDataProvider<GOGroupDataObject> GOGroupDataProvider 
		{ 
			get
			{
                if (null == _gOGroupDataProvider)
                    _gOGroupDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOGroupDataObject>>();

                return _gOGroupDataProvider;
			}
		}

		public IDataProvider<GOGroupRoleDataObject> GOGroupRoleDataProvider 
		{ 
			get
			{
                if (null == _gOGroupRoleDataProvider)
                    _gOGroupRoleDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOGroupRoleDataObject>>();

                return _gOGroupRoleDataProvider;
			}
		}

		public IDataProvider<GOLoginHistoryDataObject> GOLoginHistoryDataProvider 
		{ 
			get
			{
                if (null == _gOLoginHistoryDataProvider)
                    _gOLoginHistoryDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOLoginHistoryDataObject>>();

                return _gOLoginHistoryDataProvider;
			}
		}

		public IDataProvider<GORoleDataObject> GORoleDataProvider 
		{ 
			get
			{
                if (null == _gORoleDataProvider)
                    _gORoleDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GORoleDataObject>>();

                return _gORoleDataProvider;
			}
		}

		public IDataProvider<GOUserDataObject> GOUserDataProvider 
		{ 
			get
			{
                if (null == _gOUserDataProvider)
                    _gOUserDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOUserDataObject>>();

                return _gOUserDataProvider;
			}
		}

		public IDataProvider<GOUserGroupDataObject> GOUserGroupDataProvider 
		{ 
			get
			{
                if (null == _gOUserGroupDataProvider)
                    _gOUserGroupDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOUserGroupDataObject>>();

                return _gOUserGroupDataProvider;
			}
		}

		public IDataProvider<GOUserRoleDataObject> GOUserRoleDataProvider 
		{ 
			get
			{
                if (null == _gOUserRoleDataProvider)
                    _gOUserRoleDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<GOUserRoleDataObject>>();

                return _gOUserRoleDataProvider;
			}
		}

		public IDataProvider<LocationDataObject> LocationDataProvider 
		{ 
			get
			{
                if (null == _locationDataProvider)
                    _locationDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<LocationDataObject>>();

                return _locationDataProvider;
			}
		}

		public IDataProvider<PlaceDataObject> PlaceDataProvider 
		{ 
			get
			{
                if (null == _placeDataProvider)
                    _placeDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<PlaceDataObject>>();

                return _placeDataProvider;
			}
		}

		public IDataProvider<PlaceToLocationDataObject> PlaceToLocationDataProvider 
		{ 
			get
			{
                if (null == _placeToLocationDataProvider)
                    _placeToLocationDataProvider = ApplicationSettings.Container.Resolve<IDataProvider<PlaceToLocationDataObject>>();

                return _placeToLocationDataProvider;
			}
		}

 
	}
}
