////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 

using System;
using System.Collections.Generic;
using System.IO.Compression;
using System.Linq;
using System.Text;
using System.Web;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using NLog;

namespace Solid.Helper.WebApplicationLayer.ConstructViews
{
    public class ConstructViews
    {
        private static readonly Logger techLogger = LogManager.GetCurrentClassLogger();
		
		private static bool _hasErrors = false;
        private const string DEFAULT_ROOT_DIR = @"G:\Projects";

        public static void Main(String[] args)
        {
            // Get all the views
            var rootDir = BuildRootDirectory(args);
            
			var applicationPath = String.Format(@"{0}\{1}\GeneratedCode\WebApplicationLayer\", rootDir, @"GOForSolid\Solid");
			
            techLogger.Debug(" rootDir        ={0}\n" +
                             " applicationPath={1}", rootDir, applicationPath);
            // Making sure boolean is false
            _hasErrors = false;            
            
            if(!Directory.Exists(applicationPath + "ConstructedViews")) {
                Directory.CreateDirectory(applicationPath + "ConstructedViews");
            }
            // for each view, 
            var allPages = Directory.GetFiles(applicationPath + "Views\\").Where(f => f.EndsWith("PageView.html"));
            foreach (var file in allPages)
            {
                ConstructPages(applicationPath, file);
            }

            foreach (var partialViewsDirectory in Directory.GetDirectories(applicationPath + "Views\\PartialViews\\"))
            {
                foreach (var partialView in Directory.GetFiles(partialViewsDirectory))
                {
                    ConstructPartialView(applicationPath, partialView);
                }
            }

			// If errors have been thrown, we force a pause in the command line to make sur the developper sees them
            if (_hasErrors && !args.Contains("-fromServer"))
            {
                Console.WriteLine("Press ENTER to continue deployment...");
                Console.ReadLine();
            }

			var allLayouts = Directory.GetFiles(applicationPath + "Views\\").Where(f => f.EndsWith("Layout.html"));
			foreach(var applicationLayout in allLayouts)
			{
				File.Copy(applicationLayout, applicationLayout.Replace("\\Views\\", "\\ConstructedViews\\"), true); // replace the file
			}

			var sourceCustomViewsPath = applicationPath + "Views\\CUSTOM";
			if (Directory.Exists(sourceCustomViewsPath) && Directory.GetFiles(sourceCustomViewsPath).Any())
			{
				var allCustomViews = Directory.GetFiles(sourceCustomViewsPath);
				var wwwCustomViewsPath = sourceCustomViewsPath.Replace("\\Views\\", "\\ConstructedViews\\");
				if (!Directory.Exists(wwwCustomViewsPath))
				{
				    Directory.CreateDirectory(wwwCustomViewsPath);
				}
				foreach (var customView in allCustomViews)
				{
				    var destination = customView.Replace("\\Views\\", "\\ConstructedViews\\");
				    Console.WriteLine("from:" + customView + "\n to:" + destination);
					File.Copy(customView, destination, true);
				}
			}
        }
        
        //it's a kind of Base Projects Directory : ex. C:\Projects, G:\Projects, C:\jws\GO_Pipeline
        private static string BuildRootDirectory(string[] args)
        {
            string rootFolder;
            var exists = args.Any(arg => arg.Contains("-projectsDir=") || arg.Contains("-rootFolder="));
            if (exists)
            {
                var path = args.Where(arg => (arg.Contains("-projectsDir=") || arg.Contains("-rootFolder=")) && arg.Split('=').Length > 1)
                               .Select(arg => arg.Split('=')[1])
                               .SingleOrDefault();
                rootFolder = string.IsNullOrWhiteSpace(path) ? DEFAULT_ROOT_DIR : path;
            }
            else
            {
                rootFolder = DEFAULT_ROOT_DIR;
            }
            return rootFolder;
        }

        public static void ConstructPartialView(string pApplicationPath, string partialViewPath)
        {
            string rawHtml;
            StreamReader reader;
            var fileName = partialViewPath.Substring(partialViewPath.LastIndexOf("\\") + 1);
            fileName = fileName.Substring(0, fileName.LastIndexOf("."));

            using (reader = new StreamReader(partialViewPath))
            {
                rawHtml = reader.ReadToEnd();
            }
            XDocument xdoc = null;

            try
            {
                xdoc = XDocument.Parse(rawHtml);
            }
			catch (Exception e)
            {
                // There is multiple Root Element. Do not use this Partial View
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(String.Format("Error while parsing {0}", fileName));
                Console.WriteLine(e.Message);
                Console.WriteLine();
                Console.ResetColor();

                _hasErrors = true;
            }
            if (xdoc != null)
            {
                var outputPath = partialViewPath.Replace("\\Views\\", "\\ConstructedViews\\");
                Directory.CreateDirectory(outputPath.Substring(0, outputPath.LastIndexOf("\\")));
                ConstructHtml(true, Path.Combine(pApplicationPath + "Views\\", "PartialViews\\"), String.Empty, String.Empty, String.Empty, ref rawHtml, false, String.Empty, String.Empty);

                // rawHtml contains the content
                using (var fw = new StreamWriter(outputPath))
                {
                    fw.Write(rawHtml);
                }
            }
        }

        public static void ConstructPages(string pApplicationPath, string pPath)
        {
            if (pApplicationPath == null) {
                throw new Exception("Unable to retrieve the Local Application Path");
            }
            string rawHtml;
            StreamReader reader;
            // remove everything before the file name
            var fileName = pPath.Substring(pPath.LastIndexOf("\\") + 1);
            // remove the extension
            fileName = fileName.Substring(0, fileName.LastIndexOf("."));

            using (reader = new StreamReader(pPath))
            {
                rawHtml = reader.ReadToEnd();
            }

            var xdoc = XDocument.Parse(rawHtml);
            var Zones = xdoc.Root.Descendants().Where(e => e.Attribute("data-placeholder") != null && e.Attribute("data-placeholder").Value == "contentZone");
            var outputPath = pApplicationPath + "ConstructedViews\\";
            foreach (var zone in Zones)
            {
                var zoneName = zone.Attribute("data-zonename").Value;
                if (zoneName == null) {
                    throw new Exception("Invalid Zone Name");
                }
                var innerXml = new StringBuilder();
                foreach (var node in zone.Nodes())
                {
                    innerXml.Append(node.ToString());
                }
                rawHtml = innerXml.ToString();

                ConstructHtml(true, Path.Combine(pApplicationPath + "Views\\", "PartialViews\\"), String.Empty, String.Empty, String.Empty, ref rawHtml, false, String.Empty, String.Empty);

                // rawHtml contains the content

                using (var fw = new StreamWriter(outputPath + fileName + "." + zoneName + ".html"))
                {
                    fw.Write(rawHtml);
                }
            }
        }

        public static void ConstructHtml(bool isroot, string rootPath, string viewNameRoot, string displayMode, string databindRoot, ref string rawHtml, bool isContainedInList, string parent, string currentPartialViewName)
        {
            rawHtml = rawHtml.Replace("{VIEWNAME}", viewNameRoot);
            rawHtml = rawHtml.Replace("{DATABINDROOT}", databindRoot);
            rawHtml = rawHtml.Replace("{DATABINDROOTWITHOUTDOT}", databindRoot.Replace(".", "-"));
            rawHtml = rawHtml.Replace("{DISPLAYMODE}", displayMode);
            rawHtml = rawHtml.Replace("{LISTNAME}", String.IsNullOrEmpty(currentPartialViewName) ? "Root" : currentPartialViewName);

            if (databindRoot.Contains("KOData"))
            {
                rawHtml = rawHtml.Replace("{PARENTDATABINDROOT}", databindRoot);
            }
            else
            {
                rawHtml = rawHtml.Replace("{PARENTDATABINDROOT}", "$parent." + databindRoot);
            }

            // Find in rightSide, value between '{#' and '#}'
            var matches = Regex.Matches(rawHtml, @"\{#([^}]*)#\}");

            foreach (Match match in matches)
            {
                var partialViewParts = match.Groups[1].Value.Split(',');

                var partialViewIsContainer = Convert.ToBoolean(partialViewParts[0]);
                var partialViewName = partialViewParts[1];
                var elementType = partialViewParts[2];
                var theDisplayMode = partialViewParts[3];
                var partialViewPath = partialViewParts[4];
                var partialViewFullName = String.IsNullOrEmpty(viewNameRoot) ? partialViewName : String.Format("{0}-{1}", viewNameRoot, partialViewName);

                string subRawHtml;
                StreamReader reader;
                string newDataBindRoot;
                var newIsRoot = false;

                // If the current element has a list as a direct parent, we need to reference the context with an alias (and not $data.)
                // just in case we have to deal with multiple nested lists.
                if (isContainedInList)
                {
                    newDataBindRoot = currentPartialViewName + "KOData.";
                }
                else
                {
                    // if we are root and container => next embedded control is still root
                    newIsRoot = isroot && partialViewIsContainer;

                    newDataBindRoot = isroot ? String.Empty : partialViewIsContainer ? databindRoot : String.Format("{0}{1}ViewModel.", databindRoot, partialViewName);

                    // a Sub form is a form contained in a hierarchical form => add "currentViewModel" accessor to databindroot
                    if (elementType == "SubForm")
                    {
                        newDataBindRoot = newDataBindRoot + partialViewName + "ViewModel.";
                    }
                }

				if(File.Exists(Path.Combine(rootPath, partialViewPath)))
				{
					using (reader = new StreamReader(Path.Combine(rootPath, partialViewPath)))
					{
						subRawHtml = reader.ReadToEnd();
						//_databindRoot = _databindRoot = subGridField.EntityField_Item.Name + "GridViewModel.";
						ConstructHtml(newIsRoot, rootPath, partialViewFullName, theDisplayMode, newDataBindRoot, ref subRawHtml, elementType == "List", parent, partialViewName);
					}

					rawHtml = rawHtml.Replace(match.Groups[0].Value, subRawHtml);
				}
				else
				{
					rawHtml = rawHtml.Replace(match.Groups[0].Value, "");
				}
            }
        }
    }
}
