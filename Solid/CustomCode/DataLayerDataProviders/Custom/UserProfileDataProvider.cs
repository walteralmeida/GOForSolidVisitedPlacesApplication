////////////////////////////////////////////////////////////////////////////////////////////
// This is Generated Code
// You should not modify this code as it may be overwritten. Use Partial classes instead
// Generated By Generative Objects  
//////////////////////////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using GenerativeObjects.Practices.LayerSupportClasses.DataLayer;
using GenerativeObjects.Practices.ORMSupportClasses;
using Solid.Data.DataObjects;
using VDS.RDF;
using VDS.RDF.Parsing;
using VDS.RDF.Query;
using VDS.RDF.Writing;
using System.Net;
using System.IO;
using System.Linq;
using GenerativeObjects.Practices.LayerSupportClasses;
using Unity;

namespace Solid.Data.DataProviders.Custom
{
    public class UserProfileDataProvider : DataProvider<UserProfileDataObject>
    {


        protected override int DoCount(LambdaExpression securityFilterExpression, string filterPredicate, object[] filterArguments, IObjectsDataSet context, Dictionary<string, object> parameters)
        {
            throw new NotImplementedException();
        }

        protected override void DoDelete(UserProfileDataObject entity, LambdaExpression securityFilterExpression, IObjectsDataSet context, Dictionary<string, object> parameters)
        {
            throw new NotImplementedException();
        }

        protected override UserProfileDataObject DoGet(UserProfileDataObject entity, LambdaExpression securityFilterExpression, List<string> includes, IObjectsDataSet context, Dictionary<string, object> parameters)
        {
            var userProfileUri = entity.Uri;

            var result = new UserProfileDataObject();
            result.Uri = entity.Uri;
            var dataset = ApplicationSettings.Container.Resolve<IObjectsDataSet>();
            dataset.AddObject(result);

            //var tempfile = DataProviderHelper.DownloadFile(userProfileUri, ".ttl");

            var g = new Graph();
            //g.LoadFromFile(tempfile);
            UriLoader.Load(g, new Uri(userProfileUri));

            var query = @"SELECT ?Name ?Role ?OrganizationName WHERE 
                                { ?me a <http://xmlns.com/foaf/0.1/Person> .
                                  ?me <http://www.w3.org/2006/vcard/ns#fn> ?Name .
                                        OPTIONAL 
                                        {
                                          ?me <http://www.w3.org/2006/vcard/ns#organization-name> ?OrganizationName .
                                          ?me <http://www.w3.org/2006/vcard/ns#role> ?Role .
                                        }
                                }";



            var returned = ((SparqlResultSet)g.ExecuteQuery(query)).SingleOrDefault();

            if (returned == null)
                return null;

            result.Role = returned["Role"].ToString();
            result.OrganizationName = returned["OrganizationName"].ToString();
            result.Name = returned["Name"].ToString();

            result.IsNew = false;
            result.IsDirty = false;

            return result;
        }

        protected override DataObjectCollection<UserProfileDataObject> DoGetCollection(LambdaExpression securityFilterExpression, string filterPredicate, object[] filterArguments, string orderByPredicate, int pageNumber, int pageSize, List<string> includes, IObjectsDataSet context, Dictionary<string, object> parameters)
        {
            DataObjectCollection<UserProfileDataObject> result = new DataObjectCollection<UserProfileDataObject>();
            result.ObjectsDataSet = ApplicationSettings.Container.Resolve<IObjectsDataSet>();

            foreach (var argument in filterArguments)
            {
                var uri = (argument as string[])[0];
                var userprofile = DoGet(new UserProfileDataObject(uri), null, null, context, parameters);

                result.Add(userprofile);
            }


            return result;
        }

        protected override UserProfileDataObject DoSave(UserProfileDataObject entity, LambdaExpression securityFilterExpression, List<string> includes, IObjectsDataSet context, Dictionary<string, object> parameters)
        {
            throw new NotImplementedException();
        }
    }
}
